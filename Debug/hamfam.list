
hamfam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000040e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200040ec  200040ec  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035042  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000639d  00000000  00000000  0005507e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f952  00000000  00000000  0005b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  0006ad70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001aa8  00000000  00000000  0006c250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fce2  00000000  00000000  0006dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000073cc  00000000  00000000  0007d9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00084da6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003fb8  00000000  00000000  00084e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800508c 	.word	0x0800508c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800508c 	.word	0x0800508c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 fa07 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f004 fc22 	bl	8004d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f004 fbf0 	bl	8004cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d78 	.word	0x20003d78
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d78 	.word	0x20003d78

08000538 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000538:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800053a:	4604      	mov	r4, r0
 800053c:	2800      	cmp	r0, #0
 800053e:	f000 812a 	beq.w	8000796 <HAL_ADC_Init+0x25e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000542:	6803      	ldr	r3, [r0, #0]
 8000544:	4a95      	ldr	r2, [pc, #596]	; (800079c <HAL_ADC_Init+0x264>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d00c      	beq.n	8000564 <HAL_ADC_Init+0x2c>
 800054a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800054e:	4293      	cmp	r3, r2
 8000550:	d008      	beq.n	8000564 <HAL_ADC_Init+0x2c>
 8000552:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000556:	4293      	cmp	r3, r2
 8000558:	d004      	beq.n	8000564 <HAL_ADC_Init+0x2c>
 800055a:	f240 110b 	movw	r1, #267	; 0x10b
 800055e:	4890      	ldr	r0, [pc, #576]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000560:	f004 fb77 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000564:	6863      	ldr	r3, [r4, #4]
 8000566:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800056a:	d004      	beq.n	8000576 <HAL_ADC_Init+0x3e>
 800056c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000570:	488b      	ldr	r0, [pc, #556]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000572:	f004 fb6e 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000576:	68a3      	ldr	r3, [r4, #8]
 8000578:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800057c:	d004      	beq.n	8000588 <HAL_ADC_Init+0x50>
 800057e:	f240 110d 	movw	r1, #269	; 0x10d
 8000582:	4887      	ldr	r0, [pc, #540]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000584:	f004 fb65 	bl	8004c52 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8000588:	6923      	ldr	r3, [r4, #16]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d904      	bls.n	8000598 <HAL_ADC_Init+0x60>
 800058e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000592:	4883      	ldr	r0, [pc, #524]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000594:	f004 fb5d 	bl	8004c52 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000598:	69a3      	ldr	r3, [r4, #24]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d904      	bls.n	80005a8 <HAL_ADC_Init+0x70>
 800059e:	f240 110f 	movw	r1, #271	; 0x10f
 80005a2:	487f      	ldr	r0, [pc, #508]	; (80007a0 <HAL_ADC_Init+0x268>)
 80005a4:	f004 fb55 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80005a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005aa:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 80005ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80005b2:	d014      	beq.n	80005de <HAL_ADC_Init+0xa6>
 80005b4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80005b8:	d011      	beq.n	80005de <HAL_ADC_Init+0xa6>
 80005ba:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80005be:	d00e      	beq.n	80005de <HAL_ADC_Init+0xa6>
 80005c0:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 80005c4:	d00b      	beq.n	80005de <HAL_ADC_Init+0xa6>
 80005c6:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80005ca:	d008      	beq.n	80005de <HAL_ADC_Init+0xa6>
 80005cc:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d904      	bls.n	80005de <HAL_ADC_Init+0xa6>
 80005d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80005d8:	4871      	ldr	r0, [pc, #452]	; (80007a0 <HAL_ADC_Init+0x268>)
 80005da:	f004 fb3a 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80005de:	68e3      	ldr	r3, [r4, #12]
 80005e0:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80005e4:	d004      	beq.n	80005f0 <HAL_ADC_Init+0xb8>
 80005e6:	f240 1111 	movw	r1, #273	; 0x111
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <HAL_ADC_Init+0x268>)
 80005ec:	f004 fb31 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80005f0:	69e3      	ldr	r3, [r4, #28]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d904      	bls.n	8000602 <HAL_ADC_Init+0xca>
 80005f8:	f44f 7189 	mov.w	r1, #274	; 0x112
 80005fc:	4868      	ldr	r0, [pc, #416]	; (80007a0 <HAL_ADC_Init+0x268>)
 80005fe:	f004 fb28 	bl	8004c52 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000604:	2b01      	cmp	r3, #1
 8000606:	d904      	bls.n	8000612 <HAL_ADC_Init+0xda>
 8000608:	f240 1113 	movw	r1, #275	; 0x113
 800060c:	4864      	ldr	r0, [pc, #400]	; (80007a0 <HAL_ADC_Init+0x268>)
 800060e:	f004 fb20 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8000612:	6963      	ldr	r3, [r4, #20]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d904      	bls.n	8000622 <HAL_ADC_Init+0xea>
 8000618:	f44f 718a 	mov.w	r1, #276	; 0x114
 800061c:	4860      	ldr	r0, [pc, #384]	; (80007a0 <HAL_ADC_Init+0x268>)
 800061e:	f004 fb18 	bl	8004c52 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000622:	6a23      	ldr	r3, [r4, #32]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d904      	bls.n	8000632 <HAL_ADC_Init+0xfa>
 8000628:	f240 1115 	movw	r1, #277	; 0x115
 800062c:	485c      	ldr	r0, [pc, #368]	; (80007a0 <HAL_ADC_Init+0x268>)
 800062e:	f004 fb10 	bl	8004c52 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000634:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <HAL_ADC_Init+0x26c>)
 8000636:	429a      	cmp	r2, r3
 8000638:	d008      	beq.n	800064c <HAL_ADC_Init+0x114>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800063a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800063c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8000640:	d004      	beq.n	800064c <HAL_ADC_Init+0x114>
 8000642:	f240 1119 	movw	r1, #281	; 0x119
 8000646:	4856      	ldr	r0, [pc, #344]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000648:	f004 fb03 	bl	8004c52 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800064c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800064e:	b92b      	cbnz	r3, 800065c <HAL_ADC_Init+0x124>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000650:	6463      	str	r3, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000652:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000656:	4620      	mov	r0, r4
 8000658:	f003 fb42 	bl	8003ce0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800065c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800065e:	06db      	lsls	r3, r3, #27
 8000660:	f100 8097 	bmi.w	8000792 <HAL_ADC_Init+0x25a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800066a:	f023 0302 	bic.w	r3, r3, #2
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000674:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <HAL_ADC_Init+0x270>)
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800067c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	6861      	ldr	r1, [r4, #4]
 8000682:	430a      	orrs	r2, r1
 8000684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000686:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000688:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800069a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800069c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800069e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006aa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006ac:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ba:	493a      	ldr	r1, [pc, #232]	; (80007a4 <HAL_ADC_Init+0x26c>)
 80006bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006be:	428a      	cmp	r2, r1
 80006c0:	d05b      	beq.n	800077a <HAL_ADC_Init+0x242>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c2:	6899      	ldr	r1, [r3, #8]
 80006c4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006c8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006ca:	6899      	ldr	r1, [r3, #8]
 80006cc:	430a      	orrs	r2, r1
 80006ce:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006de:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006e2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e4:	f022 0202 	bic.w	r2, r2, #2
 80006e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006f2:	6a22      	ldr	r2, [r4, #32]
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d048      	beq.n	800078a <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80006f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006fa:	3b01      	subs	r3, #1
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d904      	bls.n	800070a <HAL_ADC_Init+0x1d2>
 8000700:	f240 6127 	movw	r1, #1575	; 0x627
 8000704:	4826      	ldr	r0, [pc, #152]	; (80007a0 <HAL_ADC_Init+0x268>)
 8000706:	f004 faa4 	bl	8004c52 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800070a:	6823      	ldr	r3, [r4, #0]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800070c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000714:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800071c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	3901      	subs	r1, #1
 8000722:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000728:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800072a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000736:	3901      	subs	r1, #1
 8000738:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800073e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000740:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000742:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800074e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000750:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000752:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800075a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800075c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800075e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000762:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000764:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000768:	f023 0303 	bic.w	r3, r3, #3
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000772:	2300      	movs	r3, #0
 8000774:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000778:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000788:	e7a9      	b.n	80006de <HAL_ADC_Init+0x1a6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000790:	e7c9      	b.n	8000726 <HAL_ADC_Init+0x1ee>
    tmp_hal_status = HAL_ERROR;
 8000792:	2001      	movs	r0, #1
 8000794:	e7ed      	b.n	8000772 <HAL_ADC_Init+0x23a>
    return HAL_ERROR;
 8000796:	2001      	movs	r0, #1
}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	40012000 	.word	0x40012000
 80007a0:	08005104 	.word	0x08005104
 80007a4:	0f000001 	.word	0x0f000001
 80007a8:	40012300 	.word	0x40012300

080007ac <HAL_ADC_ConfigChannel>:
{
 80007ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80007b2:	680b      	ldr	r3, [r1, #0]
 80007b4:	2b12      	cmp	r3, #18
{
 80007b6:	4604      	mov	r4, r0
 80007b8:	460f      	mov	r7, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80007ba:	d904      	bls.n	80007c6 <HAL_ADC_ConfigChannel+0x1a>
 80007bc:	f240 5115 	movw	r1, #1301	; 0x515
 80007c0:	484e      	ldr	r0, [pc, #312]	; (80008fc <HAL_ADC_ConfigChannel+0x150>)
 80007c2:	f004 fa46 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d904      	bls.n	80007d8 <HAL_ADC_ConfigChannel+0x2c>
 80007ce:	f240 5116 	movw	r1, #1302	; 0x516
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <HAL_ADC_ConfigChannel+0x150>)
 80007d4:	f004 fa3d 	bl	8004c52 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d904      	bls.n	80007e8 <HAL_ADC_ConfigChannel+0x3c>
 80007de:	f240 5117 	movw	r1, #1303	; 0x517
 80007e2:	4846      	ldr	r0, [pc, #280]	; (80008fc <HAL_ADC_ConfigChannel+0x150>)
 80007e4:	f004 fa35 	bl	8004c52 <assert_failed>
  __HAL_LOCK(hadc);
 80007e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	f000 8082 	beq.w	80008f6 <HAL_ADC_ConfigChannel+0x14a>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007f2:	683d      	ldr	r5, [r7, #0]
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hadc);
 80007f8:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007fa:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80007fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000800:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000802:	d929      	bls.n	8000858 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000804:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000808:	68c1      	ldr	r1, [r0, #12]
 800080a:	3b1e      	subs	r3, #30
 800080c:	f04f 0e07 	mov.w	lr, #7
 8000810:	fa0e fe03 	lsl.w	lr, lr, r3
 8000814:	ea21 010e 	bic.w	r1, r1, lr
 8000818:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800081a:	68c1      	ldr	r1, [r0, #12]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	430b      	orrs	r3, r1
 8000822:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	2a06      	cmp	r2, #6
 8000828:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800082c:	d824      	bhi.n	8000878 <HAL_ADC_ConfigChannel+0xcc>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800082e:	4413      	add	r3, r2
 8000830:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8000832:	1f59      	subs	r1, r3, #5
 8000834:	231f      	movs	r3, #31
 8000836:	408b      	lsls	r3, r1
 8000838:	ea27 0303 	bic.w	r3, r7, r3
 800083c:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800083e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000840:	fa06 f101 	lsl.w	r1, r6, r1
 8000844:	4311      	orrs	r1, r2
 8000846:	6341      	str	r1, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <HAL_ADC_ConfigChannel+0x154>)
 800084a:	4298      	cmp	r0, r3
 800084c:	d033      	beq.n	80008b6 <HAL_ADC_ConfigChannel+0x10a>
  __HAL_UNLOCK(hadc);
 800084e:	2000      	movs	r0, #0
 8000850:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000854:	b003      	add	sp, #12
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000858:	6901      	ldr	r1, [r0, #16]
 800085a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800085e:	f04f 0e07 	mov.w	lr, #7
 8000862:	fa0e fe03 	lsl.w	lr, lr, r3
 8000866:	ea21 010e 	bic.w	r1, r1, lr
 800086a:	6101      	str	r1, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800086c:	6901      	ldr	r1, [r0, #16]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	430b      	orrs	r3, r1
 8000874:	6103      	str	r3, [r0, #16]
 8000876:	e7d5      	b.n	8000824 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13U)
 8000878:	2a0c      	cmp	r2, #12
 800087a:	d80e      	bhi.n	800089a <HAL_ADC_ConfigChannel+0xee>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800087c:	4413      	add	r3, r2
 800087e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000880:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000884:	231f      	movs	r3, #31
 8000886:	4093      	lsls	r3, r2
 8000888:	ea21 0303 	bic.w	r3, r1, r3
 800088c:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800088e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000890:	fa06 f202 	lsl.w	r2, r6, r2
 8000894:	431a      	orrs	r2, r3
 8000896:	6302      	str	r2, [r0, #48]	; 0x30
 8000898:	e7d6      	b.n	8000848 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800089a:	4413      	add	r3, r2
 800089c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800089e:	3b41      	subs	r3, #65	; 0x41
 80008a0:	221f      	movs	r2, #31
 80008a2:	409a      	lsls	r2, r3
 80008a4:	ea21 0202 	bic.w	r2, r1, r2
 80008a8:	62c2      	str	r2, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80008ac:	fa06 f103 	lsl.w	r1, r6, r3
 80008b0:	4311      	orrs	r1, r2
 80008b2:	62c1      	str	r1, [r0, #44]	; 0x2c
 80008b4:	e7c8      	b.n	8000848 <HAL_ADC_ConfigChannel+0x9c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008b6:	2d12      	cmp	r5, #18
 80008b8:	d104      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0x118>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_ADC_ConfigChannel+0x158>)
 80008bc:	6853      	ldr	r3, [r2, #4]
 80008be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c4:	f1a5 0310 	sub.w	r3, r5, #16
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d8c0      	bhi.n	800084e <HAL_ADC_ConfigChannel+0xa2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_ADC_ConfigChannel+0x158>)
 80008ce:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008d6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d8:	d1b9      	bne.n	800084e <HAL_ADC_ConfigChannel+0xa2>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_ADC_ConfigChannel+0x15c>)
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_ADC_ConfigChannel+0x160>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80008e4:	230a      	movs	r3, #10
 80008e6:	4353      	muls	r3, r2
        counter--;
 80008e8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0ae      	beq.n	800084e <HAL_ADC_ConfigChannel+0xa2>
        counter--;
 80008f0:	9b01      	ldr	r3, [sp, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	e7f8      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x13c>
  __HAL_LOCK(hadc);
 80008f6:	2002      	movs	r0, #2
 80008f8:	e7ac      	b.n	8000854 <HAL_ADC_ConfigChannel+0xa8>
 80008fa:	bf00      	nop
 80008fc:	08005104 	.word	0x08005104
 8000900:	40012000 	.word	0x40012000
 8000904:	40012300 	.word	0x40012300
 8000908:	20000008 	.word	0x20000008
 800090c:	000f4240 	.word	0x000f4240

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000910:	1ec3      	subs	r3, r0, #3
 8000912:	2b04      	cmp	r3, #4
{
 8000914:	b510      	push	{r4, lr}
 8000916:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000918:	d903      	bls.n	8000922 <HAL_NVIC_SetPriorityGrouping+0x12>
 800091a:	21a2      	movs	r1, #162	; 0xa2
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800091e:	f004 f998 	bl	8004c52 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000924:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800092a:	041b      	lsls	r3, r3, #16
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000932:	0224      	lsls	r4, r4, #8
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800093c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800093e:	60d4      	str	r4, [r2, #12]
 8000940:	bd10      	pop	{r4, pc}
 8000942:	bf00      	nop
 8000944:	0800513c 	.word	0x0800513c
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800094c:	2a0f      	cmp	r2, #15
{ 
 800094e:	b570      	push	{r4, r5, r6, lr}
 8000950:	4604      	mov	r4, r0
 8000952:	460e      	mov	r6, r1
 8000954:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000956:	d903      	bls.n	8000960 <HAL_NVIC_SetPriority+0x14>
 8000958:	21ba      	movs	r1, #186	; 0xba
 800095a:	481a      	ldr	r0, [pc, #104]	; (80009c4 <HAL_NVIC_SetPriority+0x78>)
 800095c:	f004 f979 	bl	8004c52 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000960:	2e0f      	cmp	r6, #15
 8000962:	d903      	bls.n	800096c <HAL_NVIC_SetPriority+0x20>
 8000964:	21bb      	movs	r1, #187	; 0xbb
 8000966:	4817      	ldr	r0, [pc, #92]	; (80009c4 <HAL_NVIC_SetPriority+0x78>)
 8000968:	f004 f973 	bl	8004c52 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_NVIC_SetPriority+0x7c>)
 800096e:	68d9      	ldr	r1, [r3, #12]
 8000970:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000978:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	2a06      	cmp	r2, #6
 8000984:	bf8c      	ite	hi
 8000986:	3903      	subhi	r1, #3
 8000988:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098a:	fa00 f203 	lsl.w	r2, r0, r3
 800098e:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000992:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000996:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 800099a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	ea42 0205 	orr.w	r2, r2, r5
 80009a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	bfaf      	iteee	ge
 80009a6:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	f004 040f 	andlt.w	r4, r4, #15
 80009ae:	4b07      	ldrlt	r3, [pc, #28]	; (80009cc <HAL_NVIC_SetPriority+0x80>)
 80009b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	bfa5      	ittet	ge
 80009b4:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 80009b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
 80009c2:	bf00      	nop
 80009c4:	0800513c 	.word	0x0800513c
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	e000ed14 	.word	0xe000ed14

080009d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80009d2:	1e04      	subs	r4, r0, #0
 80009d4:	da03      	bge.n	80009de <HAL_NVIC_EnableIRQ+0xe>
 80009d6:	21ce      	movs	r1, #206	; 0xce
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_NVIC_EnableIRQ+0x24>)
 80009da:	f004 f93a 	bl	8004c52 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009de:	0962      	lsrs	r2, r4, #5
 80009e0:	2301      	movs	r3, #1
 80009e2:	f004 041f 	and.w	r4, r4, #31
 80009e6:	fa03 f404 	lsl.w	r4, r3, r4
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_NVIC_EnableIRQ+0x28>)
 80009ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	bf00      	nop
 80009f4:	0800513c 	.word	0x0800513c
 80009f8:	e000e100 	.word	0xe000e100

080009fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	3801      	subs	r0, #1
 80009fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a02:	d20a      	bcs.n	8000a1a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a08:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	21f0      	movs	r1, #240	; 0xf0
 8000a0c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000a28:	2804      	cmp	r0, #4
{
 8000a2a:	b510      	push	{r4, lr}
 8000a2c:	4c08      	ldr	r4, [pc, #32]	; (8000a50 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000a2e:	d00a      	beq.n	8000a46 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000a30:	b120      	cbz	r0, 8000a3c <HAL_SYSTICK_CLKSourceConfig+0x14>
 8000a32:	f240 11d9 	movw	r1, #473	; 0x1d9
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000a38:	f004 f90b 	bl	8004c52 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a42:	6023      	str	r3, [r4, #0]
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	e7f9      	b.n	8000a42 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010
 8000a54:	0800513c 	.word	0x0800513c

08000a58 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a58:	4b9c      	ldr	r3, [pc, #624]	; (8000ccc <HAL_GPIO_Init+0x274>)
 8000a5a:	4298      	cmp	r0, r3
{
 8000a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	4604      	mov	r4, r0
 8000a62:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a64:	d023      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a6a:	4298      	cmp	r0, r3
 8000a6c:	d01f      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d01b      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d017      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d013      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d00f      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d00b      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a9a:	4298      	cmp	r0, r3
 8000a9c:	d007      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x56>
 8000aa6:	21c3      	movs	r1, #195	; 0xc3
 8000aa8:	4889      	ldr	r0, [pc, #548]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000aaa:	f004 f8d2 	bl	8004c52 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	b112      	cbz	r2, 8000aba <HAL_GPIO_Init+0x62>
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	041b      	lsls	r3, r3, #16
 8000ab8:	b11b      	cbz	r3, 8000ac2 <HAL_GPIO_Init+0x6a>
 8000aba:	21c4      	movs	r1, #196	; 0xc4
 8000abc:	4884      	ldr	r0, [pc, #528]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000abe:	f004 f8c8 	bl	8004c52 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000ac2:	686b      	ldr	r3, [r5, #4]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d917      	bls.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000ac8:	f1a3 0211 	sub.w	r2, r3, #17
 8000acc:	2a01      	cmp	r2, #1
 8000ace:	d913      	bls.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000ad0:	4980      	ldr	r1, [pc, #512]	; (8000cd4 <HAL_GPIO_Init+0x27c>)
 8000ad2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000ad6:	428a      	cmp	r2, r1
 8000ad8:	d00e      	beq.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000ada:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d00a      	beq.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000ae2:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000ae6:	428a      	cmp	r2, r1
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000aea:	4a7b      	ldr	r2, [pc, #492]	; (8000cd8 <HAL_GPIO_Init+0x280>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0xa0>
 8000af0:	21c5      	movs	r1, #197	; 0xc5
 8000af2:	4877      	ldr	r0, [pc, #476]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000af4:	f004 f8ad 	bl	8004c52 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000af8:	68ab      	ldr	r3, [r5, #8]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d903      	bls.n	8000b06 <HAL_GPIO_Init+0xae>
 8000afe:	21c6      	movs	r1, #198	; 0xc6
 8000b00:	4873      	ldr	r0, [pc, #460]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000b02:	f004 f8a6 	bl	8004c52 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b06:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8000ce0 <HAL_GPIO_Init+0x288>
{
 8000b0a:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 8000b0c:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8000b10:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b14:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000b18:	454f      	cmp	r7, r9
 8000b1a:	f040 80c4 	bne.w	8000ca6 <HAL_GPIO_Init+0x24e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1e:	686a      	ldr	r2, [r5, #4]
 8000b20:	f022 0210 	bic.w	r2, r2, #16
 8000b24:	2a02      	cmp	r2, #2
 8000b26:	d118      	bne.n	8000b5a <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000b28:	692a      	ldr	r2, [r5, #16]
 8000b2a:	2a0d      	cmp	r2, #13
 8000b2c:	d905      	bls.n	8000b3a <HAL_GPIO_Init+0xe2>
 8000b2e:	2a0f      	cmp	r2, #15
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0xe2>
 8000b32:	21d7      	movs	r1, #215	; 0xd7
 8000b34:	4866      	ldr	r0, [pc, #408]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000b36:	f004 f88c 	bl	8004c52 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8000b3a:	08f1      	lsrs	r1, r6, #3
 8000b3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b40:	f006 0207 	and.w	r2, r6, #7
 8000b44:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 8000b46:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b48:	220f      	movs	r2, #15
 8000b4a:	4082      	lsls	r2, r0
 8000b4c:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b50:	692a      	ldr	r2, [r5, #16]
 8000b52:	4082      	lsls	r2, r0
 8000b54:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b58:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5a:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b62:	f04f 0a03 	mov.w	sl, #3
 8000b66:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6a:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b6e:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b72:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b76:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b7a:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b7e:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b80:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b82:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 8000b84:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b86:	d817      	bhi.n	8000bb8 <HAL_GPIO_Init+0x160>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b88:	68ea      	ldr	r2, [r5, #12]
 8000b8a:	2a03      	cmp	r2, #3
 8000b8c:	d903      	bls.n	8000b96 <HAL_GPIO_Init+0x13e>
 8000b8e:	21ea      	movs	r1, #234	; 0xea
 8000b90:	484f      	ldr	r0, [pc, #316]	; (8000cd0 <HAL_GPIO_Init+0x278>)
 8000b92:	f004 f85e 	bl	8004c52 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8000b96:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b98:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b9a:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b9c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba0:	fa02 f20b 	lsl.w	r2, r2, fp
 8000ba4:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 8000ba6:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8000ba8:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000baa:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bae:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bb2:	40b3      	lsls	r3, r6
 8000bb4:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000bb6:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8000bb8:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bba:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bbc:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc0:	68ab      	ldr	r3, [r5, #8]
 8000bc2:	fa03 f30b 	lsl.w	r3, r3, fp
 8000bc6:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 8000bca:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bcc:	00c3      	lsls	r3, r0, #3
 8000bce:	d56a      	bpl.n	8000ca6 <HAL_GPIO_Init+0x24e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4a42      	ldr	r2, [pc, #264]	; (8000cdc <HAL_GPIO_Init+0x284>)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000bd8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000bdc:	6451      	str	r1, [r2, #68]	; 0x44
 8000bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000be0:	f026 0103 	bic.w	r1, r6, #3
 8000be4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000be8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bec:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000bf0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bf2:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf8:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bfc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c06:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <HAL_GPIO_Init+0x274>)
 8000c0c:	4294      	cmp	r4, r2
 8000c0e:	d01f      	beq.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c14:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	d04b      	beq.n	8000cb4 <HAL_GPIO_Init+0x25c>
 8000c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c20:	429c      	cmp	r4, r3
 8000c22:	d049      	beq.n	8000cb8 <HAL_GPIO_Init+0x260>
 8000c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	d047      	beq.n	8000cbc <HAL_GPIO_Init+0x264>
 8000c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c30:	429c      	cmp	r4, r3
 8000c32:	d045      	beq.n	8000cc0 <HAL_GPIO_Init+0x268>
 8000c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	d043      	beq.n	8000cc4 <HAL_GPIO_Init+0x26c>
 8000c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c40:	429c      	cmp	r4, r3
 8000c42:	d041      	beq.n	8000cc8 <HAL_GPIO_Init+0x270>
 8000c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	bf14      	ite	ne
 8000c4c:	2308      	movne	r3, #8
 8000c4e:	2307      	moveq	r3, #7
 8000c50:	fa03 f30e 	lsl.w	r3, r3, lr
 8000c54:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c58:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8000c5a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 8000c5e:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c62:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8000c64:	bf54      	ite	pl
 8000c66:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000c68:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8000c6c:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8000c70:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c74:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8000c76:	bf54      	ite	pl
 8000c78:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000c7a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 8000c7e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c82:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c86:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 8000c88:	bf54      	ite	pl
 8000c8a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000c8c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 8000c90:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 8000c94:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c98:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 8000c9a:	bf54      	ite	pl
 8000c9c:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8000c9e:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8000ca2:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca6:	3601      	adds	r6, #1
 8000ca8:	2e10      	cmp	r6, #16
 8000caa:	f47f af2f 	bne.w	8000b0c <HAL_GPIO_Init+0xb4>
      }
    }
  }
}
 8000cae:	b003      	add	sp, #12
 8000cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e7cb      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e7c9      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e7c7      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e7c5      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	e7c3      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000cc8:	2306      	movs	r3, #6
 8000cca:	e7c1      	b.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	08005177 	.word	0x08005177
 8000cd4:	10110000 	.word	0x10110000
 8000cd8:	10220000 	.word	0x10220000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40013c00 	.word	0x40013c00

08000ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce4:	b538      	push	{r3, r4, r5, lr}
 8000ce6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ce8:	460c      	mov	r4, r1
 8000cea:	b921      	cbnz	r1, 8000cf6 <HAL_GPIO_ReadPin+0x12>
 8000cec:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <HAL_GPIO_ReadPin+0x20>)
 8000cf2:	f003 ffae 	bl	8004c52 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cf6:	692b      	ldr	r3, [r5, #16]
 8000cf8:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000cfa:	bf14      	ite	ne
 8000cfc:	2001      	movne	r0, #1
 8000cfe:	2000      	moveq	r0, #0
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop
 8000d04:	08005177 	.word	0x08005177

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d0e:	460c      	mov	r4, r1
 8000d10:	b921      	cbnz	r1, 8000d1c <HAL_GPIO_WritePin+0x14>
 8000d12:	f240 11af 	movw	r1, #431	; 0x1af
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <HAL_GPIO_WritePin+0x30>)
 8000d18:	f003 ff9b 	bl	8004c52 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000d1c:	2e01      	cmp	r6, #1
 8000d1e:	d906      	bls.n	8000d2e <HAL_GPIO_WritePin+0x26>
 8000d20:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <HAL_GPIO_WritePin+0x30>)
 8000d26:	f003 ff94 	bl	8004c52 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d2a:	61ac      	str	r4, [r5, #24]
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d1fb      	bne.n	8000d2a <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	e7f9      	b.n	8000d2a <HAL_GPIO_WritePin+0x22>
 8000d36:	bf00      	nop
 8000d38:	08005177 	.word	0x08005177

08000d3c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d3c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2800      	cmp	r0, #0
 8000d42:	f000 80c1 	beq.w	8000ec8 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8000d46:	6803      	ldr	r3, [r0, #0]
 8000d48:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <HAL_I2C_Init+0x190>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00c      	beq.n	8000d68 <HAL_I2C_Init+0x2c>
 8000d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d008      	beq.n	8000d68 <HAL_I2C_Init+0x2c>
 8000d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d004      	beq.n	8000d68 <HAL_I2C_Init+0x2c>
 8000d5e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8000d62:	485b      	ldr	r0, [pc, #364]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000d64:	f003 ff75 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	4a5a      	ldr	r2, [pc, #360]	; (8000ed4 <HAL_I2C_Init+0x198>)
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d904      	bls.n	8000d7c <HAL_I2C_Init+0x40>
 8000d72:	f240 116f 	movw	r1, #367	; 0x16f
 8000d76:	4856      	ldr	r0, [pc, #344]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000d78:	f003 ff6b 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8000d7c:	68a3      	ldr	r3, [r4, #8]
 8000d7e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8000d82:	d004      	beq.n	8000d8e <HAL_I2C_Init+0x52>
 8000d84:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000d88:	4851      	ldr	r0, [pc, #324]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000d8a:	f003 ff62 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8000d8e:	68e3      	ldr	r3, [r4, #12]
 8000d90:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d94:	f023 0303 	bic.w	r3, r3, #3
 8000d98:	b123      	cbz	r3, 8000da4 <HAL_I2C_Init+0x68>
 8000d9a:	f240 1171 	movw	r1, #369	; 0x171
 8000d9e:	484c      	ldr	r0, [pc, #304]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000da0:	f003 ff57 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8000da4:	6923      	ldr	r3, [r4, #16]
 8000da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dae:	d004      	beq.n	8000dba <HAL_I2C_Init+0x7e>
 8000db0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000db4:	4846      	ldr	r0, [pc, #280]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000db6:	f003 ff4c 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8000dba:	6963      	ldr	r3, [r4, #20]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d904      	bls.n	8000dca <HAL_I2C_Init+0x8e>
 8000dc0:	f240 1173 	movw	r1, #371	; 0x173
 8000dc4:	4842      	ldr	r0, [pc, #264]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000dc6:	f003 ff44 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8000dca:	69a3      	ldr	r3, [r4, #24]
 8000dcc:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8000dd0:	d004      	beq.n	8000ddc <HAL_I2C_Init+0xa0>
 8000dd2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8000dd6:	483e      	ldr	r0, [pc, #248]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000dd8:	f003 ff3b 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8000de2:	d004      	beq.n	8000dee <HAL_I2C_Init+0xb2>
 8000de4:	f240 1175 	movw	r1, #373	; 0x175
 8000de8:	4839      	ldr	r0, [pc, #228]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000dea:	f003 ff32 	bl	8004c52 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8000dee:	6a23      	ldr	r3, [r4, #32]
 8000df0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000df4:	d004      	beq.n	8000e00 <HAL_I2C_Init+0xc4>
 8000df6:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8000dfa:	4835      	ldr	r0, [pc, #212]	; (8000ed0 <HAL_I2C_Init+0x194>)
 8000dfc:	f003 ff29 	bl	8004c52 <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000e00:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e08:	b923      	cbnz	r3, 8000e14 <HAL_I2C_Init+0xd8>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f003 fd98 	bl	8004944 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e14:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e16:	4e30      	ldr	r6, [pc, #192]	; (8000ed8 <HAL_I2C_Init+0x19c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000e18:	4d30      	ldr	r5, [pc, #192]	; (8000edc <HAL_I2C_Init+0x1a0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e1a:	2324      	movs	r3, #36	; 0x24
 8000e1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e28:	f000 fe20 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e2c:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000e2e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e30:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e34:	42b3      	cmp	r3, r6
 8000e36:	bf84      	itt	hi
 8000e38:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000e3c:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000e3e:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e40:	bf91      	iteee	ls
 8000e42:	1c69      	addls	r1, r5, #1
 8000e44:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000e48:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000e4c:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e4e:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e50:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e52:	d821      	bhi.n	8000e98 <HAL_I2C_Init+0x15c>
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e5a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	bf98      	it	ls
 8000e62:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e64:	6a21      	ldr	r1, [r4, #32]
 8000e66:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e68:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e6e:	68e1      	ldr	r1, [r4, #12]
 8000e70:	6923      	ldr	r3, [r4, #16]
 8000e72:	430b      	orrs	r3, r1
 8000e74:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e76:	69a1      	ldr	r1, [r4, #24]
 8000e78:	6963      	ldr	r3, [r4, #20]
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e86:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000e88:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e8a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e90:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e92:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e98:	68a1      	ldr	r1, [r4, #8]
 8000e9a:	b949      	cbnz	r1, 8000eb0 <HAL_I2C_Init+0x174>
 8000e9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ea0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ea4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ea8:	b163      	cbz	r3, 8000ec4 <HAL_I2C_Init+0x188>
 8000eaa:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000eae:	e7d9      	b.n	8000e64 <HAL_I2C_Init+0x128>
 8000eb0:	2119      	movs	r1, #25
 8000eb2:	434b      	muls	r3, r1
 8000eb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eb8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ebc:	b113      	cbz	r3, 8000ec4 <HAL_I2C_Init+0x188>
 8000ebe:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000ec2:	e7cf      	b.n	8000e64 <HAL_I2C_Init+0x128>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	e7cd      	b.n	8000e64 <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
}
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	080051b0 	.word	0x080051b0
 8000ed4:	00061a7f 	.word	0x00061a7f
 8000ed8:	000186a0 	.word	0x000186a0
 8000edc:	000f4240 	.word	0x000f4240

08000ee0 <HAL_I2S_TxCpltCallback>:
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_I2S_RxCpltCallback>:
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_I2S_Init>:
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8000eea:	4604      	mov	r4, r0
 8000eec:	2800      	cmp	r0, #0
 8000eee:	f000 808d 	beq.w	800100c <HAL_I2S_Init+0x124>
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8000ef2:	6803      	ldr	r3, [r0, #0]
 8000ef4:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <HAL_I2S_Init+0x1c8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_I2S_Init+0x22>
 8000efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d003      	beq.n	8000f0a <HAL_I2S_Init+0x22>
 8000f02:	21e3      	movs	r1, #227	; 0xe3
 8000f04:	486b      	ldr	r0, [pc, #428]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f06:	f003 fea4 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8000f10:	d003      	beq.n	8000f1a <HAL_I2S_Init+0x32>
 8000f12:	21e4      	movs	r1, #228	; 0xe4
 8000f14:	4867      	ldr	r0, [pc, #412]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f16:	f003 fe9c 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8000f1a:	68a3      	ldr	r3, [r4, #8]
 8000f1c:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8000f20:	d005      	beq.n	8000f2e <HAL_I2S_Init+0x46>
 8000f22:	2bb0      	cmp	r3, #176	; 0xb0
 8000f24:	d003      	beq.n	8000f2e <HAL_I2S_Init+0x46>
 8000f26:	21e5      	movs	r1, #229	; 0xe5
 8000f28:	4862      	ldr	r0, [pc, #392]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f2a:	f003 fe92 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8000f2e:	68e2      	ldr	r2, [r4, #12]
 8000f30:	2a05      	cmp	r2, #5
 8000f32:	d803      	bhi.n	8000f3c <HAL_I2S_Init+0x54>
 8000f34:	232b      	movs	r3, #43	; 0x2b
 8000f36:	40d3      	lsrs	r3, r2
 8000f38:	07db      	lsls	r3, r3, #31
 8000f3a:	d403      	bmi.n	8000f44 <HAL_I2S_Init+0x5c>
 8000f3c:	21e6      	movs	r1, #230	; 0xe6
 8000f3e:	485d      	ldr	r0, [pc, #372]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f40:	f003 fe87 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8000f44:	6923      	ldr	r3, [r4, #16]
 8000f46:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8000f4a:	d003      	beq.n	8000f54 <HAL_I2S_Init+0x6c>
 8000f4c:	21e7      	movs	r1, #231	; 0xe7
 8000f4e:	4859      	ldr	r0, [pc, #356]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f50:	f003 fe7f 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8000f54:	6963      	ldr	r3, [r4, #20]
 8000f56:	4a58      	ldr	r2, [pc, #352]	; (80010b8 <HAL_I2S_Init+0x1d0>)
 8000f58:	f5a3 51fa 	sub.w	r1, r3, #8000	; 0x1f40
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	d905      	bls.n	8000f6c <HAL_I2S_Init+0x84>
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d003      	beq.n	8000f6c <HAL_I2S_Init+0x84>
 8000f64:	21e8      	movs	r1, #232	; 0xe8
 8000f66:	4853      	ldr	r0, [pc, #332]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f68:	f003 fe73 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8000f6c:	69a3      	ldr	r3, [r4, #24]
 8000f6e:	f033 0308 	bics.w	r3, r3, #8
 8000f72:	d003      	beq.n	8000f7c <HAL_I2S_Init+0x94>
 8000f74:	21e9      	movs	r1, #233	; 0xe9
 8000f76:	484f      	ldr	r0, [pc, #316]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f78:	f003 fe6b 	bl	8004c52 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8000f7c:	69e3      	ldr	r3, [r4, #28]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d903      	bls.n	8000f8a <HAL_I2S_Init+0xa2>
 8000f82:	21ea      	movs	r1, #234	; 0xea
 8000f84:	484b      	ldr	r0, [pc, #300]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8000f86:	f003 fe64 	bl	8004c52 <assert_failed>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000f8a:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <HAL_I2S_Init+0x1d4>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000f8e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000f92:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f003 fd63 	bl	8004a60 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	69d3      	ldr	r3, [r2, #28]
 8000f9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000fa2:	f023 030f 	bic.w	r3, r3, #15
 8000fa6:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000fa8:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8000faa:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000fac:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8000fae:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000fb0:	d035      	beq.n	800101e <HAL_I2S_Init+0x136>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000fb2:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8000fb4:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000fb6:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8000fb8:	bf0c      	ite	eq
 8000fba:	2610      	moveq	r6, #16
 8000fbc:	2620      	movne	r6, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000fbe:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000fc0:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8000fc2:	bf98      	it	ls
 8000fc4:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000fc6:	f000 fd8f 	bl	8001ae8 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	6961      	ldr	r1, [r4, #20]
 8000fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd2:	d11f      	bne.n	8001014 <HAL_I2S_Init+0x12c>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000fd4:	68e3      	ldr	r3, [r4, #12]
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	b1d3      	cbz	r3, 8001010 <HAL_I2S_Init+0x128>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000fda:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe0:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8000fe2:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8000fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8000fea:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000fee:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000ff2:	0212      	lsls	r2, r2, #8
 8000ff4:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000ff8:	1e99      	subs	r1, r3, #2
 8000ffa:	29fd      	cmp	r1, #253	; 0xfd
 8000ffc:	d911      	bls.n	8001022 <HAL_I2S_Init+0x13a>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000ffe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff ff6c 	bl	8000ee4 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
}
 800100e:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001010:	00f3      	lsls	r3, r6, #3
 8001012:	e7e3      	b.n	8000fdc <HAL_I2S_Init+0xf4>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001014:	230a      	movs	r3, #10
 8001016:	fbb0 f0f6 	udiv	r0, r0, r6
 800101a:	4343      	muls	r3, r0
 800101c:	e7e1      	b.n	8000fe2 <HAL_I2S_Init+0xfa>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 800101e:	2200      	movs	r2, #0
 8001020:	e7ea      	b.n	8000ff8 <HAL_I2S_Init+0x110>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001022:	4313      	orrs	r3, r2
 8001024:	6922      	ldr	r2, [r4, #16]
 8001026:	6821      	ldr	r1, [r4, #0]
 8001028:	4313      	orrs	r3, r2
 800102a:	620b      	str	r3, [r1, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800102c:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800102e:	6863      	ldr	r3, [r4, #4]
 8001030:	4313      	orrs	r3, r2
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001032:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001038:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 800103a:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800103c:	4313      	orrs	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	431d      	orrs	r5, r3
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8001042:	6a23      	ldr	r3, [r4, #32]
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8001044:	61cd      	str	r5, [r1, #28]
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8001046:	2b01      	cmp	r3, #1
 8001048:	d904      	bls.n	8001054 <HAL_I2S_Init+0x16c>
 800104a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800104e:	4819      	ldr	r0, [pc, #100]	; (80010b4 <HAL_I2S_Init+0x1cc>)
 8001050:	f003 fdff 	bl	8004c52 <assert_failed>
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001054:	6a23      	ldr	r3, [r4, #32]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d124      	bne.n	80010a4 <HAL_I2S_Init+0x1bc>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_I2S_Init+0x1d8>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800105c:	6821      	ldr	r1, [r4, #0]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800105e:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_I2S_Init+0x1dc>)
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_I2S_Init+0x1c8>)
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001064:	68e5      	ldr	r5, [r4, #12]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001066:	4299      	cmp	r1, r3
 8001068:	bf18      	it	ne
 800106a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800106e:	69d3      	ldr	r3, [r2, #28]
 8001070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800107a:	2302      	movs	r3, #2
 800107c:	6213      	str	r3, [r2, #32]
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800107e:	6863      	ldr	r3, [r4, #4]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001080:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_RX;
 8001082:	f433 7300 	bics.w	r3, r3, #512	; 0x200
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001086:	68a3      	ldr	r3, [r4, #8]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001088:	ea43 0305 	orr.w	r3, r3, r5
                         (uint16_t)hi2s->Init.CPOL))));
 800108c:	69a5      	ldr	r5, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800108e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      tmp = I2S_MODE_SLAVE_RX;
 8001092:	bf14      	ite	ne
 8001094:	2000      	movne	r0, #0
 8001096:	f44f 7080 	moveq.w	r0, #256	; 0x100
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800109a:	432b      	orrs	r3, r5
 800109c:	4303      	orrs	r3, r0
 800109e:	b29b      	uxth	r3, r3
 80010a0:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80010a2:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010a4:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80010a6:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	40003800 	.word	0x40003800
 80010b4:	080051e8 	.word	0x080051e8
 80010b8:	0002cec0 	.word	0x0002cec0
 80010bc:	080010c9 	.word	0x080010c9
 80010c0:	080011d5 	.word	0x080011d5
 80010c4:	40003400 	.word	0x40003400

080010c8 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80010c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80010ca:	6803      	ldr	r3, [r0, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80010d0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80010d4:	2a04      	cmp	r2, #4
{
 80010d6:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80010d8:	d13a      	bne.n	8001150 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	07d1      	lsls	r1, r2, #31
 80010de:	d519      	bpl.n	8001114 <I2S_IRQHandler+0x4c>
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	0652      	lsls	r2, r2, #25
 80010e4:	d516      	bpl.n	8001114 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80010e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80010e8:	1c91      	adds	r1, r2, #2
 80010ea:	62c1      	str	r1, [r0, #44]	; 0x2c
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80010f0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80010f2:	3a01      	subs	r2, #1
 80010f4:	b292      	uxth	r2, r2
 80010f6:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 80010f8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80010fa:	b292      	uxth	r2, r2
 80010fc:	b952      	cbnz	r2, 8001114 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	0c12      	lsrs	r2, r2, #16
 8001108:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800110a:	2301      	movs	r3, #1
 800110c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001110:	f7ff fee7 	bl	8000ee2 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001114:	9b01      	ldr	r3, [sp, #4]
 8001116:	0659      	lsls	r1, r3, #25
 8001118:	d51a      	bpl.n	8001150 <I2S_IRQHandler+0x88>
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	0692      	lsls	r2, r2, #26
 8001120:	d516      	bpl.n	8001150 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001128:	0412      	lsls	r2, r2, #16
 800112a:	0c12      	lsrs	r2, r2, #16
 800112c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800112e:	2200      	movs	r2, #0
 8001130:	9202      	str	r2, [sp, #8]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	9202      	str	r2, [sp, #8]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800113c:	2301      	movs	r3, #1
 800113e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff feca 	bl	8000ee4 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001150:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001154:	2b03      	cmp	r3, #3
 8001156:	d13a      	bne.n	80011ce <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001158:	9b01      	ldr	r3, [sp, #4]
 800115a:	079b      	lsls	r3, r3, #30
 800115c:	d51b      	bpl.n	8001196 <I2S_IRQHandler+0xce>
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	6853      	ldr	r3, [r2, #4]
 8001162:	0618      	lsls	r0, r3, #24
 8001164:	d517      	bpl.n	8001196 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001168:	1c99      	adds	r1, r3, #2
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	6261      	str	r1, [r4, #36]	; 0x24
 800116e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001170:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001172:	3b01      	subs	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8001178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800117a:	b29b      	uxth	r3, r3
 800117c:	b95b      	cbnz	r3, 8001196 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800117e:	6853      	ldr	r3, [r2, #4]
 8001180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001184:	041b      	lsls	r3, r3, #16
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800118a:	2301      	movs	r3, #1
 800118c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff fea5 	bl	8000ee0 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001196:	9b01      	ldr	r3, [sp, #4]
 8001198:	0719      	lsls	r1, r3, #28
 800119a:	d518      	bpl.n	80011ce <I2S_IRQHandler+0x106>
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	0692      	lsls	r2, r2, #26
 80011a2:	d514      	bpl.n	80011ce <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80011aa:	0412      	lsls	r2, r2, #16
 80011ac:	0c12      	lsrs	r2, r2, #16
 80011ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80011b0:	2200      	movs	r2, #0
 80011b2:	9203      	str	r2, [sp, #12]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80011c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff fe8b 	bl	8000ee4 <HAL_I2S_ErrorCallback>
    }
  }
}
 80011ce:	b004      	add	sp, #16
 80011d0:	bd10      	pop	{r4, pc}

080011d2 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80011d2:	4770      	bx	lr

080011d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80011d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 80011d6:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 80011d8:	4992      	ldr	r1, [pc, #584]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 80011de:	4a92      	ldr	r2, [pc, #584]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80011e0:	428b      	cmp	r3, r1
 80011e2:	bf18      	it	ne
 80011e4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 80011e8:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 80011ea:	6891      	ldr	r1, [r2, #8]
 80011ec:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 80011ee:	69d9      	ldr	r1, [r3, #28]
 80011f0:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80011f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80011f8:	d004      	beq.n	8001204 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80011fa:	69d9      	ldr	r1, [r3, #28]
 80011fc:	f411 7f40 	tst.w	r1, #768	; 0x300
 8001200:	f040 8097 	bne.w	8001332 <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001204:	9a00      	ldr	r2, [sp, #0]
 8001206:	0792      	lsls	r2, r2, #30
 8001208:	d51d      	bpl.n	8001246 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	0610      	lsls	r0, r2, #24
 800120e:	d51a      	bpl.n	8001246 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001210:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001212:	1c91      	adds	r1, r2, #2
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	6261      	str	r1, [r4, #36]	; 0x24
 8001218:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800121a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800121c:	3a01      	subs	r2, #1
 800121e:	b292      	uxth	r2, r2
 8001220:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001222:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001224:	b292      	uxth	r2, r2
 8001226:	b972      	cbnz	r2, 8001246 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c12      	lsrs	r2, r2, #16
 8001232:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8001234:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001236:	b29b      	uxth	r3, r3
 8001238:	b92b      	cbnz	r3, 8001246 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800123a:	2301      	movs	r3, #1
 800123c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff ffc6 	bl	80011d2 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001246:	9b01      	ldr	r3, [sp, #4]
 8001248:	07d9      	lsls	r1, r3, #31
 800124a:	d522      	bpl.n	8001292 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 800124c:	4a75      	ldr	r2, [pc, #468]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800124e:	6821      	ldr	r1, [r4, #0]
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001252:	4291      	cmp	r1, r2
 8001254:	bf18      	it	ne
 8001256:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	0652      	lsls	r2, r2, #25
 800125e:	d518      	bpl.n	8001292 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001262:	1c91      	adds	r1, r2, #2
 8001264:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001266:	68d9      	ldr	r1, [r3, #12]
 8001268:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 800126a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800126c:	3a01      	subs	r2, #1
 800126e:	b292      	uxth	r2, r2
 8001270:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8001272:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001274:	b292      	uxth	r2, r2
 8001276:	b962      	cbnz	r2, 8001292 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800127e:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8001280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	b92b      	cbnz	r3, 8001292 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001286:	2301      	movs	r3, #1
 8001288:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ffa0 	bl	80011d2 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001292:	9b01      	ldr	r3, [sp, #4]
 8001294:	0658      	lsls	r0, r3, #25
 8001296:	d524      	bpl.n	80012e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 8001298:	4962      	ldr	r1, [pc, #392]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	4a62      	ldr	r2, [pc, #392]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800129e:	428b      	cmp	r3, r1
 80012a0:	bf18      	it	ne
 80012a2:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80012a6:	6851      	ldr	r1, [r2, #4]
 80012a8:	0689      	lsls	r1, r1, #26
 80012aa:	d51a      	bpl.n	80012e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012ac:	6851      	ldr	r1, [r2, #4]
 80012ae:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80012b2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012ba:	0412      	lsls	r2, r2, #16
 80012bc:	0c12      	lsrs	r2, r2, #16
 80012be:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80012c0:	2200      	movs	r2, #0
 80012c2:	9202      	str	r2, [sp, #8]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	9202      	str	r2, [sp, #8]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 80012d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff fe01 	bl	8000ee4 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80012e2:	9b00      	ldr	r3, [sp, #0]
 80012e4:	071b      	lsls	r3, r3, #28
 80012e6:	d522      	bpl.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	0690      	lsls	r0, r2, #26
 80012ee:	d51e      	bpl.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012f0:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012f2:	494c      	ldr	r1, [pc, #304]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012f8:	0412      	lsls	r2, r2, #16
 80012fa:	0c12      	lsrs	r2, r2, #16
 80012fc:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012fe:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001300:	428b      	cmp	r3, r1
 8001302:	bf18      	it	ne
 8001304:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001308:	6851      	ldr	r1, [r2, #4]
 800130a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800130e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001310:	2200      	movs	r2, #0
 8001312:	9203      	str	r2, [sp, #12]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800131a:	2301      	movs	r3, #1
 800131c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fddb 	bl	8000ee4 <HAL_I2S_ErrorCallback>
}
 800132e:	b004      	add	sp, #16
 8001330:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	0799      	lsls	r1, r3, #30
 8001336:	d51a      	bpl.n	800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8001338:	6853      	ldr	r3, [r2, #4]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	d517      	bpl.n	800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800133e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001340:	1c99      	adds	r1, r3, #2
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	6241      	str	r1, [r0, #36]	; 0x24
 8001346:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001348:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800134a:	3b01      	subs	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8001350:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	b95b      	cbnz	r3, 800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001356:	6853      	ldr	r3, [r2, #4]
 8001358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800135c:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 800135e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001360:	b29b      	uxth	r3, r3
 8001362:	b923      	cbnz	r3, 800136e <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8001364:	2301      	movs	r3, #1
 8001366:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800136a:	f7ff ff32 	bl	80011d2 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800136e:	9b00      	ldr	r3, [sp, #0]
 8001370:	07d8      	lsls	r0, r3, #31
 8001372:	d51e      	bpl.n	80013b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	6853      	ldr	r3, [r2, #4]
 8001378:	0659      	lsls	r1, r3, #25
 800137a:	d51a      	bpl.n	80013b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800137c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800137e:	1c99      	adds	r1, r3, #2
 8001380:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001382:	68d1      	ldr	r1, [r2, #12]
 8001384:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8001386:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001388:	3b01      	subs	r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 800138e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001390:	b29b      	uxth	r3, r3
 8001392:	b973      	cbnz	r3, 80013b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80013a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b92b      	cbnz	r3, 80013b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff ff10 	bl	80011d2 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013b2:	9b00      	ldr	r3, [sp, #0]
 80013b4:	065a      	lsls	r2, r3, #25
 80013b6:	d51d      	bpl.n	80013f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	6853      	ldr	r3, [r2, #4]
 80013bc:	069b      	lsls	r3, r3, #26
 80013be:	d519      	bpl.n	80013f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013c0:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013c2:	4918      	ldr	r1, [pc, #96]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013c4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	0c1b      	lsrs	r3, r3, #16
 80013cc:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80013d0:	428a      	cmp	r2, r1
 80013d2:	bf18      	it	ne
 80013d4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80013d8:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013e0:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 80013e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80013f0:	f7ff fd78 	bl	8000ee4 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013f4:	9b01      	ldr	r3, [sp, #4]
 80013f6:	0718      	lsls	r0, r3, #28
 80013f8:	d599      	bpl.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001400:	428a      	cmp	r2, r1
 8001402:	bf18      	it	ne
 8001404:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	0689      	lsls	r1, r1, #26
 800140c:	d58f      	bpl.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001414:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001416:	6853      	ldr	r3, [r2, #4]
 8001418:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800141c:	041b      	lsls	r3, r3, #16
 800141e:	0c1b      	lsrs	r3, r3, #16
 8001420:	6053      	str	r3, [r2, #4]
 8001422:	e77a      	b.n	800131a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001424:	40003800 	.word	0x40003800
 8001428:	40003400 	.word	0x40003400

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	4604      	mov	r4, r0
 8001432:	b918      	cbnz	r0, 800143c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001436:	b002      	add	sp, #8
 8001438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800143c:	6803      	ldr	r3, [r0, #0]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	d903      	bls.n	800144a <HAL_RCC_OscConfig+0x1e>
 8001442:	21f8      	movs	r1, #248	; 0xf8
 8001444:	48a2      	ldr	r0, [pc, #648]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001446:	f003 fc04 	bl	8004c52 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	07d8      	lsls	r0, r3, #31
 800144e:	d418      	bmi.n	8001482 <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	0799      	lsls	r1, r3, #30
 8001454:	d46b      	bmi.n	800152e <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	0719      	lsls	r1, r3, #28
 800145a:	f100 80be 	bmi.w	80015da <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	075a      	lsls	r2, r3, #29
 8001462:	f100 80e4 	bmi.w	800162e <HAL_RCC_OscConfig+0x202>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001466:	69a3      	ldr	r3, [r4, #24]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d904      	bls.n	8001476 <HAL_RCC_OscConfig+0x4a>
 800146c:	f240 11df 	movw	r1, #479	; 0x1df
 8001470:	4897      	ldr	r0, [pc, #604]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001472:	f003 fbee 	bl	8004c52 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	69a2      	ldr	r2, [r4, #24]
 8001478:	2a00      	cmp	r2, #0
 800147a:	f040 8151 	bne.w	8001720 <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 800147e:	2000      	movs	r0, #0
 8001480:	e7d9      	b.n	8001436 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001488:	d006      	beq.n	8001498 <HAL_RCC_OscConfig+0x6c>
 800148a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148e:	d003      	beq.n	8001498 <HAL_RCC_OscConfig+0x6c>
 8001490:	21fd      	movs	r1, #253	; 0xfd
 8001492:	488f      	ldr	r0, [pc, #572]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001494:	f003 fbdd 	bl	8004c52 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001498:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	f002 020c 	and.w	r2, r2, #12
 80014a0:	2a04      	cmp	r2, #4
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_OscConfig+0x88>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014aa:	2a08      	cmp	r2, #8
 80014ac:	d10a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	025a      	lsls	r2, r3, #9
 80014b2:	d507      	bpl.n	80014c4 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	039b      	lsls	r3, r3, #14
 80014ba:	d5c9      	bpl.n	8001450 <HAL_RCC_OscConfig+0x24>
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1c6      	bne.n	8001450 <HAL_RCC_OscConfig+0x24>
 80014c2:	e7b7      	b.n	8001434 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	4d83      	ldr	r5, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d111      	bne.n	80014f2 <HAL_RCC_OscConfig+0xc6>
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014d6:	f7ff f829 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4d7e      	ldr	r5, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80014dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	039f      	lsls	r7, r3, #14
 80014e2:	d4b5      	bmi.n	8001450 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff f822 	bl	800052c <HAL_GetTick>
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2864      	cmp	r0, #100	; 0x64
 80014ec:	d9f7      	bls.n	80014de <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e7a1      	b.n	8001436 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f6:	d104      	bne.n	8001502 <HAL_RCC_OscConfig+0xd6>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	e7e5      	b.n	80014ce <HAL_RCC_OscConfig+0xa2>
 8001502:	682a      	ldr	r2, [r5, #0]
 8001504:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001508:	602a      	str	r2, [r5, #0]
 800150a:	682a      	ldr	r2, [r5, #0]
 800150c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001510:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1df      	bne.n	80014d6 <HAL_RCC_OscConfig+0xaa>
        tickstart = HAL_GetTick();
 8001516:	f7ff f809 	bl	800052c <HAL_GetTick>
 800151a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	0398      	lsls	r0, r3, #14
 8001520:	d596      	bpl.n	8001450 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff f803 	bl	800052c <HAL_GetTick>
 8001526:	1b80      	subs	r0, r0, r6
 8001528:	2864      	cmp	r0, #100	; 0x64
 800152a:	d9f7      	bls.n	800151c <HAL_RCC_OscConfig+0xf0>
 800152c:	e7df      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d904      	bls.n	800153e <HAL_RCC_OscConfig+0x112>
 8001534:	f240 112f 	movw	r1, #303	; 0x12f
 8001538:	4865      	ldr	r0, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800153a:	f003 fb8a 	bl	8004c52 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800153e:	6923      	ldr	r3, [r4, #16]
 8001540:	2b1f      	cmp	r3, #31
 8001542:	d904      	bls.n	800154e <HAL_RCC_OscConfig+0x122>
 8001544:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001548:	4861      	ldr	r0, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800154a:	f003 fb82 	bl	8004c52 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	f012 0f0c 	tst.w	r2, #12
 8001556:	d007      	beq.n	8001568 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2a08      	cmp	r2, #8
 8001560:	d112      	bne.n	8001588 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	0259      	lsls	r1, r3, #9
 8001566:	d40f      	bmi.n	8001588 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	0792      	lsls	r2, r2, #30
 800156e:	d503      	bpl.n	8001578 <HAL_RCC_OscConfig+0x14c>
 8001570:	68e2      	ldr	r2, [r4, #12]
 8001572:	2a01      	cmp	r2, #1
 8001574:	f47f af5e 	bne.w	8001434 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	6921      	ldr	r1, [r4, #16]
 800157c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001580:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001584:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e766      	b.n	8001456 <HAL_RCC_OscConfig+0x2a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001588:	68e2      	ldr	r2, [r4, #12]
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	b1b2      	cbz	r2, 80015bc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001592:	f7fe ffcb 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4d4f      	ldr	r5, [pc, #316]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8001598:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	079f      	lsls	r7, r3, #30
 800159e:	d507      	bpl.n	80015b0 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	6922      	ldr	r2, [r4, #16]
 80015a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	e752      	b.n	8001456 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7fe ffbc 	bl	800052c <HAL_GetTick>
 80015b4:	1b80      	subs	r0, r0, r6
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d9ef      	bls.n	800159a <HAL_RCC_OscConfig+0x16e>
 80015ba:	e798      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80015bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015be:	f7fe ffb5 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4d44      	ldr	r5, [pc, #272]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80015c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	0798      	lsls	r0, r3, #30
 80015ca:	f57f af44 	bpl.w	8001456 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7fe ffad 	bl	800052c <HAL_GetTick>
 80015d2:	1b80      	subs	r0, r0, r6
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d9f6      	bls.n	80015c6 <HAL_RCC_OscConfig+0x19a>
 80015d8:	e789      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80015da:	6963      	ldr	r3, [r4, #20]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d904      	bls.n	80015ea <HAL_RCC_OscConfig+0x1be>
 80015e0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80015e4:	483a      	ldr	r0, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015e6:	f003 fb34 	bl	8004c52 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ea:	6962      	ldr	r2, [r4, #20]
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_OscConfig+0x2b0>)
 80015ee:	b17a      	cbz	r2, 8001610 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015f4:	f7fe ff9a 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f8:	4d36      	ldr	r5, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 80015fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015fe:	079b      	lsls	r3, r3, #30
 8001600:	f53f af2d 	bmi.w	800145e <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7fe ff92 	bl	800052c <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f6      	bls.n	80015fc <HAL_RCC_OscConfig+0x1d0>
 800160e:	e76e      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8001610:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001612:	f7fe ff8b 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	4d2f      	ldr	r5, [pc, #188]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8001618:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800161c:	079f      	lsls	r7, r3, #30
 800161e:	f57f af1e 	bpl.w	800145e <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7fe ff83 	bl	800052c <HAL_GetTick>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	2802      	cmp	r0, #2
 800162a:	d9f6      	bls.n	800161a <HAL_RCC_OscConfig+0x1ee>
 800162c:	e75f      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800162e:	68a3      	ldr	r3, [r4, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d906      	bls.n	8001642 <HAL_RCC_OscConfig+0x216>
 8001634:	2b05      	cmp	r3, #5
 8001636:	d004      	beq.n	8001642 <HAL_RCC_OscConfig+0x216>
 8001638:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800163e:	f003 fb08 	bl	8004c52 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 8001644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001646:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800164a:	d128      	bne.n	800169e <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	9201      	str	r2, [sp, #4]
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001660:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4d1f      	ldr	r5, [pc, #124]	; (80016e0 <HAL_RCC_OscConfig+0x2b4>)
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	05d8      	lsls	r0, r3, #23
 8001668:	d51b      	bpl.n	80016a2 <HAL_RCC_OscConfig+0x276>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166a:	68a3      	ldr	r3, [r4, #8]
 800166c:	4d19      	ldr	r5, [pc, #100]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 800166e:	2b01      	cmp	r3, #1
 8001670:	d127      	bne.n	80016c2 <HAL_RCC_OscConfig+0x296>
 8001672:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800167a:	f7fe ff57 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4d15      	ldr	r5, [pc, #84]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8001680:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001688:	079a      	lsls	r2, r3, #30
 800168a:	d543      	bpl.n	8001714 <HAL_RCC_OscConfig+0x2e8>
    if(pwrclkchanged == SET)
 800168c:	2e00      	cmp	r6, #0
 800168e:	f43f aeea 	beq.w	8001466 <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 8001694:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	e6e3      	b.n	8001466 <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2600      	movs	r6, #0
 80016a0:	e7df      	b.n	8001662 <HAL_RCC_OscConfig+0x236>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016aa:	f7fe ff3f 	bl	800052c <HAL_GetTick>
 80016ae:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	05d9      	lsls	r1, r3, #23
 80016b4:	d4d9      	bmi.n	800166a <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7fe ff39 	bl	800052c <HAL_GetTick>
 80016ba:	1bc0      	subs	r0, r0, r7
 80016bc:	2802      	cmp	r0, #2
 80016be:	d9f7      	bls.n	80016b0 <HAL_RCC_OscConfig+0x284>
 80016c0:	e715      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d10e      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2b8>
 80016c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	672b      	str	r3, [r5, #112]	; 0x70
 80016ce:	e7d0      	b.n	8001672 <HAL_RCC_OscConfig+0x246>
 80016d0:	08005220 	.word	0x08005220
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470000 	.word	0x42470000
 80016dc:	42470e80 	.word	0x42470e80
 80016e0:	40007000 	.word	0x40007000
 80016e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	672a      	str	r2, [r5, #112]	; 0x70
 80016ec:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1c0      	bne.n	800167a <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();
 80016f8:	f7fe ff18 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001700:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001704:	079b      	lsls	r3, r3, #30
 8001706:	d5c1      	bpl.n	800168c <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7fe ff10 	bl	800052c <HAL_GetTick>
 800170c:	1bc0      	subs	r0, r0, r7
 800170e:	4540      	cmp	r0, r8
 8001710:	d9f7      	bls.n	8001702 <HAL_RCC_OscConfig+0x2d6>
 8001712:	e6ec      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7fe ff0a 	bl	800052c <HAL_GetTick>
 8001718:	1bc0      	subs	r0, r0, r7
 800171a:	4540      	cmp	r0, r8
 800171c:	d9b3      	bls.n	8001686 <HAL_RCC_OscConfig+0x25a>
 800171e:	e6e6      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001720:	4e3b      	ldr	r6, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x3e4>)
 8001722:	68b3      	ldr	r3, [r6, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	f43f ae83 	beq.w	8001434 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	2a02      	cmp	r2, #2
 8001730:	4d38      	ldr	r5, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x3e8>)
 8001732:	d15e      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001734:	69e3      	ldr	r3, [r4, #28]
 8001736:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800173a:	d004      	beq.n	8001746 <HAL_RCC_OscConfig+0x31a>
 800173c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001740:	4835      	ldr	r0, [pc, #212]	; (8001818 <HAL_RCC_OscConfig+0x3ec>)
 8001742:	f003 fa86 	bl	8004c52 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001746:	6a23      	ldr	r3, [r4, #32]
 8001748:	2b3f      	cmp	r3, #63	; 0x3f
 800174a:	d904      	bls.n	8001756 <HAL_RCC_OscConfig+0x32a>
 800174c:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001750:	4831      	ldr	r0, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x3ec>)
 8001752:	f003 fa7e 	bl	8004c52 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001758:	3b32      	subs	r3, #50	; 0x32
 800175a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800175e:	d904      	bls.n	800176a <HAL_RCC_OscConfig+0x33e>
 8001760:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001764:	482c      	ldr	r0, [pc, #176]	; (8001818 <HAL_RCC_OscConfig+0x3ec>)
 8001766:	f003 fa74 	bl	8004c52 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800176a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800176c:	2a08      	cmp	r2, #8
 800176e:	d804      	bhi.n	800177a <HAL_RCC_OscConfig+0x34e>
 8001770:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001774:	40d3      	lsrs	r3, r2
 8001776:	07d8      	lsls	r0, r3, #31
 8001778:	d404      	bmi.n	8001784 <HAL_RCC_OscConfig+0x358>
 800177a:	f240 11eb 	movw	r1, #491	; 0x1eb
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x3ec>)
 8001780:	f003 fa67 	bl	8004c52 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001786:	3b02      	subs	r3, #2
 8001788:	2b0d      	cmp	r3, #13
 800178a:	d904      	bls.n	8001796 <HAL_RCC_OscConfig+0x36a>
 800178c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x3ec>)
 8001792:	f003 fa5e 	bl	8004c52 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800179a:	f7fe fec7 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4e1c      	ldr	r6, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x3e4>)
        tickstart = HAL_GetTick();
 80017a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	6833      	ldr	r3, [r6, #0]
 80017a4:	0199      	lsls	r1, r3, #6
 80017a6:	d41e      	bmi.n	80017e6 <HAL_RCC_OscConfig+0x3ba>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a8:	6a22      	ldr	r2, [r4, #32]
 80017aa:	69e3      	ldr	r3, [r4, #28]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017bc:	4c14      	ldr	r4, [pc, #80]	; (8001810 <HAL_RCC_OscConfig+0x3e4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017be:	0852      	lsrs	r2, r2, #1
 80017c0:	3a01      	subs	r2, #1
 80017c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017c6:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 80017c8:	2301      	movs	r3, #1
 80017ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7fe feae 	bl	800052c <HAL_GetTick>
 80017d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	019a      	lsls	r2, r3, #6
 80017d6:	f53f ae52 	bmi.w	800147e <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7fe fea7 	bl	800052c <HAL_GetTick>
 80017de:	1b40      	subs	r0, r0, r5
 80017e0:	2802      	cmp	r0, #2
 80017e2:	d9f6      	bls.n	80017d2 <HAL_RCC_OscConfig+0x3a6>
 80017e4:	e683      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7fe fea1 	bl	800052c <HAL_GetTick>
 80017ea:	1bc0      	subs	r0, r0, r7
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d9d8      	bls.n	80017a2 <HAL_RCC_OscConfig+0x376>
 80017f0:	e67d      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_DISABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017f6:	f7fe fe99 	bl	800052c <HAL_GetTick>
 80017fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	6833      	ldr	r3, [r6, #0]
 80017fe:	019b      	lsls	r3, r3, #6
 8001800:	f57f ae3d 	bpl.w	800147e <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe fe92 	bl	800052c <HAL_GetTick>
 8001808:	1b00      	subs	r0, r0, r4
 800180a:	2802      	cmp	r0, #2
 800180c:	d9f6      	bls.n	80017fc <HAL_RCC_OscConfig+0x3d0>
 800180e:	e66e      	b.n	80014ee <HAL_RCC_OscConfig+0xc2>
 8001810:	40023800 	.word	0x40023800
 8001814:	42470060 	.word	0x42470060
 8001818:	08005220 	.word	0x08005220

0800181c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181c:	4913      	ldr	r1, [pc, #76]	; (800186c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800181e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001820:	688b      	ldr	r3, [r1, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x16>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182e:	4810      	ldr	r0, [pc, #64]	; (8001870 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001830:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001832:	4810      	ldr	r0, [pc, #64]	; (8001874 <HAL_RCC_GetSysClockFreq+0x58>)
 8001834:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001836:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001840:	bf14      	ite	ne
 8001842:	480c      	ldrne	r0, [pc, #48]	; (8001874 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	480a      	ldreq	r0, [pc, #40]	; (8001870 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800184a:	bf18      	it	ne
 800184c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	fba1 0100 	umull	r0, r1, r1, r0
 8001856:	f7fe fcbb 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_RCC_GetSysClockFreq+0x50>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001862:	3301      	adds	r3, #1
 8001864:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001866:	fbb0 f0f3 	udiv	r0, r0, r3
 800186a:	bd08      	pop	{r3, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	00f42400 	.word	0x00f42400
 8001874:	007a1200 	.word	0x007a1200

08001878 <HAL_RCC_ClockConfig>:
{
 8001878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800187c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800187e:	4604      	mov	r4, r0
 8001880:	b910      	cbnz	r0, 8001888 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001888:	6803      	ldr	r3, [r0, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b0e      	cmp	r3, #14
 800188e:	d904      	bls.n	800189a <HAL_RCC_ClockConfig+0x22>
 8001890:	f44f 7114 	mov.w	r1, #592	; 0x250
 8001894:	486d      	ldr	r0, [pc, #436]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 8001896:	f003 f9dc 	bl	8004c52 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800189a:	2d07      	cmp	r5, #7
 800189c:	d904      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x30>
 800189e:	f240 2151 	movw	r1, #593	; 0x251
 80018a2:	486a      	ldr	r0, [pc, #424]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 80018a4:	f003 f9d5 	bl	8004c52 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_ClockConfig+0x1d8>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f002 020f 	and.w	r2, r2, #15
 80018b0:	4295      	cmp	r5, r2
 80018b2:	d83d      	bhi.n	8001930 <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	0796      	lsls	r6, r2, #30
 80018b8:	d442      	bmi.n	8001940 <HAL_RCC_ClockConfig+0xc8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	07d9      	lsls	r1, r3, #31
 80018be:	d46c      	bmi.n	800199a <HAL_RCC_ClockConfig+0x122>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1d8>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f002 020f 	and.w	r2, r2, #15
 80018c8:	4295      	cmp	r5, r2
 80018ca:	f0c0 809c 	bcc.w	8001a06 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	075a      	lsls	r2, r3, #29
 80018d2:	f100 80a1 	bmi.w	8001a18 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	071b      	lsls	r3, r3, #28
 80018da:	d518      	bpl.n	800190e <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80018dc:	6923      	ldr	r3, [r4, #16]
 80018de:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_ClockConfig+0x86>
 80018e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80018e8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_ClockConfig+0x86>
 80018ee:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80018f2:	d004      	beq.n	80018fe <HAL_RCC_ClockConfig+0x86>
 80018f4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80018f8:	4854      	ldr	r0, [pc, #336]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 80018fa:	f003 f9aa 	bl	8004c52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 8001900:	6921      	ldr	r1, [r4, #16]
 8001902:	6893      	ldr	r3, [r2, #8]
 8001904:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001908:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800190c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190e:	f7ff ff85 	bl	800181c <HAL_RCC_GetSysClockFreq>
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 8001914:	4a50      	ldr	r2, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1e0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	40d8      	lsrs	r0, r3
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <HAL_RCC_ClockConfig+0x1e4>)
 8001922:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001924:	2000      	movs	r0, #0
 8001926:	f003 fa11 	bl	8004d4c <HAL_InitTick>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001930:	b2ea      	uxtb	r2, r5
 8001932:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	429d      	cmp	r5, r3
 800193c:	d1a1      	bne.n	8001882 <HAL_RCC_ClockConfig+0xa>
 800193e:	e7b9      	b.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001942:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001946:	bf1e      	ittt	ne
 8001948:	6899      	ldrne	r1, [r3, #8]
 800194a:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800194e:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001952:	bf42      	ittt	mi
 8001954:	689a      	ldrmi	r2, [r3, #8]
 8001956:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800195a:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800195c:	68a3      	ldr	r3, [r4, #8]
 800195e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001962:	d012      	beq.n	800198a <HAL_RCC_ClockConfig+0x112>
 8001964:	f023 0220 	bic.w	r2, r3, #32
 8001968:	2a90      	cmp	r2, #144	; 0x90
 800196a:	d00e      	beq.n	800198a <HAL_RCC_ClockConfig+0x112>
 800196c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001970:	2aa0      	cmp	r2, #160	; 0xa0
 8001972:	d00a      	beq.n	800198a <HAL_RCC_ClockConfig+0x112>
 8001974:	f023 0210 	bic.w	r2, r3, #16
 8001978:	2ac0      	cmp	r2, #192	; 0xc0
 800197a:	d006      	beq.n	800198a <HAL_RCC_ClockConfig+0x112>
 800197c:	2bf0      	cmp	r3, #240	; 0xf0
 800197e:	d004      	beq.n	800198a <HAL_RCC_ClockConfig+0x112>
 8001980:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001984:	4831      	ldr	r0, [pc, #196]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 8001986:	f003 f964 	bl	8004c52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 800198c:	68a1      	ldr	r1, [r4, #8]
 800198e:	6893      	ldr	r3, [r2, #8]
 8001990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001994:	430b      	orrs	r3, r1
 8001996:	6093      	str	r3, [r2, #8]
 8001998:	e78f      	b.n	80018ba <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d904      	bls.n	80019aa <HAL_RCC_ClockConfig+0x132>
 80019a0:	f240 217b 	movw	r1, #635	; 0x27b
 80019a4:	4829      	ldr	r0, [pc, #164]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 80019a6:	f003 f954 	bl	8004c52 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 80019ae:	2a01      	cmp	r2, #1
 80019b0:	d11f      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	f43f af63 	beq.w	8001882 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019bc:	4e25      	ldr	r6, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 80019be:	68b3      	ldr	r3, [r6, #8]
 80019c0:	f023 0303 	bic.w	r3, r3, #3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019c8:	f7fe fdb0 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019d0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	68b3      	ldr	r3, [r6, #8]
 80019d4:	6862      	ldr	r2, [r4, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019de:	f43f af6f 	beq.w	80018c0 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e2:	f7fe fda3 	bl	800052c <HAL_GetTick>
 80019e6:	1bc0      	subs	r0, r0, r7
 80019e8:	4540      	cmp	r0, r8
 80019ea:	d9f2      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
}
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	1e91      	subs	r1, r2, #2
 80019f4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f8:	d802      	bhi.n	8001a00 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019fe:	e7db      	b.n	80019b8 <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	f013 0f02 	tst.w	r3, #2
 8001a04:	e7d8      	b.n	80019b8 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	b2ea      	uxtb	r2, r5
 8001a08:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	429d      	cmp	r5, r3
 8001a12:	f47f af36 	bne.w	8001882 <HAL_RCC_ClockConfig+0xa>
 8001a16:	e75a      	b.n	80018ce <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a18:	68e3      	ldr	r3, [r4, #12]
 8001a1a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1c2>
 8001a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a24:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001a28:	d007      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1c2>
 8001a2a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a2e:	d004      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1c2>
 8001a30:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_RCC_ClockConfig+0x1d4>)
 8001a36:	f003 f90c 	bl	8004c52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_RCC_ClockConfig+0x1dc>)
 8001a3c:	68e1      	ldr	r1, [r4, #12]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6093      	str	r3, [r2, #8]
 8001a48:	e745      	b.n	80018d6 <HAL_RCC_ClockConfig+0x5e>
 8001a4a:	bf00      	nop
 8001a4c:	08005220 	.word	0x08005220
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	080053a2 	.word	0x080053a2
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a7a:	6810      	ldr	r0, [r2, #0]
}
 8001a7c:	40d8      	lsrs	r0, r3
 8001a7e:	4770      	bx	lr
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080053b2 	.word	0x080053b2
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a9a:	6810      	ldr	r0, [r2, #0]
}
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4770      	bx	lr
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	080053b2 	.word	0x080053b2
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aac:	230f      	movs	r3, #15
 8001aae:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetClockConfig+0x34>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001ac0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001ac8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_GetClockConfig+0x38>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	600b      	str	r3, [r1, #0]
 8001ade:	4770      	bx	lr
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001ae8:	2801      	cmp	r0, #1
 8001aea:	d120      	bne.n	8001b2e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001aee:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001af0:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001af4:	d004      	beq.n	8001b00 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001af6:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001afa:	bf18      	it	ne
 8001afc:	2000      	movne	r0, #0
 8001afe:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b00:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b02:	490c      	ldr	r1, [pc, #48]	; (8001b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b04:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b06:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b08:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b0c:	bf4c      	ite	mi
 8001b0e:	4b0b      	ldrmi	r3, [pc, #44]	; (8001b3c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b10:	4b0b      	ldrpl	r3, [pc, #44]	; (8001b40 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001b16:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001b1a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001b1e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001b22:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001b24:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001b28:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001b2c:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001b2e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00bb8000 	.word	0x00bb8000
 8001b3c:	007a1200 	.word	0x007a1200
 8001b40:	00f42400 	.word	0x00f42400

08001b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b44:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b46:	4604      	mov	r4, r0
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	f000 80a4 	beq.w	8001c96 <HAL_SPI_Init+0x152>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001b4e:	6803      	ldr	r3, [r0, #0]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_SPI_Init+0x158>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00c      	beq.n	8001b70 <HAL_SPI_Init+0x2c>
 8001b56:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d008      	beq.n	8001b70 <HAL_SPI_Init+0x2c>
 8001b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_SPI_Init+0x2c>
 8001b66:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001b6a:	484d      	ldr	r0, [pc, #308]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001b6c:	f003 f871 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	b13b      	cbz	r3, 8001b84 <HAL_SPI_Init+0x40>
 8001b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b78:	d004      	beq.n	8001b84 <HAL_SPI_Init+0x40>
 8001b7a:	f240 110f 	movw	r1, #271	; 0x10f
 8001b7e:	4848      	ldr	r0, [pc, #288]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001b80:	f003 f867 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8001b84:	68a3      	ldr	r3, [r4, #8]
 8001b86:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001b8a:	d007      	beq.n	8001b9c <HAL_SPI_Init+0x58>
 8001b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b90:	d004      	beq.n	8001b9c <HAL_SPI_Init+0x58>
 8001b92:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001b96:	4842      	ldr	r0, [pc, #264]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001b98:	f003 f85b 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8001b9c:	68e3      	ldr	r3, [r4, #12]
 8001b9e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001ba2:	d004      	beq.n	8001bae <HAL_SPI_Init+0x6a>
 8001ba4:	f240 1111 	movw	r1, #273	; 0x111
 8001ba8:	483d      	ldr	r0, [pc, #244]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001baa:	f003 f852 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001bae:	69a3      	ldr	r3, [r4, #24]
 8001bb0:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8001bb4:	d007      	beq.n	8001bc6 <HAL_SPI_Init+0x82>
 8001bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bba:	d004      	beq.n	8001bc6 <HAL_SPI_Init+0x82>
 8001bbc:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001bc0:	4837      	ldr	r0, [pc, #220]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001bc2:	f003 f846 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8001bc6:	69e3      	ldr	r3, [r4, #28]
 8001bc8:	f033 0318 	bics.w	r3, r3, #24
 8001bcc:	d006      	beq.n	8001bdc <HAL_SPI_Init+0x98>
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d004      	beq.n	8001bdc <HAL_SPI_Init+0x98>
 8001bd2:	f240 1113 	movw	r1, #275	; 0x113
 8001bd6:	4832      	ldr	r0, [pc, #200]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001bd8:	f003 f83b 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8001bdc:	6a23      	ldr	r3, [r4, #32]
 8001bde:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8001be2:	d004      	beq.n	8001bee <HAL_SPI_Init+0xaa>
 8001be4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001be8:	482d      	ldr	r0, [pc, #180]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001bea:	f003 f832 	bl	8004c52 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8001bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bf0:	f033 0310 	bics.w	r3, r3, #16
 8001bf4:	d004      	beq.n	8001c00 <HAL_SPI_Init+0xbc>
 8001bf6:	f240 1115 	movw	r1, #277	; 0x115
 8001bfa:	4829      	ldr	r0, [pc, #164]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001bfc:	f003 f829 	bl	8004c52 <assert_failed>
  if(hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c02:	b983      	cbnz	r3, 8001c26 <HAL_SPI_Init+0xe2>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001c04:	6923      	ldr	r3, [r4, #16]
 8001c06:	f033 0302 	bics.w	r3, r3, #2
 8001c0a:	d004      	beq.n	8001c16 <HAL_SPI_Init+0xd2>
 8001c0c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001c10:	4823      	ldr	r0, [pc, #140]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001c12:	f003 f81e 	bl	8004c52 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001c16:	6963      	ldr	r3, [r4, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d904      	bls.n	8001c26 <HAL_SPI_Init+0xe2>
 8001c1c:	f240 1119 	movw	r1, #281	; 0x119
 8001c20:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <HAL_SPI_Init+0x15c>)
 8001c22:	f003 f816 	bl	8004c52 <assert_failed>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001c2a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001c2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c32:	b923      	cbnz	r3, 8001c3e <HAL_SPI_Init+0xfa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c34:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f003 f831 	bl	8004ca0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c3e:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c40:	68a0      	ldr	r0, [r4, #8]
 8001c42:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001c4a:	680b      	ldr	r3, [r1, #0]
 8001c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c50:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c52:	6863      	ldr	r3, [r4, #4]
 8001c54:	4303      	orrs	r3, r0
 8001c56:	68e0      	ldr	r0, [r4, #12]
 8001c58:	4303      	orrs	r3, r0
 8001c5a:	6920      	ldr	r0, [r4, #16]
 8001c5c:	4303      	orrs	r3, r0
 8001c5e:	6960      	ldr	r0, [r4, #20]
 8001c60:	4303      	orrs	r3, r0
 8001c62:	69e0      	ldr	r0, [r4, #28]
 8001c64:	4303      	orrs	r3, r0
 8001c66:	6a20      	ldr	r0, [r4, #32]
 8001c68:	4303      	orrs	r3, r0
 8001c6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c6c:	4303      	orrs	r3, r0
 8001c6e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001c72:	4303      	orrs	r3, r0
 8001c74:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c76:	0c12      	lsrs	r2, r2, #16
 8001c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7a:	f002 0204 	and.w	r2, r2, #4
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c82:	69cb      	ldr	r3, [r1, #28]
 8001c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c88:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001c8c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001c94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
}
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	08005258 	.word	0x08005258

08001ca4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ca6:	6803      	ldr	r3, [r0, #0]
{
 8001ca8:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 8001caa:	6899      	ldr	r1, [r3, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001cac:	6862      	ldr	r2, [r4, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
{
 8001cb2:	4605      	mov	r5, r0
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001cb4:	4311      	orrs	r1, r2

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001cb6:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001cb8:	f021 0107 	bic.w	r1, r1, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001cbc:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001cbe:	2a30      	cmp	r2, #48	; 0x30
  htim->Instance->SMCR = tmpsmcr;
 8001cc0:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001cc2:	f000 81c3 	beq.w	800204c <TIM_SlaveTimer_SetConfig+0x3a8>
 8001cc6:	d835      	bhi.n	8001d34 <TIM_SlaveTimer_SetConfig+0x90>
 8001cc8:	2a10      	cmp	r2, #16
 8001cca:	f000 817d 	beq.w	8001fc8 <TIM_SlaveTimer_SetConfig+0x324>
 8001cce:	2a20      	cmp	r2, #32
 8001cd0:	f000 819b 	beq.w	800200a <TIM_SlaveTimer_SetConfig+0x366>
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	f040 81da 	bne.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
    break;
    
  case TIM_TS_ITR0:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001cda:	4ab9      	ldr	r2, [pc, #740]	; (8001fc0 <TIM_SlaveTimer_SetConfig+0x31c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	f000 81d6 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	f000 81d2 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001cea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	f000 81cd 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	f000 81c8 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f000 81c3 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001d08:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	f000 81be 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001d12:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f000 81b9 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001d1c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f000 81b4 	beq.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001d26:	f241 31d5 	movw	r1, #5077	; 0x13d5
    break;
    
  case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001d2a:	48a6      	ldr	r0, [pc, #664]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
    break;
       
  default:
    break;
  }
}
 8001d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001d30:	f002 bf8f 	b.w	8004c52 <assert_failed>
  switch (sSlaveConfig->InputTrigger)
 8001d34:	2a50      	cmp	r2, #80	; 0x50
 8001d36:	f000 809b 	beq.w	8001e70 <TIM_SlaveTimer_SetConfig+0x1cc>
 8001d3a:	d802      	bhi.n	8001d42 <TIM_SlaveTimer_SetConfig+0x9e>
 8001d3c:	2a40      	cmp	r2, #64	; 0x40
 8001d3e:	d04d      	beq.n	8001ddc <TIM_SlaveTimer_SetConfig+0x138>
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
 8001d42:	2a60      	cmp	r2, #96	; 0x60
 8001d44:	f000 80ee 	beq.w	8001f24 <TIM_SlaveTimer_SetConfig+0x280>
 8001d48:	2a70      	cmp	r2, #112	; 0x70
 8001d4a:	f040 81a0 	bne.w	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 8001d4e:	4a9c      	ldr	r2, [pc, #624]	; (8001fc0 <TIM_SlaveTimer_SetConfig+0x31c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d017      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d014      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d010      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00c      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d008      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0xe0>
 8001d7a:	f241 3194 	movw	r1, #5012	; 0x1394
 8001d7e:	4891      	ldr	r0, [pc, #580]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001d80:	f002 ff67 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8001d84:	68e3      	ldr	r3, [r4, #12]
 8001d86:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001d8a:	d004      	beq.n	8001d96 <TIM_SlaveTimer_SetConfig+0xf2>
 8001d8c:	f241 3195 	movw	r1, #5013	; 0x1395
 8001d90:	488c      	ldr	r0, [pc, #560]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001d92:	f002 ff5e 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001d96:	68a3      	ldr	r3, [r4, #8]
 8001d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9c:	d009      	beq.n	8001db2 <TIM_SlaveTimer_SetConfig+0x10e>
 8001d9e:	f033 0202 	bics.w	r2, r3, #2
 8001da2:	d006      	beq.n	8001db2 <TIM_SlaveTimer_SetConfig+0x10e>
 8001da4:	2b0a      	cmp	r3, #10
 8001da6:	d004      	beq.n	8001db2 <TIM_SlaveTimer_SetConfig+0x10e>
 8001da8:	f241 3196 	movw	r1, #5014	; 0x1396
 8001dac:	4885      	ldr	r0, [pc, #532]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001dae:	f002 ff50 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d904      	bls.n	8001dc2 <TIM_SlaveTimer_SetConfig+0x11e>
 8001db8:	f241 3197 	movw	r1, #5015	; 0x1397
 8001dbc:	4881      	ldr	r0, [pc, #516]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001dbe:	f002 ff48 	bl	8004c52 <assert_failed>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dc2:	68a0      	ldr	r0, [r4, #8]
      TIM_ETR_SetConfig(htim->Instance, 
 8001dc4:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dc6:	68e3      	ldr	r3, [r4, #12]
  tmpsmcr = TIMx->SMCR;
 8001dc8:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dca:	4303      	orrs	r3, r0
 8001dcc:	6920      	ldr	r0, [r4, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dd2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001dd6:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001ddc:	4a78      	ldr	r2, [pc, #480]	; (8001fc0 <TIM_SlaveTimer_SetConfig+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d02f      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d02c      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001de8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d028      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001df0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d024      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001df8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d020      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e00:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d01c      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e08:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d018      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d014      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d010      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e20:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00c      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d008      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <TIM_SlaveTimer_SetConfig+0x19e>
 8001e38:	f241 31a3 	movw	r1, #5027	; 0x13a3
 8001e3c:	4861      	ldr	r0, [pc, #388]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001e3e:	f002 ff08 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001e42:	6923      	ldr	r3, [r4, #16]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d904      	bls.n	8001e52 <TIM_SlaveTimer_SetConfig+0x1ae>
 8001e48:	f241 31a4 	movw	r1, #5028	; 0x13a4
 8001e4c:	485d      	ldr	r0, [pc, #372]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001e4e:	f002 ff00 	bl	8004c52 <assert_failed>
      tmpccer = htim->Instance->CCER;
 8001e52:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e54:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 8001e56:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8001e60:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e66:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6c:	6219      	str	r1, [r3, #32]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <TIM_SlaveTimer_SetConfig+0x31c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02f      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d02c      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e7c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d028      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d024      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d020      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e94:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01c      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001e9c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d014      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d010      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001eb4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00c      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <TIM_SlaveTimer_SetConfig+0x232>
 8001ecc:	f241 31b9 	movw	r1, #5049	; 0x13b9
 8001ed0:	483c      	ldr	r0, [pc, #240]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001ed2:	f002 febe 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001ed6:	68a3      	ldr	r3, [r4, #8]
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001edc:	d009      	beq.n	8001ef2 <TIM_SlaveTimer_SetConfig+0x24e>
 8001ede:	f033 0202 	bics.w	r2, r3, #2
 8001ee2:	d006      	beq.n	8001ef2 <TIM_SlaveTimer_SetConfig+0x24e>
 8001ee4:	2b0a      	cmp	r3, #10
 8001ee6:	d004      	beq.n	8001ef2 <TIM_SlaveTimer_SetConfig+0x24e>
 8001ee8:	f241 31ba 	movw	r1, #5050	; 0x13ba
 8001eec:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001eee:	f002 feb0 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001ef2:	6923      	ldr	r3, [r4, #16]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d904      	bls.n	8001f02 <TIM_SlaveTimer_SetConfig+0x25e>
 8001ef8:	f241 31bb 	movw	r1, #5051	; 0x13bb
 8001efc:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001efe:	f002 fea8 	bl	8004c52 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 8001f06:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f08:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0a:	6a1c      	ldr	r4, [r3, #32]
 8001f0c:	f024 0401 	bic.w	r4, r4, #1
 8001f10:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f12:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f14:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f1c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f20:	4301      	orrs	r1, r0
 8001f22:	e7a2      	b.n	8001e6a <TIM_SlaveTimer_SetConfig+0x1c6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <TIM_SlaveTimer_SetConfig+0x31c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d01c      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f30:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d018      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d014      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d010      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f48:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00c      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f50:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d008      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d004      	beq.n	8001f6a <TIM_SlaveTimer_SetConfig+0x2c6>
 8001f60:	f241 31c7 	movw	r1, #5063	; 0x13c7
 8001f64:	4817      	ldr	r0, [pc, #92]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001f66:	f002 fe74 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001f6a:	68a3      	ldr	r3, [r4, #8]
 8001f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f70:	d009      	beq.n	8001f86 <TIM_SlaveTimer_SetConfig+0x2e2>
 8001f72:	f033 0202 	bics.w	r2, r3, #2
 8001f76:	d006      	beq.n	8001f86 <TIM_SlaveTimer_SetConfig+0x2e2>
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d004      	beq.n	8001f86 <TIM_SlaveTimer_SetConfig+0x2e2>
 8001f7c:	f241 31c8 	movw	r1, #5064	; 0x13c8
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001f82:	f002 fe66 	bl	8004c52 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d904      	bls.n	8001f96 <TIM_SlaveTimer_SetConfig+0x2f2>
 8001f8c:	f241 31c9 	movw	r1, #5065	; 0x13c9
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <TIM_SlaveTimer_SetConfig+0x320>)
 8001f92:	f002 fe5e 	bl	8004c52 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f9a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f9c:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f9e:	f020 0010 	bic.w	r0, r0, #16
 8001fa2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fa8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fb0:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fb4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001fb8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	08005290 	.word	0x08005290
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001fc8:	4a31      	ldr	r2, [pc, #196]	; (8002090 <TIM_SlaveTimer_SetConfig+0x3ec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d05f      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d05c      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001fd4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d058      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001fdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d054      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d050      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001fec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04c      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001ff4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d048      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8001ffc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002000:	4293      	cmp	r3, r2
 8002002:	d044      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002004:	f241 31dc 	movw	r1, #5084	; 0x13dc
 8002008:	e68f      	b.n	8001d2a <TIM_SlaveTimer_SetConfig+0x86>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <TIM_SlaveTimer_SetConfig+0x3ec>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d03e      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d03b      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002016:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800201a:	4293      	cmp	r3, r2
 800201c:	d037      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 800201e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002022:	4293      	cmp	r3, r2
 8002024:	d033      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800202a:	4293      	cmp	r3, r2
 800202c:	d02f      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 800202e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002036:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800203a:	4293      	cmp	r3, r2
 800203c:	d027      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 800203e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002046:	f241 31e3 	movw	r1, #5091	; 0x13e3
 800204a:	e66e      	b.n	8001d2a <TIM_SlaveTimer_SetConfig+0x86>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <TIM_SlaveTimer_SetConfig+0x3ec>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01d      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d01a      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002058:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800205c:	4293      	cmp	r3, r2
 800205e:	d016      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002064:	4293      	cmp	r3, r2
 8002066:	d012      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002070:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002074:	4293      	cmp	r3, r2
 8002076:	d00a      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002078:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800207c:	4293      	cmp	r3, r2
 800207e:	d006      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002080:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002084:	4293      	cmp	r3, r2
 8002086:	d002      	beq.n	800208e <TIM_SlaveTimer_SetConfig+0x3ea>
 8002088:	f241 31ea 	movw	r1, #5098	; 0x13ea
 800208c:	e64d      	b.n	8001d2a <TIM_SlaveTimer_SetConfig+0x86>
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	40010000 	.word	0x40010000

08002094 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002094:	6803      	ldr	r3, [r0, #0]
 8002096:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_TIM_Base_Start_IT+0x94>)
 8002098:	4293      	cmp	r3, r2
{
 800209a:	b510      	push	{r4, lr}
 800209c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800209e:	d037      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d034      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d030      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d02c      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d028      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d024      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d020      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020ce:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01c      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020d6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80020da:	4293      	cmp	r3, r2
 80020dc:	d018      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d014      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d010      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020ee:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00c      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d008      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 80020fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_Base_Start_IT+0x7c>
 8002106:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <HAL_TIM_Base_Start_IT+0x98>)
 800210c:	f002 fda1 	bl	8004c52 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	2000      	movs	r0, #0
 8002124:	bd10      	pop	{r4, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	08005290 	.word	0x08005290

08002130 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002130:	6803      	ldr	r3, [r0, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 8002134:	4293      	cmp	r3, r2
{
 8002136:	b570      	push	{r4, r5, r6, lr}
 8002138:	4604      	mov	r4, r0
 800213a:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800213c:	d01f      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d01c      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 8002144:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 800214c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002150:	4293      	cmp	r3, r2
 8002152:	d014      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 8002154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002158:	4293      	cmp	r3, r2
 800215a:	d010      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 800215c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002160:	4293      	cmp	r3, r2
 8002162:	d00c      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 8002164:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002168:	4293      	cmp	r3, r2
 800216a:	d008      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 800216c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_TIM_SlaveConfigSynchronization+0x4e>
 8002174:	f241 0132 	movw	r1, #4146	; 0x1032
 8002178:	481b      	ldr	r0, [pc, #108]	; (80021e8 <HAL_TIM_SlaveConfigSynchronization+0xb8>)
 800217a:	f002 fd6a 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800217e:	682b      	ldr	r3, [r5, #0]
 8002180:	b13b      	cbz	r3, 8002192 <HAL_TIM_SlaveConfigSynchronization+0x62>
 8002182:	3b04      	subs	r3, #4
 8002184:	2b03      	cmp	r3, #3
 8002186:	d904      	bls.n	8002192 <HAL_TIM_SlaveConfigSynchronization+0x62>
 8002188:	f241 0133 	movw	r1, #4147	; 0x1033
 800218c:	4816      	ldr	r0, [pc, #88]	; (80021e8 <HAL_TIM_SlaveConfigSynchronization+0xb8>)
 800218e:	f002 fd60 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8002192:	686b      	ldr	r3, [r5, #4]
 8002194:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8002198:	d006      	beq.n	80021a8 <HAL_TIM_SlaveConfigSynchronization+0x78>
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d004      	beq.n	80021a8 <HAL_TIM_SlaveConfigSynchronization+0x78>
 800219e:	f241 0134 	movw	r1, #4148	; 0x1034
 80021a2:	4811      	ldr	r0, [pc, #68]	; (80021e8 <HAL_TIM_SlaveConfigSynchronization+0xb8>)
 80021a4:	f002 fd55 	bl	8004c52 <assert_failed>
  __HAL_LOCK(htim);
 80021a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	f04f 0002 	mov.w	r0, #2
 80021b2:	d016      	beq.n	80021e2 <HAL_TIM_SlaveConfigSynchronization+0xb2>
 80021b4:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80021b6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_LOCK(htim);
 80021ba:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80021be:	4620      	mov	r0, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7ff fd6f 	bl	8001ca4 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021d0:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 80021d2:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021d8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80021da:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 80021de:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
} 
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	08005290 	.word	0x08005290

080021ec <HAL_TIM_OC_DelayElapsedCallback>:
 80021ec:	4770      	bx	lr

080021ee <HAL_TIM_IC_CaptureCallback>:
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_TriggerCallback>:
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	0791      	lsls	r1, r2, #30
{
 80021fa:	b510      	push	{r4, lr}
 80021fc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fe:	d50e      	bpl.n	800221e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	0792      	lsls	r2, r2, #30
 8002204:	d50b      	bpl.n	800221e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002206:	f06f 0202 	mvn.w	r2, #2
 800220a:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800220c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002212:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002214:	d077      	beq.n	8002306 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002216:	f7ff ffea 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	2300      	movs	r3, #0
 800221c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	0750      	lsls	r0, r2, #29
 8002224:	d510      	bpl.n	8002248 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	0751      	lsls	r1, r2, #29
 800222a:	d50d      	bpl.n	8002248 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800222c:	f06f 0204 	mvn.w	r2, #4
 8002230:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002232:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002234:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002236:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800223a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223e:	d068      	beq.n	8002312 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002240:	f7ff ffd5 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002244:	2300      	movs	r3, #0
 8002246:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	0712      	lsls	r2, r2, #28
 800224e:	d50f      	bpl.n	8002270 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	0710      	lsls	r0, r2, #28
 8002254:	d50c      	bpl.n	8002270 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002256:	f06f 0208 	mvn.w	r2, #8
 800225a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800225c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800225e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002260:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002262:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002264:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002266:	d05a      	beq.n	800231e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002268:	f7ff ffc1 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	2300      	movs	r3, #0
 800226e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	06d2      	lsls	r2, r2, #27
 8002276:	d510      	bpl.n	800229a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	06d0      	lsls	r0, r2, #27
 800227c:	d50d      	bpl.n	800229a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800227e:	f06f 0210 	mvn.w	r2, #16
 8002282:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002284:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002286:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002288:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002290:	d04b      	beq.n	800232a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	f7ff ffac 	bl	80021ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	2300      	movs	r3, #0
 8002298:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	07d1      	lsls	r1, r2, #31
 80022a0:	d508      	bpl.n	80022b4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	07d2      	lsls	r2, r2, #31
 80022a6:	d505      	bpl.n	80022b4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f002 fcc4 	bl	8004c3c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	0610      	lsls	r0, r2, #24
 80022ba:	d508      	bpl.n	80022ce <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	0611      	lsls	r1, r2, #24
 80022c0:	d505      	bpl.n	80022ce <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022c8:	4620      	mov	r0, r4
 80022ca:	f000 f96e 	bl	80025aa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	0652      	lsls	r2, r2, #25
 80022d4:	d508      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	0650      	lsls	r0, r2, #25
 80022da:	d505      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff ff85 	bl	80021f2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	0691      	lsls	r1, r2, #26
 80022ee:	d522      	bpl.n	8002336 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	0692      	lsls	r2, r2, #26
 80022f4:	d51f      	bpl.n	8002336 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80022fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fc:	611a      	str	r2, [r3, #16]
}
 80022fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002302:	f000 b951 	b.w	80025a8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	f7ff ff71 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff ff70 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002310:	e783      	b.n	800221a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	f7ff ff6b 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff ff6a 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800231c:	e792      	b.n	8002244 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	f7ff ff65 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ff64 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002328:	e7a0      	b.n	800226c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	f7ff ff5f 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff ff5e 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002334:	e7af      	b.n	8002296 <HAL_TIM_IRQHandler+0xa2>
 8002336:	bd10      	pop	{r4, pc}

08002338 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002338:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800233a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800233c:	4290      	cmp	r0, r2
 800233e:	d012      	beq.n	8002366 <TIM_Base_SetConfig+0x2e>
 8002340:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002344:	d00f      	beq.n	8002366 <TIM_Base_SetConfig+0x2e>
 8002346:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800234a:	4290      	cmp	r0, r2
 800234c:	d00b      	beq.n	8002366 <TIM_Base_SetConfig+0x2e>
 800234e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002352:	4290      	cmp	r0, r2
 8002354:	d007      	beq.n	8002366 <TIM_Base_SetConfig+0x2e>
 8002356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800235a:	4290      	cmp	r0, r2
 800235c:	d003      	beq.n	8002366 <TIM_Base_SetConfig+0x2e>
 800235e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002362:	4290      	cmp	r0, r2
 8002364:	d11d      	bne.n	80023a2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002366:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800236c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <TIM_Base_SetConfig+0xbc>)
 8002370:	4290      	cmp	r0, r2
 8002372:	d104      	bne.n	800237e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002374:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237a:	4313      	orrs	r3, r2
 800237c:	e028      	b.n	80023d0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800237e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002382:	d0f7      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <TIM_Base_SetConfig+0xc0>)
 8002386:	4290      	cmp	r0, r2
 8002388:	d0f4      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 800238a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800238e:	4290      	cmp	r0, r2
 8002390:	d0f0      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 8002392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002396:	4290      	cmp	r0, r2
 8002398:	d0ec      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 800239a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800239e:	4290      	cmp	r0, r2
 80023a0:	d0e8      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <TIM_Base_SetConfig+0xc4>)
 80023a4:	4290      	cmp	r0, r2
 80023a6:	d0e5      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ac:	4290      	cmp	r0, r2
 80023ae:	d0e1      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b4:	4290      	cmp	r0, r2
 80023b6:	d0dd      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023bc:	4290      	cmp	r0, r2
 80023be:	d0d9      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c4:	4290      	cmp	r0, r2
 80023c6:	d0d5      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
 80023c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023cc:	4290      	cmp	r0, r2
 80023ce:	d0d1      	beq.n	8002374 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80023d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d2:	688b      	ldr	r3, [r1, #8]
 80023d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023d6:	680b      	ldr	r3, [r1, #0]
 80023d8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <TIM_Base_SetConfig+0xbc>)
 80023dc:	4298      	cmp	r0, r3
 80023de:	d006      	beq.n	80023ee <TIM_Base_SetConfig+0xb6>
 80023e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d002      	beq.n	80023ee <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80023e8:	2301      	movs	r3, #1
 80023ea:	6143      	str	r3, [r0, #20]
}
 80023ec:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80023ee:	690b      	ldr	r3, [r1, #16]
 80023f0:	6303      	str	r3, [r0, #48]	; 0x30
 80023f2:	e7f9      	b.n	80023e8 <TIM_Base_SetConfig+0xb0>
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40014000 	.word	0x40014000

08002400 <HAL_TIM_Base_Init>:
{ 
 8002400:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002402:	4604      	mov	r4, r0
 8002404:	2800      	cmp	r0, #0
 8002406:	d069      	beq.n	80024dc <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8002408:	6803      	ldr	r3, [r0, #0]
 800240a:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_TIM_Base_Init+0xe0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d036      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d033      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002416:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800241a:	4293      	cmp	r3, r2
 800241c:	d02f      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800241e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800242a:	4293      	cmp	r3, r2
 800242c:	d027      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002432:	4293      	cmp	r3, r2
 8002434:	d023      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800243e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002442:	4293      	cmp	r3, r2
 8002444:	d01b      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002446:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800244a:	4293      	cmp	r3, r2
 800244c:	d017      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800244e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800245a:	4293      	cmp	r3, r2
 800245c:	d00f      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800245e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002462:	4293      	cmp	r3, r2
 8002464:	d00b      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 800246e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002472:	4293      	cmp	r3, r2
 8002474:	d003      	beq.n	800247e <HAL_TIM_Base_Init+0x7e>
 8002476:	21d7      	movs	r1, #215	; 0xd7
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <HAL_TIM_Base_Init+0xe4>)
 800247a:	f002 fbea 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	f033 0210 	bics.w	r2, r3, #16
 8002484:	d009      	beq.n	800249a <HAL_TIM_Base_Init+0x9a>
 8002486:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800248a:	2a20      	cmp	r2, #32
 800248c:	d005      	beq.n	800249a <HAL_TIM_Base_Init+0x9a>
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d003      	beq.n	800249a <HAL_TIM_Base_Init+0x9a>
 8002492:	21d8      	movs	r1, #216	; 0xd8
 8002494:	4813      	ldr	r0, [pc, #76]	; (80024e4 <HAL_TIM_Base_Init+0xe4>)
 8002496:	f002 fbdc 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800249a:	6923      	ldr	r3, [r4, #16]
 800249c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80024a0:	d006      	beq.n	80024b0 <HAL_TIM_Base_Init+0xb0>
 80024a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a6:	d003      	beq.n	80024b0 <HAL_TIM_Base_Init+0xb0>
 80024a8:	21d9      	movs	r1, #217	; 0xd9
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <HAL_TIM_Base_Init+0xe4>)
 80024ac:	f002 fbd1 	bl	8004c52 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024b0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80024b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024b8:	b923      	cbnz	r3, 80024c4 <HAL_TIM_Base_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 80024ba:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80024be:	4620      	mov	r0, r4
 80024c0:	f002 fd18 	bl	8004ef4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80024ca:	6820      	ldr	r0, [r4, #0]
 80024cc:	1d21      	adds	r1, r4, #4
 80024ce:	f7ff ff33 	bl	8002338 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	bd10      	pop	{r4, pc}
 80024e0:	40010000 	.word	0x40010000
 80024e4:	08005290 	.word	0x08005290

080024e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80024e8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80024ea:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	4293      	cmp	r3, r2
{
 80024f0:	4604      	mov	r4, r0
 80024f2:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80024f4:	d01f      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d01c      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80024fc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002500:	4293      	cmp	r3, r2
 8002502:	d018      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002508:	4293      	cmp	r3, r2
 800250a:	d014      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800250c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002510:	4293      	cmp	r3, r2
 8002512:	d010      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002518:	4293      	cmp	r3, r2
 800251a:	d00c      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800251c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002520:	4293      	cmp	r3, r2
 8002522:	d008      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002524:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800252c:	f240 614a 	movw	r1, #1610	; 0x64a
 8002530:	481c      	ldr	r0, [pc, #112]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002532:	f002 fb8e 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800253c:	d006      	beq.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d004      	beq.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002542:	f240 614b 	movw	r1, #1611	; 0x64b
 8002546:	4817      	ldr	r0, [pc, #92]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002548:	f002 fb83 	bl	8004c52 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800254c:	686b      	ldr	r3, [r5, #4]
 800254e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002552:	d004      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8002554:	f240 614c 	movw	r1, #1612	; 0x64c
 8002558:	4812      	ldr	r0, [pc, #72]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800255a:	f002 fb7a 	bl	8004c52 <assert_failed>
  
  __HAL_LOCK(htim);
 800255e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002562:	2b01      	cmp	r3, #1
 8002564:	f04f 0002 	mov.w	r0, #2
 8002568:	d018      	beq.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800256a:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002570:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002572:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002574:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002578:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002580:	689a      	ldr	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002582:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002588:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	430a      	orrs	r2, r1
 800258e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 8002590:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002592:	2301      	movs	r3, #1
 8002594:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002598:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
} 
 800259c:	bd38      	pop	{r3, r4, r5, pc}
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	080052c8 	.word	0x080052c8

080025a8 <HAL_TIMEx_CommutationCallback>:
 80025a8:	4770      	bx	lr

080025aa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	4770      	bx	lr

080025ac <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025ac:	6842      	ldr	r2, [r0, #4]
 80025ae:	4b9e      	ldr	r3, [pc, #632]	; (8002828 <UART_SetConfig+0x27c>)
 80025b0:	429a      	cmp	r2, r3
{
 80025b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b6:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025b8:	d904      	bls.n	80025c4 <UART_SetConfig+0x18>
 80025ba:	f640 1185 	movw	r1, #2437	; 0x985
 80025be:	489b      	ldr	r0, [pc, #620]	; (800282c <UART_SetConfig+0x280>)
 80025c0:	f002 fb47 	bl	8004c52 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80025c4:	68e3      	ldr	r3, [r4, #12]
 80025c6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80025ca:	d004      	beq.n	80025d6 <UART_SetConfig+0x2a>
 80025cc:	f640 1186 	movw	r1, #2438	; 0x986
 80025d0:	4896      	ldr	r0, [pc, #600]	; (800282c <UART_SetConfig+0x280>)
 80025d2:	f002 fb3e 	bl	8004c52 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80025dc:	d007      	beq.n	80025ee <UART_SetConfig+0x42>
 80025de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025e2:	d004      	beq.n	80025ee <UART_SetConfig+0x42>
 80025e4:	f640 1187 	movw	r1, #2439	; 0x987
 80025e8:	4890      	ldr	r0, [pc, #576]	; (800282c <UART_SetConfig+0x280>)
 80025ea:	f002 fb32 	bl	8004c52 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80025ee:	6963      	ldr	r3, [r4, #20]
 80025f0:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 80025f4:	4213      	tst	r3, r2
 80025f6:	d100      	bne.n	80025fa <UART_SetConfig+0x4e>
 80025f8:	b923      	cbnz	r3, 8002604 <UART_SetConfig+0x58>
 80025fa:	f640 1188 	movw	r1, #2440	; 0x988
 80025fe:	488b      	ldr	r0, [pc, #556]	; (800282c <UART_SetConfig+0x280>)
 8002600:	f002 fb27 	bl	8004c52 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002604:	6826      	ldr	r6, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002606:	68e2      	ldr	r2, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8002608:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260a:	6920      	ldr	r0, [r4, #16]
 800260c:	69e1      	ldr	r1, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800260e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002612:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002614:	6133      	str	r3, [r6, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002616:	68a3      	ldr	r3, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8002618:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800261a:	4303      	orrs	r3, r0
 800261c:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800261e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002622:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002624:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002628:	430b      	orrs	r3, r1
 800262a:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800262c:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800262e:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002630:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002636:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002638:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800263c:	6173      	str	r3, [r6, #20]
 800263e:	4b7c      	ldr	r3, [pc, #496]	; (8002830 <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002640:	d17c      	bne.n	800273c <UART_SetConfig+0x190>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002642:	429e      	cmp	r6, r3
 8002644:	d003      	beq.n	800264e <UART_SetConfig+0xa2>
 8002646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264a:	429e      	cmp	r6, r3
 800264c:	d144      	bne.n	80026d8 <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800264e:	f7ff fa1d 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002652:	2519      	movs	r5, #25
 8002654:	fb05 f300 	mul.w	r3, r5, r0
 8002658:	6860      	ldr	r0, [r4, #4]
 800265a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800265e:	0040      	lsls	r0, r0, #1
 8002660:	fbb3 f3f0 	udiv	r3, r3, r0
 8002664:	fbb3 f3f9 	udiv	r3, r3, r9
 8002668:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800266c:	f7ff fa0e 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002670:	6863      	ldr	r3, [r4, #4]
 8002672:	4368      	muls	r0, r5
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fbb0 f7f3 	udiv	r7, r0, r3
 800267a:	f7ff fa07 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 800267e:	6863      	ldr	r3, [r4, #4]
 8002680:	4368      	muls	r0, r5
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	fbb3 f3f9 	udiv	r3, r3, r9
 800268c:	fb09 7313 	mls	r3, r9, r3, r7
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	fbb3 f3f9 	udiv	r3, r3, r9
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800269e:	f7ff f9f5 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 80026a2:	6862      	ldr	r2, [r4, #4]
 80026a4:	4368      	muls	r0, r5
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	fbb0 faf2 	udiv	sl, r0, r2
 80026ac:	f7ff f9ee 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	4368      	muls	r0, r5
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80026be:	fb09 a313 	mls	r3, r9, r3, sl
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026d0:	443b      	add	r3, r7
 80026d2:	60b3      	str	r3, [r6, #8]
 80026d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026d8:	f7ff f9c8 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80026dc:	2519      	movs	r5, #25
 80026de:	fb05 f300 	mul.w	r3, r5, r0
 80026e2:	6860      	ldr	r0, [r4, #4]
 80026e4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026e8:	0040      	lsls	r0, r0, #1
 80026ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80026ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80026f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026f6:	f7ff f9b9 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80026fa:	6863      	ldr	r3, [r4, #4]
 80026fc:	4368      	muls	r0, r5
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fbb0 f7f3 	udiv	r7, r0, r3
 8002704:	f7ff f9b2 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	4368      	muls	r0, r5
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	fbb3 f3f9 	udiv	r3, r3, r9
 8002716:	fb09 7313 	mls	r3, r9, r3, r7
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002728:	f7ff f9a0 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 800272c:	6862      	ldr	r2, [r4, #4]
 800272e:	4368      	muls	r0, r5
 8002730:	0052      	lsls	r2, r2, #1
 8002732:	fbb0 faf2 	udiv	sl, r0, r2
 8002736:	f7ff f999 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 800273a:	e7b9      	b.n	80026b0 <UART_SetConfig+0x104>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800273c:	429e      	cmp	r6, r3
 800273e:	d002      	beq.n	8002746 <UART_SetConfig+0x19a>
 8002740:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <UART_SetConfig+0x288>)
 8002742:	429e      	cmp	r6, r3
 8002744:	d140      	bne.n	80027c8 <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002746:	f7ff f9a1 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 800274a:	6867      	ldr	r7, [r4, #4]
 800274c:	2519      	movs	r5, #25
 800274e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002752:	fb05 f300 	mul.w	r3, r5, r0
 8002756:	00bf      	lsls	r7, r7, #2
 8002758:	fbb3 f3f7 	udiv	r3, r3, r7
 800275c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002760:	011f      	lsls	r7, r3, #4
 8002762:	f7ff f993 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	4368      	muls	r0, r5
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002770:	f7ff f98c 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	4368      	muls	r0, r5
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002782:	fb09 8313 	mls	r3, r9, r3, r8
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	3332      	adds	r3, #50	; 0x32
 800278a:	fbb3 f3f9 	udiv	r3, r3, r9
 800278e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002792:	f7ff f97b 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002796:	6862      	ldr	r2, [r4, #4]
 8002798:	4368      	muls	r0, r5
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	fbb0 faf2 	udiv	sl, r0, r2
 80027a0:	f7ff f974 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027a4:	6863      	ldr	r3, [r4, #4]
 80027a6:	4368      	muls	r0, r5
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80027b2:	fb09 a313 	mls	r3, r9, r3, sl
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	3332      	adds	r3, #50	; 0x32
 80027ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	ea43 0308 	orr.w	r3, r3, r8
 80027c6:	e783      	b.n	80026d0 <UART_SetConfig+0x124>
 80027c8:	f7ff f950 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80027cc:	6867      	ldr	r7, [r4, #4]
 80027ce:	2519      	movs	r5, #25
 80027d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027d4:	fb05 f300 	mul.w	r3, r5, r0
 80027d8:	00bf      	lsls	r7, r7, #2
 80027da:	fbb3 f3f7 	udiv	r3, r3, r7
 80027de:	fbb3 f3f9 	udiv	r3, r3, r9
 80027e2:	011f      	lsls	r7, r3, #4
 80027e4:	f7ff f942 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80027e8:	6863      	ldr	r3, [r4, #4]
 80027ea:	4368      	muls	r0, r5
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	fbb0 f8f3 	udiv	r8, r0, r3
 80027f2:	f7ff f93b 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80027f6:	6863      	ldr	r3, [r4, #4]
 80027f8:	4368      	muls	r0, r5
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002800:	fbb3 f3f9 	udiv	r3, r3, r9
 8002804:	fb09 8313 	mls	r3, r9, r3, r8
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002810:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002814:	f7ff f92a 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002818:	6862      	ldr	r2, [r4, #4]
 800281a:	4368      	muls	r0, r5
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	fbb0 faf2 	udiv	sl, r0, r2
 8002822:	f7ff f923 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002826:	e7bd      	b.n	80027a4 <UART_SetConfig+0x1f8>
 8002828:	00a037a0 	.word	0x00a037a0
 800282c:	08005303 	.word	0x08005303
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400

08002838 <HAL_UART_Init>:
{
 8002838:	b510      	push	{r4, lr}
  if(huart == NULL)
 800283a:	4604      	mov	r4, r0
 800283c:	2800      	cmp	r0, #0
 800283e:	d074      	beq.n	800292a <HAL_UART_Init+0xf2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002840:	6981      	ldr	r1, [r0, #24]
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_UART_Init+0xf8>)
 8002846:	2900      	cmp	r1, #0
 8002848:	d057      	beq.n	80028fa <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800284a:	4293      	cmp	r3, r2
 800284c:	d010      	beq.n	8002870 <HAL_UART_Init+0x38>
 800284e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002852:	4293      	cmp	r3, r2
 8002854:	d00c      	beq.n	8002870 <HAL_UART_Init+0x38>
 8002856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285a:	4293      	cmp	r3, r2
 800285c:	d008      	beq.n	8002870 <HAL_UART_Init+0x38>
 800285e:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_UART_Init+0x38>
 8002866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800286a:	4832      	ldr	r0, [pc, #200]	; (8002934 <HAL_UART_Init+0xfc>)
 800286c:	f002 f9f1 	bl	8004c52 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002870:	69a3      	ldr	r3, [r4, #24]
 8002872:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8002876:	d004      	beq.n	8002882 <HAL_UART_Init+0x4a>
 8002878:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800287c:	482d      	ldr	r0, [pc, #180]	; (8002934 <HAL_UART_Init+0xfc>)
 800287e:	f002 f9e8 	bl	8004c52 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002882:	68a3      	ldr	r3, [r4, #8]
 8002884:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002888:	d004      	beq.n	8002894 <HAL_UART_Init+0x5c>
 800288a:	f240 1107 	movw	r1, #263	; 0x107
 800288e:	4829      	ldr	r0, [pc, #164]	; (8002934 <HAL_UART_Init+0xfc>)
 8002890:	f002 f9df 	bl	8004c52 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002894:	69e3      	ldr	r3, [r4, #28]
 8002896:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800289a:	d004      	beq.n	80028a6 <HAL_UART_Init+0x6e>
 800289c:	f44f 7184 	mov.w	r1, #264	; 0x108
 80028a0:	4824      	ldr	r0, [pc, #144]	; (8002934 <HAL_UART_Init+0xfc>)
 80028a2:	f002 f9d6 	bl	8004c52 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028a6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80028aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ae:	b923      	cbnz	r3, 80028ba <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 80028b0:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f002 fb65 	bl	8004f84 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028bc:	2324      	movs	r3, #36	; 0x24
 80028be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028c2:	68d3      	ldr	r3, [r2, #12]
 80028c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff fe6e 	bl	80025ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e8:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ea:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80028ec:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80028f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80028f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80028f8:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d0c1      	beq.n	8002882 <HAL_UART_Init+0x4a>
 80028fe:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_UART_Init+0x100>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d0be      	beq.n	8002882 <HAL_UART_Init+0x4a>
 8002904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002908:	4293      	cmp	r3, r2
 800290a:	d0ba      	beq.n	8002882 <HAL_UART_Init+0x4a>
 800290c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002910:	4293      	cmp	r3, r2
 8002912:	d0b6      	beq.n	8002882 <HAL_UART_Init+0x4a>
 8002914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002918:	4293      	cmp	r3, r2
 800291a:	d0b2      	beq.n	8002882 <HAL_UART_Init+0x4a>
 800291c:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002920:	4293      	cmp	r3, r2
 8002922:	d0ae      	beq.n	8002882 <HAL_UART_Init+0x4a>
 8002924:	f240 1105 	movw	r1, #261	; 0x105
 8002928:	e7a8      	b.n	800287c <HAL_UART_Init+0x44>
    return HAL_ERROR;
 800292a:	2001      	movs	r0, #1
}
 800292c:	bd10      	pop	{r4, pc}
 800292e:	bf00      	nop
 8002930:	40011000 	.word	0x40011000
 8002934:	08005303 	.word	0x08005303
 8002938:	40004400 	.word	0x40004400

0800293c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800293c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800293e:	f000 fe2f 	bl	80035a0 <vTaskStartScheduler>
  
  return osOK;
}
 8002942:	2000      	movs	r0, #0
 8002944:	bd08      	pop	{r3, pc}

08002946 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002946:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002948:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800294c:	8a02      	ldrh	r2, [r0, #16]
{
 800294e:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002950:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8002954:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002956:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002958:	bf14      	ite	ne
 800295a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800295c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800295e:	a803      	add	r0, sp, #12
 8002960:	9001      	str	r0, [sp, #4]
 8002962:	9400      	str	r4, [sp, #0]
 8002964:	4628      	mov	r0, r5
 8002966:	f000 fd59 	bl	800341c <xTaskCreate>
 800296a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800296c:	bf0c      	ite	eq
 800296e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002970:	2000      	movne	r0, #0
}
 8002972:	b005      	add	sp, #20
 8002974:	bd30      	pop	{r4, r5, pc}

08002976 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002976:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002978:	2800      	cmp	r0, #0
 800297a:	bf08      	it	eq
 800297c:	2001      	moveq	r0, #1
 800297e:	f000 ff27 	bl	80037d0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002982:	2000      	movs	r0, #0
 8002984:	bd08      	pop	{r3, pc}

08002986 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002986:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002988:	f001 f860 	bl	8003a4c <xTaskGetSchedulerState>
 800298c:	2801      	cmp	r0, #1
 800298e:	d003      	beq.n	8002998 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002994:	f000 b906 	b.w	8002ba4 <xPortSysTickHandler>
 8002998:	bd08      	pop	{r3, pc}

0800299a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299a:	f100 0308 	add.w	r3, r0, #8
 800299e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029aa:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ac:	6003      	str	r3, [r0, #0]
 80029ae:	4770      	bx	lr

080029b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	6103      	str	r3, [r0, #16]
 80029b4:	4770      	bx	lr

080029b6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80029b6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80029c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80029c8:	3301      	adds	r3, #1
 80029ca:	6003      	str	r3, [r0, #0]
 80029cc:	4770      	bx	lr

080029ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ce:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029d0:	1c53      	adds	r3, r2, #1
{
 80029d2:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80029d4:	d10a      	bne.n	80029ec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029d6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029dc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029de:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80029e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80029e6:	3301      	adds	r3, #1
 80029e8:	6003      	str	r3, [r0, #0]
 80029ea:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ec:	f100 0308 	add.w	r3, r0, #8
 80029f0:	685c      	ldr	r4, [r3, #4]
 80029f2:	6825      	ldr	r5, [r4, #0]
 80029f4:	42aa      	cmp	r2, r5
 80029f6:	d3ef      	bcc.n	80029d8 <vListInsert+0xa>
 80029f8:	4623      	mov	r3, r4
 80029fa:	e7f9      	b.n	80029f0 <vListInsert+0x22>

080029fc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029fc:	6841      	ldr	r1, [r0, #4]
 80029fe:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a00:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a02:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a04:	6882      	ldr	r2, [r0, #8]
 8002a06:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a0c:	bf08      	it	eq
 8002a0e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a10:	2200      	movs	r2, #0
 8002a12:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	3801      	subs	r0, #1
 8002a18:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002a1a:	4770      	bx	lr

08002a1c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <prvTaskExitError+0x2c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	d008      	beq.n	8002a36 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	e7fe      	b.n	8002a34 <prvTaskExitError+0x18>
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	e7fe      	b.n	8002a46 <prvTaskExitError+0x2a>
 8002a48:	20000004 	.word	0x20000004

08002a4c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002a4c:	4806      	ldr	r0, [pc, #24]	; (8002a68 <prvPortStartFirstTask+0x1c>)
 8002a4e:	6800      	ldr	r0, [r0, #0]
 8002a50:	6800      	ldr	r0, [r0, #0]
 8002a52:	f380 8808 	msr	MSP, r0
 8002a56:	b662      	cpsie	i
 8002a58:	b661      	cpsie	f
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	df00      	svc	0
 8002a64:	bf00      	nop
 8002a66:	0000      	.short	0x0000
 8002a68:	e000ed08 	.word	0xe000ed08

08002a6c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a6c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a7c <vPortEnableVFP+0x10>
 8002a70:	6801      	ldr	r1, [r0, #0]
 8002a72:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a76:	6001      	str	r1, [r0, #0]
 8002a78:	4770      	bx	lr
 8002a7a:	0000      	.short	0x0000
 8002a7c:	e000ed88 	.word	0xe000ed88

08002a80 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a84:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <pxPortInitialiseStack+0x28>)
 8002a8a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a8e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002a92:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a96:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a9a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002a9e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002aa2:	3844      	subs	r0, #68	; 0x44
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	08002a1d 	.word	0x08002a1d
 8002aac:	00000000 	.word	0x00000000

08002ab0 <SVC_Handler>:
	__asm volatile (
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <pxCurrentTCBConst2>)
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	6808      	ldr	r0, [r1, #0]
 8002ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	f380 8809 	msr	PSP, r0
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f380 8811 	msr	BASEPRI, r0
 8002aca:	4770      	bx	lr
 8002acc:	f3af 8000 	nop.w

08002ad0 <pxCurrentTCBConst2>:
 8002ad0:	20003c48 	.word	0x20003c48

08002ad4 <vPortEnterCritical>:
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <vPortEnterCritical+0x3c>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002aea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002aec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002aee:	d10d      	bne.n	8002b0c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <vPortEnterCritical+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002af8:	d008      	beq.n	8002b0c <vPortEnterCritical+0x38>
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	e7fe      	b.n	8002b0a <vPortEnterCritical+0x36>
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000004 	.word	0x20000004
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <vPortExitCritical+0x24>)
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	b943      	cbnz	r3, 8002b30 <vPortExitCritical+0x18>
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	e7fe      	b.n	8002b2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002b30:	3b01      	subs	r3, #1
 8002b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b34:	b90b      	cbnz	r3, 8002b3a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	4770      	bx	lr
 8002b3c:	20000004 	.word	0x20000004

08002b40 <PendSV_Handler>:
	__asm volatile
 8002b40:	f3ef 8009 	mrs	r0, PSP
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <pxCurrentTCBConst>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f01e 0f10 	tst.w	lr, #16
 8002b50:	bf08      	it	eq
 8002b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5a:	6010      	str	r0, [r2, #0]
 8002b5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b64:	f380 8811 	msr	BASEPRI, r0
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f000 fe86 	bl	8003880 <vTaskSwitchContext>
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f380 8811 	msr	BASEPRI, r0
 8002b7c:	bc08      	pop	{r3}
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	6808      	ldr	r0, [r1, #0]
 8002b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b86:	f01e 0f10 	tst.w	lr, #16
 8002b8a:	bf08      	it	eq
 8002b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b90:	f380 8809 	msr	PSP, r0
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w

08002ba0 <pxCurrentTCBConst>:
 8002ba0:	20003c48 	.word	0x20003c48

08002ba4 <xPortSysTickHandler>:
{
 8002ba4:	b508      	push	{r3, lr}
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002bb6:	f000 fd37 	bl	8003628 <xTaskIncrementTick>
 8002bba:	b118      	cbz	r0, 8002bc4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <xPortSysTickHandler+0x28>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	bd08      	pop	{r3, pc}
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <vPortSetupTimerInterrupt+0x1c>)
 8002bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <vPortSetupTimerInterrupt+0x20>)
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <vPortSetupTimerInterrupt+0x24>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	e000e014 	.word	0xe000e014
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <xPortStartScheduler+0xc8>)
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <xPortStartScheduler+0xcc>)
{
 8002bfc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	4291      	cmp	r1, r2
 8002c02:	d108      	bne.n	8002c16 <xPortStartScheduler+0x1e>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	e7fe      	b.n	8002c14 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <xPortStartScheduler+0xd0>)
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d108      	bne.n	8002c30 <xPortStartScheduler+0x38>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	e7fe      	b.n	8002c2e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <xPortStartScheduler+0xd4>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c3c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c3e:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c4e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <xPortStartScheduler+0xdc>)
 8002c52:	2207      	movs	r2, #7
 8002c54:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c56:	2100      	movs	r1, #0
 8002c58:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002c5c:	0600      	lsls	r0, r0, #24
 8002c5e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8002c62:	d423      	bmi.n	8002cac <xPortStartScheduler+0xb4>
 8002c64:	b101      	cbz	r1, 8002c68 <xPortStartScheduler+0x70>
 8002c66:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c6c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002c70:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <xPortStartScheduler+0xd4>)
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <xPortStartScheduler+0xe0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002c82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002c8a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002c8c:	f7ff ffa0 	bl	8002bd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <xPortStartScheduler+0xe4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002c96:	f7ff fee9 	bl	8002a6c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <xPortStartScheduler+0xe8>)
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ca2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002ca4:	f7ff fed2 	bl	8002a4c <prvPortStartFirstTask>
	prvTaskExitError();
 8002ca8:	f7ff feb8 	bl	8002a1c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002cb0:	0052      	lsls	r2, r2, #1
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f88d 2003 	strb.w	r2, [sp, #3]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4622      	mov	r2, r4
 8002cbc:	e7cc      	b.n	8002c58 <xPortStartScheduler+0x60>
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00
 8002cc4:	410fc271 	.word	0x410fc271
 8002cc8:	410fc270 	.word	0x410fc270
 8002ccc:	e000e400 	.word	0xe000e400
 8002cd0:	20000028 	.word	0x20000028
 8002cd4:	2000002c 	.word	0x2000002c
 8002cd8:	e000ed20 	.word	0xe000ed20
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	e000ef34 	.word	0xe000ef34

08002ce4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ce4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <prvInsertBlockIntoFreeList+0x40>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4282      	cmp	r2, r0
 8002cec:	d318      	bcc.n	8002d20 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cee:	685c      	ldr	r4, [r3, #4]
 8002cf0:	1919      	adds	r1, r3, r4
 8002cf2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cf4:	bf01      	itttt	eq
 8002cf6:	6841      	ldreq	r1, [r0, #4]
 8002cf8:	4618      	moveq	r0, r3
 8002cfa:	1909      	addeq	r1, r1, r4
 8002cfc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cfe:	6844      	ldr	r4, [r0, #4]
 8002d00:	1901      	adds	r1, r0, r4
 8002d02:	428a      	cmp	r2, r1
 8002d04:	d107      	bne.n	8002d16 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <prvInsertBlockIntoFreeList+0x44>)
 8002d08:	6809      	ldr	r1, [r1, #0]
 8002d0a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d0c:	bf1f      	itttt	ne
 8002d0e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d10:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d12:	1909      	addne	r1, r1, r4
 8002d14:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d16:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d18:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d1a:	bf18      	it	ne
 8002d1c:	6018      	strne	r0, [r3, #0]
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	4613      	mov	r3, r2
 8002d22:	e7e1      	b.n	8002ce8 <prvInsertBlockIntoFreeList+0x4>
 8002d24:	20003c40 	.word	0x20003c40
 8002d28:	20000030 	.word	0x20000030

08002d2c <pvPortMalloc>:
{
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d30:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002d32:	f000 fc71 	bl	8003618 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002d36:	493e      	ldr	r1, [pc, #248]	; (8002e30 <pvPortMalloc+0x104>)
 8002d38:	4d3e      	ldr	r5, [pc, #248]	; (8002e34 <pvPortMalloc+0x108>)
 8002d3a:	680b      	ldr	r3, [r1, #0]
 8002d3c:	bb0b      	cbnz	r3, 8002d82 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d40:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d42:	bf1f      	itttt	ne
 8002d44:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d46:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d4a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002d4e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d50:	bf14      	ite	ne
 8002d52:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d54:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d58:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002d5a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d5c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d60:	4e36      	ldr	r6, [pc, #216]	; (8002e3c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002d62:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d64:	2000      	movs	r0, #0
 8002d66:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d68:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002d6a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d6c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d6e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d70:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d74:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d76:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <pvPortMalloc+0x118>)
 8002d7a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d80:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d82:	682f      	ldr	r7, [r5, #0]
 8002d84:	4227      	tst	r7, r4
 8002d86:	d116      	bne.n	8002db6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d041      	beq.n	8002e10 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002d8c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d90:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d92:	bf1c      	itt	ne
 8002d94:	f023 0307 	bicne.w	r3, r3, #7
 8002d98:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d9a:	b163      	cbz	r3, 8002db6 <pvPortMalloc+0x8a>
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <pvPortMalloc+0x118>)
 8002d9e:	6816      	ldr	r6, [r2, #0]
 8002da0:	42b3      	cmp	r3, r6
 8002da2:	4690      	mov	r8, r2
 8002da4:	d807      	bhi.n	8002db6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002da6:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <pvPortMalloc+0x110>)
 8002da8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002daa:	6868      	ldr	r0, [r5, #4]
 8002dac:	4283      	cmp	r3, r0
 8002dae:	d804      	bhi.n	8002dba <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002db0:	6809      	ldr	r1, [r1, #0]
 8002db2:	428d      	cmp	r5, r1
 8002db4:	d107      	bne.n	8002dc6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002db6:	2400      	movs	r4, #0
 8002db8:	e02a      	b.n	8002e10 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dba:	682c      	ldr	r4, [r5, #0]
 8002dbc:	2c00      	cmp	r4, #0
 8002dbe:	d0f7      	beq.n	8002db0 <pvPortMalloc+0x84>
 8002dc0:	462a      	mov	r2, r5
 8002dc2:	4625      	mov	r5, r4
 8002dc4:	e7f1      	b.n	8002daa <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002dc6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002dc8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002dca:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002dcc:	1ac2      	subs	r2, r0, r3
 8002dce:	2a10      	cmp	r2, #16
 8002dd0:	d90f      	bls.n	8002df2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002dd2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dd4:	0741      	lsls	r1, r0, #29
 8002dd6:	d008      	beq.n	8002dea <pvPortMalloc+0xbe>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	e7fe      	b.n	8002de8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dea:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002dec:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dee:	f7ff ff79 	bl	8002ce4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4913      	ldr	r1, [pc, #76]	; (8002e40 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002df4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002df8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dfa:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dfc:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002dfe:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e02:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e06:	bf38      	it	cc
 8002e08:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e0a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e0c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e0e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002e10:	f000 fc76 	bl	8003700 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e14:	0763      	lsls	r3, r4, #29
 8002e16:	d008      	beq.n	8002e2a <pvPortMalloc+0xfe>
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	e7fe      	b.n	8002e28 <pvPortMalloc+0xfc>
}
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e30:	20000030 	.word	0x20000030
 8002e34:	20003c34 	.word	0x20003c34
 8002e38:	20000034 	.word	0x20000034
 8002e3c:	20003c40 	.word	0x20003c40
 8002e40:	20003c3c 	.word	0x20003c3c
 8002e44:	20003c38 	.word	0x20003c38

08002e48 <vPortFree>:
{
 8002e48:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b370      	cbz	r0, 8002eac <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <vPortFree+0x68>)
 8002e50:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4213      	tst	r3, r2
 8002e58:	d108      	bne.n	8002e6c <vPortFree+0x24>
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	e7fe      	b.n	8002e6a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e6c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002e70:	b141      	cbz	r1, 8002e84 <vPortFree+0x3c>
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	e7fe      	b.n	8002e82 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e84:	ea23 0302 	bic.w	r3, r3, r2
 8002e88:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002e8c:	f000 fbc4 	bl	8003618 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e90:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <vPortFree+0x6c>)
 8002e92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002e96:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e98:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e9c:	440b      	add	r3, r1
 8002e9e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ea0:	f7ff ff20 	bl	8002ce4 <prvInsertBlockIntoFreeList>
}
 8002ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002ea8:	f000 bc2a 	b.w	8003700 <xTaskResumeAll>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	bf00      	nop
 8002eb0:	20003c34 	.word	0x20003c34
 8002eb4:	20003c38 	.word	0x20003c38

08002eb8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ebc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ebe:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002ec0:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ec2:	b942      	cbnz	r2, 8002ed6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ec4:	6805      	ldr	r5, [r0, #0]
 8002ec6:	b99d      	cbnz	r5, 8002ef0 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ec8:	6840      	ldr	r0, [r0, #4]
 8002eca:	f000 fe15 	bl	8003af8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002ece:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ed6:	b96d      	cbnz	r5, 8002ef4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ed8:	6880      	ldr	r0, [r0, #8]
 8002eda:	f002 f8cb 	bl	8005074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ee2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ee4:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ee6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d301      	bcc.n	8002ef0 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e7ed      	b.n	8002ed0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef4:	68c0      	ldr	r0, [r0, #12]
 8002ef6:	f002 f8bd 	bl	8005074 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002efc:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002efe:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f00:	425b      	negs	r3, r3
 8002f02:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f04:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f06:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f08:	bf3e      	ittt	cc
 8002f0a:	6862      	ldrcc	r2, [r4, #4]
 8002f0c:	189b      	addcc	r3, r3, r2
 8002f0e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002f10:	2d02      	cmp	r5, #2
 8002f12:	d1ed      	bne.n	8002ef0 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f14:	b10e      	cbz	r6, 8002f1a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002f16:	3e01      	subs	r6, #1
 8002f18:	e7ea      	b.n	8002ef0 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	e7d8      	b.n	8002ed0 <prvCopyDataToQueue+0x18>

08002f1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f1e:	4603      	mov	r3, r0
 8002f20:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002f24:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f26:	b162      	cbz	r2, 8002f42 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f28:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f2a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f2c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f2e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f30:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f32:	bf24      	itt	cs
 8002f34:	6819      	ldrcs	r1, [r3, #0]
 8002f36:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f38:	68d9      	ldr	r1, [r3, #12]
	}
}
 8002f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f3e:	f002 b899 	b.w	8005074 <memcpy>
}
 8002f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f4c:	f7ff fdc2 	bl	8002ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f50:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f54:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002f58:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f5a:	2d00      	cmp	r5, #0
 8002f5c:	dc14      	bgt.n	8002f88 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f5e:	23ff      	movs	r3, #255	; 0xff
 8002f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f64:	f7ff fdd8 	bl	8002b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f68:	f7ff fdb4 	bl	8002ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f6c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f70:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002f74:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	dc12      	bgt.n	8002fa0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f7a:	23ff      	movs	r3, #255	; 0xff
 8002f7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002f84:	f7ff bdc8 	b.w	8002b18 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0e7      	beq.n	8002f5e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f000 fcca 	bl	8003928 <xTaskRemoveFromEventList>
 8002f94:	b108      	cbz	r0, 8002f9a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002f96:	f000 fd53 	bl	8003a40 <vTaskMissedYield>
 8002f9a:	3d01      	subs	r5, #1
 8002f9c:	b26d      	sxtb	r5, r5
 8002f9e:	e7dc      	b.n	8002f5a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0e9      	beq.n	8002f7a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f000 fcbe 	bl	8003928 <xTaskRemoveFromEventList>
 8002fac:	b108      	cbz	r0, 8002fb2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002fae:	f000 fd47 	bl	8003a40 <vTaskMissedYield>
 8002fb2:	3d01      	subs	r5, #1
 8002fb4:	b26d      	sxtb	r5, r5
 8002fb6:	e7de      	b.n	8002f76 <prvUnlockQueue+0x2e>

08002fb8 <xQueueGenericReset>:
{
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	b940      	cbnz	r0, 8002fd2 <xQueueGenericReset+0x1a>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	e7fe      	b.n	8002fd0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002fd2:	f7ff fd7f 	bl	8002ad4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fda:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fdc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fde:	4343      	muls	r3, r0
 8002fe0:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fe2:	1a1b      	subs	r3, r3, r0
 8002fe4:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fe6:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fe8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fea:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002fec:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002ff8:	b94d      	cbnz	r5, 800300e <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	b11b      	cbz	r3, 8003006 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffe:	f104 0010 	add.w	r0, r4, #16
 8003002:	f000 fc91 	bl	8003928 <xTaskRemoveFromEventList>
	taskEXIT_CRITICAL();
 8003006:	f7ff fd87 	bl	8002b18 <vPortExitCritical>
}
 800300a:	2001      	movs	r0, #1
 800300c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800300e:	f104 0010 	add.w	r0, r4, #16
 8003012:	f7ff fcc2 	bl	800299a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003016:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800301a:	f7ff fcbe 	bl	800299a <vListInitialise>
 800301e:	e7f2      	b.n	8003006 <xQueueGenericReset+0x4e>

08003020 <xQueueGenericCreate>:
	{
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003024:	4606      	mov	r6, r0
 8003026:	b940      	cbnz	r0, 800303a <xQueueGenericCreate+0x1a>
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	e7fe      	b.n	8003038 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800303c:	3048      	adds	r0, #72	; 0x48
 800303e:	f7ff fe75 	bl	8002d2c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003042:	4604      	mov	r4, r0
 8003044:	b138      	cbz	r0, 8003056 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003046:	b945      	cbnz	r5, 800305a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003048:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800304a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800304c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800304e:	2101      	movs	r1, #1
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff ffb1 	bl	8002fb8 <xQueueGenericReset>
	}
 8003056:	4620      	mov	r0, r4
 8003058:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800305a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	e7f3      	b.n	800304a <xQueueGenericCreate+0x2a>
	...

08003064 <xQueueGenericSend>:
{
 8003064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	4689      	mov	r9, r1
 800306a:	9201      	str	r2, [sp, #4]
 800306c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800306e:	4604      	mov	r4, r0
 8003070:	b940      	cbnz	r0, 8003084 <xQueueGenericSend+0x20>
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	e7fe      	b.n	8003082 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003084:	2900      	cmp	r1, #0
 8003086:	d17c      	bne.n	8003182 <xQueueGenericSend+0x11e>
 8003088:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d079      	beq.n	8003182 <xQueueGenericSend+0x11e>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	e7fe      	b.n	800309e <xQueueGenericSend+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a0:	9e01      	ldr	r6, [sp, #4]
 80030a2:	2e00      	cmp	r6, #0
 80030a4:	d077      	beq.n	8003196 <xQueueGenericSend+0x132>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	e7fe      	b.n	80030b6 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b8:	9d01      	ldr	r5, [sp, #4]
 80030ba:	b91d      	cbnz	r5, 80030c4 <xQueueGenericSend+0x60>
					taskEXIT_CRITICAL();
 80030bc:	f7ff fd2c 	bl	8002b18 <vPortExitCritical>
			return errQUEUE_FULL;
 80030c0:	2000      	movs	r0, #0
 80030c2:	e04f      	b.n	8003164 <xQueueGenericSend+0x100>
				else if( xEntryTimeSet == pdFALSE )
 80030c4:	b916      	cbnz	r6, 80030cc <xQueueGenericSend+0x68>
					vTaskSetTimeOutState( &xTimeOut );
 80030c6:	a802      	add	r0, sp, #8
 80030c8:	f000 fc70 	bl	80039ac <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80030cc:	f7ff fd24 	bl	8002b18 <vPortExitCritical>
		vTaskSuspendAll();
 80030d0:	f000 faa2 	bl	8003618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030d4:	f7ff fcfe 	bl	8002ad4 <vPortEnterCritical>
 80030d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80030dc:	2bff      	cmp	r3, #255	; 0xff
 80030de:	bf08      	it	eq
 80030e0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80030e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80030e8:	2bff      	cmp	r3, #255	; 0xff
 80030ea:	bf08      	it	eq
 80030ec:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80030f0:	f7ff fd12 	bl	8002b18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f4:	a901      	add	r1, sp, #4
 80030f6:	a802      	add	r0, sp, #8
 80030f8:	f000 fc68 	bl	80039cc <xTaskCheckForTimeOut>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d13a      	bne.n	8003176 <xQueueGenericSend+0x112>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003100:	f7ff fce8 	bl	8002ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003106:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003108:	f7ff fd06 	bl	8002b18 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800310c:	42ae      	cmp	r6, r5
 800310e:	d12c      	bne.n	800316a <xQueueGenericSend+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003110:	9901      	ldr	r1, [sp, #4]
 8003112:	f104 0010 	add.w	r0, r4, #16
 8003116:	f000 fbed 	bl	80038f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff ff14 	bl	8002f48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003120:	f000 faee 	bl	8003700 <xTaskResumeAll>
 8003124:	b938      	cbnz	r0, 8003136 <xQueueGenericSend+0xd2>
					portYIELD_WITHIN_API();
 8003126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800312a:	f8ca 3000 	str.w	r3, [sl]
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003138:	f7ff fccc 	bl	8002ad4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800313e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003140:	429a      	cmp	r2, r3
 8003142:	d301      	bcc.n	8003148 <xQueueGenericSend+0xe4>
 8003144:	2f02      	cmp	r7, #2
 8003146:	d1b7      	bne.n	80030b8 <xQueueGenericSend+0x54>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003148:	463a      	mov	r2, r7
 800314a:	4649      	mov	r1, r9
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff feb3 	bl	8002eb8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003154:	b11b      	cbz	r3, 800315e <xQueueGenericSend+0xfa>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003156:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800315a:	f000 fbe5 	bl	8003928 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 800315e:	f7ff fcdb 	bl	8002b18 <vPortExitCritical>
				return pdPASS;
 8003162:	2001      	movs	r0, #1
}
 8003164:	b004      	add	sp, #16
 8003166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff feec 	bl	8002f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003170:	f000 fac6 	bl	8003700 <xTaskResumeAll>
 8003174:	e7df      	b.n	8003136 <xQueueGenericSend+0xd2>
			prvUnlockQueue( pxQueue );
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff fee6 	bl	8002f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800317c:	f000 fac0 	bl	8003700 <xTaskResumeAll>
 8003180:	e79e      	b.n	80030c0 <xQueueGenericSend+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003182:	2f02      	cmp	r7, #2
 8003184:	d102      	bne.n	800318c <xQueueGenericSend+0x128>
 8003186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d109      	bne.n	80031a0 <xQueueGenericSend+0x13c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800318c:	f000 fc5e 	bl	8003a4c <xTaskGetSchedulerState>
 8003190:	2800      	cmp	r0, #0
 8003192:	d085      	beq.n	80030a0 <xQueueGenericSend+0x3c>
 8003194:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003196:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800319a:	f8df a018 	ldr.w	sl, [pc, #24]	; 80031b4 <xQueueGenericSend+0x150>
 800319e:	e7cb      	b.n	8003138 <xQueueGenericSend+0xd4>
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericSend+0x14c>
 80031b2:	bf00      	nop
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <xQueueGenericReceive>:
{
 80031b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	4688      	mov	r8, r1
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80031c2:	4604      	mov	r4, r0
 80031c4:	b940      	cbnz	r0, 80031d8 <xQueueGenericReceive+0x20>
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	e7fe      	b.n	80031d6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d8:	2900      	cmp	r1, #0
 80031da:	f040 809c 	bne.w	8003316 <xQueueGenericReceive+0x15e>
 80031de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8098 	beq.w	8003316 <xQueueGenericReceive+0x15e>
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	e7fe      	b.n	80031f6 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f8:	9e01      	ldr	r6, [sp, #4]
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	f000 8091 	beq.w	8003322 <xQueueGenericReceive+0x16a>
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	e7fe      	b.n	8003210 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003212:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003214:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003216:	2b00      	cmp	r3, #0
 8003218:	d064      	beq.n	80032e4 <xQueueGenericReceive+0x12c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800321a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800321e:	e05f      	b.n	80032e0 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003220:	9d01      	ldr	r5, [sp, #4]
 8003222:	b91d      	cbnz	r5, 800322c <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8003224:	f7ff fc78 	bl	8002b18 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003228:	4628      	mov	r0, r5
 800322a:	e05e      	b.n	80032ea <xQueueGenericReceive+0x132>
				else if( xEntryTimeSet == pdFALSE )
 800322c:	b916      	cbnz	r6, 8003234 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 800322e:	a802      	add	r0, sp, #8
 8003230:	f000 fbbc 	bl	80039ac <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003234:	f7ff fc70 	bl	8002b18 <vPortExitCritical>
		vTaskSuspendAll();
 8003238:	f000 f9ee 	bl	8003618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800323c:	f7ff fc4a 	bl	8002ad4 <vPortEnterCritical>
 8003240:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003244:	2bff      	cmp	r3, #255	; 0xff
 8003246:	bf08      	it	eq
 8003248:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800324c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003250:	2bff      	cmp	r3, #255	; 0xff
 8003252:	bf08      	it	eq
 8003254:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003258:	f7ff fc5e 	bl	8002b18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800325c:	a901      	add	r1, sp, #4
 800325e:	a802      	add	r0, sp, #8
 8003260:	f000 fbb4 	bl	80039cc <xTaskCheckForTimeOut>
 8003264:	2800      	cmp	r0, #0
 8003266:	d149      	bne.n	80032fc <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 8003268:	f7ff fc34 	bl	8002ad4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800326c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800326e:	f7ff fc53 	bl	8002b18 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003272:	2d00      	cmp	r5, #0
 8003274:	d13c      	bne.n	80032f0 <xQueueGenericReceive+0x138>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	b933      	cbnz	r3, 8003288 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800327a:	f7ff fc2b 	bl	8002ad4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800327e:	6860      	ldr	r0, [r4, #4]
 8003280:	f000 fbf4 	bl	8003a6c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003284:	f7ff fc48 	bl	8002b18 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003288:	9901      	ldr	r1, [sp, #4]
 800328a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800328e:	f000 fb31 	bl	80038f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fe58 	bl	8002f48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003298:	f000 fa32 	bl	8003700 <xTaskResumeAll>
 800329c:	b938      	cbnz	r0, 80032ae <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800329e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032a2:	f8ca 3000 	str.w	r3, [sl]
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80032b0:	f7ff fc10 	bl	8002ad4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b6:	2d00      	cmp	r5, #0
 80032b8:	d0b2      	beq.n	8003220 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ba:	4641      	mov	r1, r8
 80032bc:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80032be:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c0:	f7ff fe2d 	bl	8002f1e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80032c4:	f1b9 0f00 	cmp.w	r9, #0
 80032c8:	d1a3      	bne.n	8003212 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032ca:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80032cc:	3d01      	subs	r5, #1
 80032ce:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d0:	b913      	cbnz	r3, 80032d8 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80032d2:	f000 fc61 	bl	8003b98 <pvTaskIncrementMutexHeldCount>
 80032d6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d8:	6923      	ldr	r3, [r4, #16]
 80032da:	b11b      	cbz	r3, 80032e4 <xQueueGenericReceive+0x12c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032dc:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e0:	f000 fb22 	bl	8003928 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 80032e4:	f7ff fc18 	bl	8002b18 <vPortExitCritical>
				return pdPASS;
 80032e8:	2001      	movs	r0, #1
}
 80032ea:	b004      	add	sp, #16
 80032ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff fe29 	bl	8002f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f6:	f000 fa03 	bl	8003700 <xTaskResumeAll>
 80032fa:	e7d8      	b.n	80032ae <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fe23 	bl	8002f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003302:	f000 f9fd 	bl	8003700 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003306:	f7ff fbe5 	bl	8002ad4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800330a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800330c:	f7ff fc04 	bl	8002b18 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003310:	2d00      	cmp	r5, #0
 8003312:	d1cc      	bne.n	80032ae <xQueueGenericReceive+0xf6>
 8003314:	e788      	b.n	8003228 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003316:	f000 fb99 	bl	8003a4c <xTaskGetSchedulerState>
 800331a:	2800      	cmp	r0, #0
 800331c:	f43f af6c 	beq.w	80031f8 <xQueueGenericReceive+0x40>
 8003320:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003322:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003324:	f8df a004 	ldr.w	sl, [pc, #4]	; 800332c <xQueueGenericReceive+0x174>
 8003328:	e7c2      	b.n	80032b0 <xQueueGenericReceive+0xf8>
 800332a:	bf00      	nop
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <uxQueueMessagesWaiting>:
{
 8003330:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8003332:	4604      	mov	r4, r0
 8003334:	b940      	cbnz	r0, 8003348 <uxQueueMessagesWaiting+0x18>
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	e7fe      	b.n	8003346 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8003348:	f7ff fbc4 	bl	8002ad4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800334c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800334e:	f7ff fbe3 	bl	8002b18 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003352:	4620      	mov	r0, r4
 8003354:	bd10      	pop	{r4, pc}
	...

08003358 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003358:	4a06      	ldr	r2, [pc, #24]	; (8003374 <prvResetNextTaskUnblockTime+0x1c>)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <prvResetNextTaskUnblockTime+0x20>)
 8003360:	b919      	cbnz	r1, 800336a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336e:	68d2      	ldr	r2, [r2, #12]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	e7f8      	b.n	8003366 <prvResetNextTaskUnblockTime+0xe>
 8003374:	20003c4c 	.word	0x20003c4c
 8003378:	20003d24 	.word	0x20003d24

0800337c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003380:	4e1b      	ldr	r6, [pc, #108]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003382:	681d      	ldr	r5, [r3, #0]
{
 8003384:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003386:	6830      	ldr	r0, [r6, #0]
 8003388:	3004      	adds	r0, #4
{
 800338a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338c:	f7ff fb36 	bl	80029fc <uxListRemove>
 8003390:	4633      	mov	r3, r6
 8003392:	b940      	cbnz	r0, 80033a6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003394:	6831      	ldr	r1, [r6, #0]
 8003396:	4e17      	ldr	r6, [pc, #92]	; (80033f4 <prvAddCurrentTaskToDelayedList+0x78>)
 8003398:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800339a:	6832      	ldr	r2, [r6, #0]
 800339c:	2001      	movs	r0, #1
 800339e:	4088      	lsls	r0, r1
 80033a0:	ea22 0200 	bic.w	r2, r2, r0
 80033a4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033a6:	1c62      	adds	r2, r4, #1
 80033a8:	d107      	bne.n	80033ba <prvAddCurrentTaskToDelayedList+0x3e>
 80033aa:	b137      	cbz	r7, 80033ba <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	4812      	ldr	r0, [pc, #72]	; (80033f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80033b0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b6:	f7ff bafe 	b.w	80029b6 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033ba:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033bc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80033be:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033c0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80033c2:	d907      	bls.n	80033d4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <prvAddCurrentTaskToDelayedList+0x80>)
 80033c6:	6810      	ldr	r0, [r2, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
}
 80033ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ce:	3104      	adds	r1, #4
 80033d0:	f7ff bafd 	b.w	80029ce <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d4:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <prvAddCurrentTaskToDelayedList+0x84>)
 80033d6:	6810      	ldr	r0, [r2, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	3104      	adds	r1, #4
 80033dc:	f7ff faf7 	bl	80029ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <prvAddCurrentTaskToDelayedList+0x88>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033e6:	bf38      	it	cc
 80033e8:	601c      	strcc	r4, [r3, #0]
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	20003d6c 	.word	0x20003d6c
 80033f0:	20003c48 	.word	0x20003c48
 80033f4:	20003cf4 	.word	0x20003cf4
 80033f8:	20003d44 	.word	0x20003d44
 80033fc:	20003c50 	.word	0x20003c50
 8003400:	20003c4c 	.word	0x20003c4c
 8003404:	20003d24 	.word	0x20003d24

08003408 <prvTaskIsTaskSuspended.part.0>:
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	e7fe      	b.n	8003418 <prvTaskIsTaskSuspended.part.0+0x10>
	...

0800341c <xTaskCreate>:
	{
 800341c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003420:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003424:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003426:	4650      	mov	r0, sl
	{
 8003428:	460f      	mov	r7, r1
 800342a:	4699      	mov	r9, r3
 800342c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342e:	f7ff fc7d 	bl	8002d2c <pvPortMalloc>
			if( pxStack != NULL )
 8003432:	4605      	mov	r5, r0
 8003434:	2800      	cmp	r0, #0
 8003436:	f000 8089 	beq.w	800354c <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800343a:	2054      	movs	r0, #84	; 0x54
 800343c:	f7ff fc76 	bl	8002d2c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003440:	4604      	mov	r4, r0
 8003442:	2800      	cmp	r0, #0
 8003444:	d07f      	beq.n	8003546 <xTaskCreate+0x12a>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003446:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 800344a:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800344c:	4455      	add	r5, sl
 800344e:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003450:	f025 0a07 	bic.w	sl, r5, #7
 8003454:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003458:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800345a:	7859      	ldrb	r1, [r3, #1]
 800345c:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003460:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003464:	b109      	cbz	r1, 800346a <xTaskCreate+0x4e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003466:	42bb      	cmp	r3, r7
 8003468:	d1f7      	bne.n	800345a <xTaskCreate+0x3e>
 800346a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800346c:	2d06      	cmp	r5, #6
 800346e:	bf28      	it	cs
 8003470:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003472:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003476:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003478:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800347a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800347c:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800347e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003482:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003486:	f7ff fa93 	bl	80029b0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800348e:	f104 0018 	add.w	r0, r4, #24
 8003492:	f7ff fa8d 	bl	80029b0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003496:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800349a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800349e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034a0:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034a4:	464a      	mov	r2, r9
 80034a6:	4641      	mov	r1, r8
 80034a8:	4650      	mov	r0, sl
 80034aa:	f7ff fae9 	bl	8002a80 <pxPortInitialiseStack>
 80034ae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80034b0:	b106      	cbz	r6, 80034b4 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b2:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80034b4:	f7ff fb0e 	bl	8002ad4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80034b8:	4b2c      	ldr	r3, [pc, #176]	; (800356c <xTaskCreate+0x150>)
		if( pxCurrentTCB == NULL )
 80034ba:	4d2d      	ldr	r5, [pc, #180]	; (8003570 <xTaskCreate+0x154>)
		uxCurrentNumberOfTasks++;
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003598 <xTaskCreate+0x17c>
 80034c2:	3201      	adds	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034c6:	682e      	ldr	r6, [r5, #0]
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	d143      	bne.n	8003554 <xTaskCreate+0x138>
			pxCurrentTCB = pxNewTCB;
 80034cc:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11d      	bne.n	8003510 <xTaskCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034d4:	eb08 0006 	add.w	r0, r8, r6
 80034d8:	3614      	adds	r6, #20
 80034da:	f7ff fa5e 	bl	800299a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034de:	2e8c      	cmp	r6, #140	; 0x8c
 80034e0:	d1f8      	bne.n	80034d4 <xTaskCreate+0xb8>
	vListInitialise( &xDelayedTaskList1 );
 80034e2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800359c <xTaskCreate+0x180>
	vListInitialise( &xDelayedTaskList2 );
 80034e6:	4e23      	ldr	r6, [pc, #140]	; (8003574 <xTaskCreate+0x158>)
	vListInitialise( &xDelayedTaskList1 );
 80034e8:	4648      	mov	r0, r9
 80034ea:	f7ff fa56 	bl	800299a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ee:	4630      	mov	r0, r6
 80034f0:	f7ff fa53 	bl	800299a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034f4:	4820      	ldr	r0, [pc, #128]	; (8003578 <xTaskCreate+0x15c>)
 80034f6:	f7ff fa50 	bl	800299a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80034fa:	4820      	ldr	r0, [pc, #128]	; (800357c <xTaskCreate+0x160>)
 80034fc:	f7ff fa4d 	bl	800299a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003500:	481f      	ldr	r0, [pc, #124]	; (8003580 <xTaskCreate+0x164>)
 8003502:	f7ff fa4a 	bl	800299a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <xTaskCreate+0x168>)
 8003508:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <xTaskCreate+0x16c>)
 800350e:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <xTaskCreate+0x170>)
		prvAddTaskToReadyList( pxNewTCB );
 8003512:	491f      	ldr	r1, [pc, #124]	; (8003590 <xTaskCreate+0x174>)
		uxTaskNumber++;
 8003514:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003516:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003518:	3301      	adds	r3, #1
 800351a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800351c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800351e:	2401      	movs	r4, #1
 8003520:	fa04 f302 	lsl.w	r3, r4, r2
 8003524:	4303      	orrs	r3, r0
 8003526:	2014      	movs	r0, #20
 8003528:	600b      	str	r3, [r1, #0]
 800352a:	fb00 8002 	mla	r0, r0, r2, r8
 800352e:	4639      	mov	r1, r7
 8003530:	f7ff fa41 	bl	80029b6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003534:	f7ff faf0 	bl	8002b18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <xTaskCreate+0x178>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b103      	cbz	r3, 8003540 <xTaskCreate+0x124>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353e:	682b      	ldr	r3, [r5, #0]
			xReturn = pdPASS;
 8003540:	4620      	mov	r0, r4
	}
 8003542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8003546:	4628      	mov	r0, r5
 8003548:	f7ff fc7e 	bl	8002e48 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <xTaskCreate+0x178>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1d9      	bne.n	8003510 <xTaskCreate+0xf4>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003562:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003564:	bf98      	it	ls
 8003566:	602c      	strls	r4, [r5, #0]
 8003568:	e7d2      	b.n	8003510 <xTaskCreate+0xf4>
 800356a:	bf00      	nop
 800356c:	20003ce0 	.word	0x20003ce0
 8003570:	20003c48 	.word	0x20003c48
 8003574:	20003d0c 	.word	0x20003d0c
 8003578:	20003d2c 	.word	0x20003d2c
 800357c:	20003d58 	.word	0x20003d58
 8003580:	20003d44 	.word	0x20003d44
 8003584:	20003c4c 	.word	0x20003c4c
 8003588:	20003c50 	.word	0x20003c50
 800358c:	20003cf0 	.word	0x20003cf0
 8003590:	20003cf4 	.word	0x20003cf4
 8003594:	20003d40 	.word	0x20003d40
 8003598:	20003c54 	.word	0x20003c54
 800359c:	20003cf8 	.word	0x20003cf8

080035a0 <vTaskStartScheduler>:
{
 80035a0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <vTaskStartScheduler+0x60>)
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	2400      	movs	r4, #0
 80035a8:	9400      	str	r4, [sp, #0]
 80035aa:	4623      	mov	r3, r4
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	4915      	ldr	r1, [pc, #84]	; (8003604 <vTaskStartScheduler+0x64>)
 80035b0:	4815      	ldr	r0, [pc, #84]	; (8003608 <vTaskStartScheduler+0x68>)
 80035b2:	f7ff ff33 	bl	800341c <xTaskCreate>
	if( xReturn == pdPASS )
 80035b6:	2801      	cmp	r0, #1
 80035b8:	d114      	bne.n	80035e4 <vTaskStartScheduler+0x44>
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <vTaskStartScheduler+0x6c>)
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <vTaskStartScheduler+0x70>)
 80035d4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <vTaskStartScheduler+0x74>)
 80035d8:	601c      	str	r4, [r3, #0]
}
 80035da:	b002      	add	sp, #8
 80035dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80035e0:	f7ff bb0a 	b.w	8002bf8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035e4:	3001      	adds	r0, #1
 80035e6:	d108      	bne.n	80035fa <vTaskStartScheduler+0x5a>
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	e7fe      	b.n	80035f8 <vTaskStartScheduler+0x58>
}
 80035fa:	b002      	add	sp, #8
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	20003d20 	.word	0x20003d20
 8003604:	0800533c 	.word	0x0800533c
 8003608:	08003819 	.word	0x08003819
 800360c:	20003d24 	.word	0x20003d24
 8003610:	20003d40 	.word	0x20003d40
 8003614:	20003d6c 	.word	0x20003d6c

08003618 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003618:	4a02      	ldr	r2, [pc, #8]	; (8003624 <vTaskSuspendAll+0xc>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20003cec 	.word	0x20003cec

08003628 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <xTaskIncrementTick+0xb4>)
 800362a:	681b      	ldr	r3, [r3, #0]
{
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003630:	2b00      	cmp	r3, #0
 8003632:	d12c      	bne.n	800368e <xTaskIncrementTick+0x66>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <xTaskIncrementTick+0xb8>)
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800363a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800363c:	b9bc      	cbnz	r4, 800366e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <xTaskIncrementTick+0xbc>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	b142      	cbz	r2, 8003658 <xTaskIncrementTick+0x30>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	e7fe      	b.n	8003656 <xTaskIncrementTick+0x2e>
 8003658:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <xTaskIncrementTick+0xc0>)
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	6810      	ldr	r0, [r2, #0]
 800365e:	6018      	str	r0, [r3, #0]
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	4a22      	ldr	r2, [pc, #136]	; (80036ec <xTaskIncrementTick+0xc4>)
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	f7ff fe75 	bl	8003358 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800366e:	4d20      	ldr	r5, [pc, #128]	; (80036f0 <xTaskIncrementTick+0xc8>)
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	429c      	cmp	r4, r3
 8003674:	d30f      	bcc.n	8003696 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003676:	4f1b      	ldr	r7, [pc, #108]	; (80036e4 <xTaskIncrementTick+0xbc>)
					prvAddTaskToReadyList( pxTCB );
 8003678:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80036f8 <xTaskIncrementTick+0xd0>
 800367c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80036fc <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b953      	cbnz	r3, 800369c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800368a:	602b      	str	r3, [r5, #0]
	return xSwitchRequired;
 800368c:	e003      	b.n	8003696 <xTaskIncrementTick+0x6e>
		++uxPendedTicks;
 800368e:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <xTaskIncrementTick+0xcc>)
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	2000      	movs	r0, #0
 8003698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036a2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80036a4:	429c      	cmp	r4, r3
 80036a6:	d3f0      	bcc.n	800368a <xTaskIncrementTick+0x62>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a8:	f106 0904 	add.w	r9, r6, #4
 80036ac:	4648      	mov	r0, r9
 80036ae:	f7ff f9a5 	bl	80029fc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80036b4:	b11b      	cbz	r3, 80036be <xTaskIncrementTick+0x96>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b6:	f106 0018 	add.w	r0, r6, #24
 80036ba:	f7ff f99f 	bl	80029fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036be:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80036c0:	f8d8 1000 	ldr.w	r1, [r8]
 80036c4:	2301      	movs	r3, #1
 80036c6:	4093      	lsls	r3, r2
 80036c8:	2014      	movs	r0, #20
 80036ca:	430b      	orrs	r3, r1
 80036cc:	fb00 a002 	mla	r0, r0, r2, sl
 80036d0:	4649      	mov	r1, r9
 80036d2:	f8c8 3000 	str.w	r3, [r8]
 80036d6:	f7ff f96e 	bl	80029b6 <vListInsertEnd>
 80036da:	e7d1      	b.n	8003680 <xTaskIncrementTick+0x58>
 80036dc:	20003cec 	.word	0x20003cec
 80036e0:	20003d6c 	.word	0x20003d6c
 80036e4:	20003c4c 	.word	0x20003c4c
 80036e8:	20003c50 	.word	0x20003c50
 80036ec:	20003d28 	.word	0x20003d28
 80036f0:	20003d24 	.word	0x20003d24
 80036f4:	20003ce8 	.word	0x20003ce8
 80036f8:	20003cf4 	.word	0x20003cf4
 80036fc:	20003c54 	.word	0x20003c54

08003700 <xTaskResumeAll>:
{
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003704:	4c2a      	ldr	r4, [pc, #168]	; (80037b0 <xTaskResumeAll+0xb0>)
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	b943      	cbnz	r3, 800371c <xTaskResumeAll+0x1c>
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	e7fe      	b.n	800371a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800371c:	f7ff f9da 	bl	8002ad4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003726:	6824      	ldr	r4, [r4, #0]
 8003728:	b9dc      	cbnz	r4, 8003762 <xTaskResumeAll+0x62>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <xTaskResumeAll+0xb4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b1c3      	cbz	r3, 8003762 <xTaskResumeAll+0x62>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003730:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80037c8 <xTaskResumeAll+0xc8>
					prvAddTaskToReadyList( pxTCB );
 8003734:	4f20      	ldr	r7, [pc, #128]	; (80037b8 <xTaskResumeAll+0xb8>)
 8003736:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80037cc <xTaskResumeAll+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800373a:	f8d9 3000 	ldr.w	r3, [r9]
 800373e:	b9ab      	cbnz	r3, 800376c <xTaskResumeAll+0x6c>
				if( pxTCB != NULL )
 8003740:	b10c      	cbz	r4, 8003746 <xTaskResumeAll+0x46>
					prvResetNextTaskUnblockTime();
 8003742:	f7ff fe09 	bl	8003358 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003746:	4d1d      	ldr	r5, [pc, #116]	; (80037bc <xTaskResumeAll+0xbc>)
 8003748:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800374a:	b144      	cbz	r4, 800375e <xTaskResumeAll+0x5e>
								xYieldPending = pdTRUE;
 800374c:	4e1c      	ldr	r6, [pc, #112]	; (80037c0 <xTaskResumeAll+0xc0>)
 800374e:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003750:	f7ff ff6a 	bl	8003628 <xTaskIncrementTick>
 8003754:	b100      	cbz	r0, 8003758 <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
 8003756:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003758:	3c01      	subs	r4, #1
 800375a:	d1f9      	bne.n	8003750 <xTaskResumeAll+0x50>
						uxPendedTicks = 0;
 800375c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <xTaskResumeAll+0xc0>)
 8003760:	681b      	ldr	r3, [r3, #0]
	taskEXIT_CRITICAL();
 8003762:	f7ff f9d9 	bl	8002b18 <vPortExitCritical>
}
 8003766:	2000      	movs	r0, #0
 8003768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800376c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003770:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003772:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003774:	f104 0018 	add.w	r0, r4, #24
 8003778:	f7ff f940 	bl	80029fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377c:	4630      	mov	r0, r6
 800377e:	f7ff f93d 	bl	80029fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003782:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	2501      	movs	r5, #1
 8003788:	fa05 f302 	lsl.w	r3, r5, r2
 800378c:	2014      	movs	r0, #20
 800378e:	430b      	orrs	r3, r1
 8003790:	fb00 8002 	mla	r0, r0, r2, r8
 8003794:	4631      	mov	r1, r6
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	f7ff f90d 	bl	80029b6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <xTaskResumeAll+0xc4>)
 800379e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80037a6:	bf24      	itt	cs
 80037a8:	4b05      	ldrcs	r3, [pc, #20]	; (80037c0 <xTaskResumeAll+0xc0>)
 80037aa:	601d      	strcs	r5, [r3, #0]
 80037ac:	e7c5      	b.n	800373a <xTaskResumeAll+0x3a>
 80037ae:	bf00      	nop
 80037b0:	20003cec 	.word	0x20003cec
 80037b4:	20003ce0 	.word	0x20003ce0
 80037b8:	20003cf4 	.word	0x20003cf4
 80037bc:	20003ce8 	.word	0x20003ce8
 80037c0:	20003d70 	.word	0x20003d70
 80037c4:	20003c48 	.word	0x20003c48
 80037c8:	20003d2c 	.word	0x20003d2c
 80037cc:	20003c54 	.word	0x20003c54

080037d0 <vTaskDelay>:
	{
 80037d0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037d2:	b940      	cbnz	r0, 80037e6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <vTaskDelay+0x40>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <vTaskDelay+0x44>)
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	b141      	cbz	r1, 80037fe <vTaskDelay+0x2e>
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	e7fe      	b.n	80037fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80037fe:	f7ff ff0b 	bl	8003618 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003802:	f7ff fdbb 	bl	800337c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003806:	f7ff ff7b 	bl	8003700 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800380a:	2800      	cmp	r0, #0
 800380c:	d0e2      	beq.n	80037d4 <vTaskDelay+0x4>
 800380e:	bd08      	pop	{r3, pc}
 8003810:	e000ed04 	.word	0xe000ed04
 8003814:	20003cec 	.word	0x20003cec

08003818 <prvIdleTask>:
{
 8003818:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800381a:	4e15      	ldr	r6, [pc, #84]	; (8003870 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381c:	4c15      	ldr	r4, [pc, #84]	; (8003874 <prvIdleTask+0x5c>)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	b943      	cbnz	r3, 8003834 <prvIdleTask+0x1c>
			taskYIELD();
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <prvIdleTask+0x60>)
 8003824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	e7f3      	b.n	800381c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003834:	f7ff fef0 	bl	8003618 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003838:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800383a:	f7ff ff61 	bl	8003700 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800383e:	2d00      	cmp	r5, #0
 8003840:	d0ed      	beq.n	800381e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003842:	f7ff f947 	bl	8002ad4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003846:	68f3      	ldr	r3, [r6, #12]
 8003848:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800384a:	1d28      	adds	r0, r5, #4
 800384c:	f7ff f8d6 	bl	80029fc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <prvIdleTask+0x64>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800385e:	f7ff f95b 	bl	8002b18 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003862:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003864:	f7ff faf0 	bl	8002e48 <vPortFree>
			vPortFree( pxTCB );
 8003868:	4628      	mov	r0, r5
 800386a:	f7ff faed 	bl	8002e48 <vPortFree>
 800386e:	e7d6      	b.n	800381e <prvIdleTask+0x6>
 8003870:	20003d58 	.word	0x20003d58
 8003874:	20003ce4 	.word	0x20003ce4
 8003878:	e000ed04 	.word	0xe000ed04
 800387c:	20003ce0 	.word	0x20003ce0

08003880 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <vTaskSwitchContext+0x60>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <vTaskSwitchContext+0x64>)
{
 8003886:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003888:	b112      	cbz	r2, 8003890 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800388a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003890:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <vTaskSwitchContext+0x68>)
 8003894:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f1c3 031f 	rsb	r3, r3, #31
 80038a0:	2214      	movs	r2, #20
 80038a2:	4912      	ldr	r1, [pc, #72]	; (80038ec <vTaskSwitchContext+0x6c>)
 80038a4:	435a      	muls	r2, r3
 80038a6:	1888      	adds	r0, r1, r2
 80038a8:	588c      	ldr	r4, [r1, r2]
 80038aa:	b944      	cbnz	r4, 80038be <vTaskSwitchContext+0x3e>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	e7fe      	b.n	80038bc <vTaskSwitchContext+0x3c>
 80038be:	6844      	ldr	r4, [r0, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	6864      	ldr	r4, [r4, #4]
 80038c4:	6044      	str	r4, [r0, #4]
 80038c6:	440a      	add	r2, r1
 80038c8:	4294      	cmp	r4, r2
 80038ca:	bf04      	itt	eq
 80038cc:	6862      	ldreq	r2, [r4, #4]
 80038ce:	6042      	streq	r2, [r0, #4]
 80038d0:	2214      	movs	r2, #20
 80038d2:	fb02 1303 	mla	r3, r2, r3, r1
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <vTaskSwitchContext+0x70>)
 80038dc:	e7d6      	b.n	800388c <vTaskSwitchContext+0xc>
 80038de:	bf00      	nop
 80038e0:	20003cec 	.word	0x20003cec
 80038e4:	20003d70 	.word	0x20003d70
 80038e8:	20003cf4 	.word	0x20003cf4
 80038ec:	20003c54 	.word	0x20003c54
 80038f0:	20003c48 	.word	0x20003c48

080038f4 <vTaskPlaceOnEventList>:
{
 80038f4:	b510      	push	{r4, lr}
 80038f6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80038f8:	b940      	cbnz	r0, 800390c <vTaskPlaceOnEventList+0x18>
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	e7fe      	b.n	800390a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <vTaskPlaceOnEventList+0x30>)
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	3118      	adds	r1, #24
 8003912:	f7ff f85c 	bl	80029ce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003916:	4620      	mov	r0, r4
 8003918:	2101      	movs	r1, #1
}
 800391a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800391e:	f7ff bd2d 	b.w	800337c <prvAddCurrentTaskToDelayedList>
 8003922:	bf00      	nop
 8003924:	20003c48 	.word	0x20003c48

08003928 <xTaskRemoveFromEventList>:
{
 8003928:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800392a:	68c3      	ldr	r3, [r0, #12]
 800392c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800392e:	b944      	cbnz	r4, 8003942 <xTaskRemoveFromEventList+0x1a>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	e7fe      	b.n	8003940 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003942:	f104 0518 	add.w	r5, r4, #24
 8003946:	4628      	mov	r0, r5
 8003948:	f7ff f858 	bl	80029fc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <xTaskRemoveFromEventList+0x6c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	b9e3      	cbnz	r3, 800398c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003952:	1d25      	adds	r5, r4, #4
 8003954:	4628      	mov	r0, r5
 8003956:	f7ff f851 	bl	80029fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800395a:	490f      	ldr	r1, [pc, #60]	; (8003998 <xTaskRemoveFromEventList+0x70>)
 800395c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800395e:	6808      	ldr	r0, [r1, #0]
 8003960:	2301      	movs	r3, #1
 8003962:	4093      	lsls	r3, r2
 8003964:	4303      	orrs	r3, r0
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <xTaskRemoveFromEventList+0x74>)
 800396a:	2014      	movs	r0, #20
 800396c:	4629      	mov	r1, r5
 800396e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003972:	f7ff f820 	bl	80029b6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <xTaskRemoveFromEventList+0x78>)
 8003978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003980:	bf83      	ittte	hi
 8003982:	4b08      	ldrhi	r3, [pc, #32]	; (80039a4 <xTaskRemoveFromEventList+0x7c>)
 8003984:	2001      	movhi	r0, #1
 8003986:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003988:	2000      	movls	r0, #0
}
 800398a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800398c:	4629      	mov	r1, r5
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <xTaskRemoveFromEventList+0x80>)
 8003990:	e7ef      	b.n	8003972 <xTaskRemoveFromEventList+0x4a>
 8003992:	bf00      	nop
 8003994:	20003cec 	.word	0x20003cec
 8003998:	20003cf4 	.word	0x20003cf4
 800399c:	20003c54 	.word	0x20003c54
 80039a0:	20003c48 	.word	0x20003c48
 80039a4:	20003d70 	.word	0x20003d70
 80039a8:	20003d2c 	.word	0x20003d2c

080039ac <vTaskSetTimeOutState>:
{
 80039ac:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80039ae:	b908      	cbnz	r0, 80039b4 <vTaskSetTimeOutState+0x8>
 80039b0:	f7ff fd2a 	bl	8003408 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <vTaskSetTimeOutState+0x18>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039ba:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <vTaskSetTimeOutState+0x1c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6043      	str	r3, [r0, #4]
 80039c0:	bd08      	pop	{r3, pc}
 80039c2:	bf00      	nop
 80039c4:	20003d28 	.word	0x20003d28
 80039c8:	20003d6c 	.word	0x20003d6c

080039cc <xTaskCheckForTimeOut>:
{
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80039d0:	4604      	mov	r4, r0
 80039d2:	b940      	cbnz	r0, 80039e6 <xTaskCheckForTimeOut+0x1a>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	e7fe      	b.n	80039e4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80039e6:	b941      	cbnz	r1, 80039fa <xTaskCheckForTimeOut+0x2e>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	e7fe      	b.n	80039f8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80039fa:	f7ff f86b 	bl	8002ad4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <xTaskCheckForTimeOut+0x6c>)
 8003a00:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	d010      	beq.n	8003a2a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <xTaskCheckForTimeOut+0x70>)
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	4290      	cmp	r0, r2
 8003a10:	6862      	ldr	r2, [r4, #4]
 8003a12:	d001      	beq.n	8003a18 <xTaskCheckForTimeOut+0x4c>
 8003a14:	4291      	cmp	r1, r2
 8003a16:	d20d      	bcs.n	8003a34 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a18:	1a88      	subs	r0, r1, r2
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	d90a      	bls.n	8003a34 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003a1e:	1a5b      	subs	r3, r3, r1
 8003a20:	4413      	add	r3, r2
 8003a22:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ffc1 	bl	80039ac <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003a2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a2c:	f7ff f874 	bl	8002b18 <vPortExitCritical>
}
 8003a30:	4620      	mov	r0, r4
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003a34:	2401      	movs	r4, #1
 8003a36:	e7f9      	b.n	8003a2c <xTaskCheckForTimeOut+0x60>
 8003a38:	20003d6c 	.word	0x20003d6c
 8003a3c:	20003d28 	.word	0x20003d28

08003a40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <vTaskMissedYield+0x8>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	4770      	bx	lr
 8003a48:	20003d70 	.word	0x20003d70

08003a4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <xTaskGetSchedulerState+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b133      	cbz	r3, 8003a60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <xTaskGetSchedulerState+0x1c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a58:	bf0c      	ite	eq
 8003a5a:	2002      	moveq	r0, #2
 8003a5c:	2000      	movne	r0, #0
 8003a5e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a60:	2001      	movs	r0, #1
	}
 8003a62:	4770      	bx	lr
 8003a64:	20003d40 	.word	0x20003d40
 8003a68:	20003cec 	.word	0x20003cec

08003a6c <vTaskPriorityInherit>:
	{
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003a70:	4604      	mov	r4, r0
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d038      	beq.n	8003ae8 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a76:	4d1d      	ldr	r5, [pc, #116]	; (8003aec <vTaskPriorityInherit+0x80>)
 8003a78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a7a:	682a      	ldr	r2, [r5, #0]
 8003a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d232      	bcs.n	8003ae8 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a82:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a84:	4e1a      	ldr	r6, [pc, #104]	; (8003af0 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a86:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a88:	bfa1      	itttt	ge
 8003a8a:	682a      	ldrge	r2, [r5, #0]
 8003a8c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003a8e:	f1c2 0207 	rsbge	r2, r2, #7
 8003a92:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a94:	2714      	movs	r7, #20
 8003a96:	6942      	ldr	r2, [r0, #20]
 8003a98:	fb07 6303 	mla	r3, r7, r3, r6
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d120      	bne.n	8003ae2 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa0:	f100 0804 	add.w	r8, r0, #4
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	f7fe ffa9 	bl	80029fc <uxListRemove>
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <vTaskPriorityInherit+0x88>)
 8003aac:	b948      	cbnz	r0, 8003ac2 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003aae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003ab0:	4347      	muls	r7, r0
 8003ab2:	59f3      	ldr	r3, [r6, r7]
 8003ab4:	b92b      	cbnz	r3, 8003ac2 <vTaskPriorityInherit+0x56>
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4081      	lsls	r1, r0
 8003abc:	ea23 0301 	bic.w	r3, r3, r1
 8003ac0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ac2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003ac4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ac6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ac8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003aca:	2301      	movs	r3, #1
 8003acc:	4083      	lsls	r3, r0
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	2314      	movs	r3, #20
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003ade:	f7fe bf6a 	b.w	80029b6 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aec:	20003c48 	.word	0x20003c48
 8003af0:	20003c54 	.word	0x20003c54
 8003af4:	20003cf4 	.word	0x20003cf4

08003af8 <xTaskPriorityDisinherit>:
	{
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003afa:	4604      	mov	r4, r0
 8003afc:	b908      	cbnz	r0, 8003b02 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003afe:	2000      	movs	r0, #0
 8003b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <xTaskPriorityDisinherit+0x94>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4298      	cmp	r0, r3
 8003b08:	d008      	beq.n	8003b1c <xTaskPriorityDisinherit+0x24>
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	e7fe      	b.n	8003b1a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b1c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003b1e:	b943      	cbnz	r3, 8003b32 <xTaskPriorityDisinherit+0x3a>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	e7fe      	b.n	8003b30 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003b36:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b38:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003b3a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b3c:	d0df      	beq.n	8003afe <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1dd      	bne.n	8003afe <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b42:	1d05      	adds	r5, r0, #4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f7fe ff59 	bl	80029fc <uxListRemove>
 8003b4a:	4e11      	ldr	r6, [pc, #68]	; (8003b90 <xTaskPriorityDisinherit+0x98>)
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <xTaskPriorityDisinherit+0x9c>)
 8003b4e:	b950      	cbnz	r0, 8003b66 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b52:	2114      	movs	r1, #20
 8003b54:	4379      	muls	r1, r7
 8003b56:	5873      	ldr	r3, [r6, r1]
 8003b58:	b92b      	cbnz	r3, 8003b66 <xTaskPriorityDisinherit+0x6e>
 8003b5a:	6813      	ldr	r3, [r2, #0]
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	40b8      	lsls	r0, r7
 8003b60:	ea23 0300 	bic.w	r3, r3, r0
 8003b64:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b68:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	f1c3 0107 	rsb	r1, r3, #7
 8003b6e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b70:	6811      	ldr	r1, [r2, #0]
 8003b72:	2401      	movs	r4, #1
 8003b74:	fa04 f003 	lsl.w	r0, r4, r3
 8003b78:	4308      	orrs	r0, r1
 8003b7a:	6010      	str	r0, [r2, #0]
 8003b7c:	2014      	movs	r0, #20
 8003b7e:	fb00 6003 	mla	r0, r0, r3, r6
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fe ff17 	bl	80029b6 <vListInsertEnd>
					xReturn = pdTRUE;
 8003b88:	4620      	mov	r0, r4
	}
 8003b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8c:	20003c48 	.word	0x20003c48
 8003b90:	20003c54 	.word	0x20003c54
 8003b94:	20003cf4 	.word	0x20003cf4

08003b98 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <pvTaskIncrementMutexHeldCount+0x14>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	b11a      	cbz	r2, 8003ba6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003ba2:	3201      	adds	r2, #1
 8003ba4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003ba6:	6818      	ldr	r0, [r3, #0]
	}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20003c48 	.word	0x20003c48

08003bb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8003bb2:	4814      	ldr	r0, [pc, #80]	; (8003c04 <MX_ADC1_Init+0x54>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <MX_ADC1_Init+0x58>)
 8003bb6:	2400      	movs	r4, #0
 8003bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bbc:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <MX_ADC1_Init+0x5c>)
 8003bc2:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8003bc4:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = DISABLE;
 8003bc6:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003bc8:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bca:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bcc:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bce:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003bd0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bd2:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bd4:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bd6:	f7fc fcaf 	bl	8000538 <HAL_ADC_Init>
 8003bda:	b118      	cbz	r0, 8003be4 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bdc:	2154      	movs	r1, #84	; 0x54
 8003bde:	480c      	ldr	r0, [pc, #48]	; (8003c10 <MX_ADC1_Init+0x60>)
 8003be0:	f001 f836 	bl	8004c50 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8003be4:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003be6:	4669      	mov	r1, sp
 8003be8:	4806      	ldr	r0, [pc, #24]	; (8003c04 <MX_ADC1_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003bea:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8003bec:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003bee:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bf0:	f7fc fddc 	bl	80007ac <HAL_ADC_ConfigChannel>
 8003bf4:	b118      	cbz	r0, 8003bfe <MX_ADC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bf6:	215e      	movs	r1, #94	; 0x5e
 8003bf8:	4805      	ldr	r0, [pc, #20]	; (8003c10 <MX_ADC1_Init+0x60>)
 8003bfa:	f001 f829 	bl	8004c50 <_Error_Handler>
  }

}
 8003bfe:	b004      	add	sp, #16
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	20003dc4 	.word	0x20003dc4
 8003c08:	40012000 	.word	0x40012000
 8003c0c:	0f000001 	.word	0x0f000001
 8003c10:	08005341 	.word	0x08005341

08003c14 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8003c16:	4814      	ldr	r0, [pc, #80]	; (8003c68 <MX_ADC2_Init+0x54>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <MX_ADC2_Init+0x5c>)
 8003c1c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c1e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003c22:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c26:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8003c28:	2401      	movs	r4, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c2a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003c2c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003c2e:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c30:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c32:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c34:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003c36:	61c4      	str	r4, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003c38:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c3a:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003c3c:	f7fc fc7c 	bl	8000538 <HAL_ADC_Init>
 8003c40:	b118      	cbz	r0, 8003c4a <MX_ADC2_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c42:	2177      	movs	r1, #119	; 0x77
 8003c44:	480b      	ldr	r0, [pc, #44]	; (8003c74 <MX_ADC2_Init+0x60>)
 8003c46:	f001 f803 	bl	8004c50 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003c4a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c4c:	4669      	mov	r1, sp
 8003c4e:	4806      	ldr	r0, [pc, #24]	; (8003c68 <MX_ADC2_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003c50:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8003c52:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003c54:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c56:	f7fc fda9 	bl	80007ac <HAL_ADC_ConfigChannel>
 8003c5a:	b118      	cbz	r0, 8003c64 <MX_ADC2_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c5c:	2181      	movs	r1, #129	; 0x81
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <MX_ADC2_Init+0x60>)
 8003c60:	f000 fff6 	bl	8004c50 <_Error_Handler>
  }

}
 8003c64:	b004      	add	sp, #16
 8003c66:	bd10      	pop	{r4, pc}
 8003c68:	20003d7c 	.word	0x20003d7c
 8003c6c:	40012100 	.word	0x40012100
 8003c70:	0f000001 	.word	0x0f000001
 8003c74:	08005341 	.word	0x08005341

08003c78 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8003c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 8003c7a:	4815      	ldr	r0, [pc, #84]	; (8003cd0 <MX_ADC3_Init+0x58>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <MX_ADC3_Init+0x5c>)
 8003c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c82:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c86:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <MX_ADC3_Init+0x60>)
 8003c88:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003c8a:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 8003c8c:	2201      	movs	r2, #1
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003c8e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003c90:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003c92:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003c94:	6203      	str	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c96:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c98:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003c9a:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003c9c:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c9e:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003ca0:	f7fc fc4a 	bl	8000538 <HAL_ADC_Init>
 8003ca4:	b118      	cbz	r0, 8003cae <MX_ADC3_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ca6:	219a      	movs	r1, #154	; 0x9a
 8003ca8:	480c      	ldr	r0, [pc, #48]	; (8003cdc <MX_ADC3_Init+0x64>)
 8003caa:	f000 ffd1 	bl	8004c50 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cae:	2103      	movs	r1, #3
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003cb8:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <MX_ADC3_Init+0x58>)
 8003cba:	4669      	mov	r1, sp
 8003cbc:	f7fc fd76 	bl	80007ac <HAL_ADC_ConfigChannel>
 8003cc0:	b118      	cbz	r0, 8003cca <MX_ADC3_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003cc2:	21a4      	movs	r1, #164	; 0xa4
 8003cc4:	4805      	ldr	r0, [pc, #20]	; (8003cdc <MX_ADC3_Init+0x64>)
 8003cc6:	f000 ffc3 	bl	8004c50 <_Error_Handler>
  }

}
 8003cca:	b005      	add	sp, #20
 8003ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd0:	20003e0c 	.word	0x20003e0c
 8003cd4:	40012200 	.word	0x40012200
 8003cd8:	0f000001 	.word	0x0f000001
 8003cdc:	08005341 	.word	0x08005341

08003ce0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ce0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8003ce2:	6803      	ldr	r3, [r0, #0]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003ce6:	4293      	cmp	r3, r2
{
 8003ce8:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8003cea:	d117      	bne.n	8003d1c <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_ADC_MspInit+0x84>)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	9100      	str	r1, [sp, #0]
 8003cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d04:	2301      	movs	r3, #1
    __HAL_RCC_ADC3_CLK_ENABLE();
  
    /**ADC3 GPIO Configuration    
    PA3     ------> ADC3_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d0a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	a903      	add	r1, sp, #12
 8003d0e:	4816      	ldr	r0, [pc, #88]	; (8003d68 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d12:	f7fc fea1 	bl	8000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8003d16:	b009      	add	sp, #36	; 0x24
 8003d18:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC2)
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_ADC_MspInit+0x8c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10d      	bne.n	8003d3e <HAL_ADC_MspInit+0x5e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_ADC_MspInit+0x84>)
 8003d24:	2100      	movs	r1, #0
 8003d26:	9101      	str	r1, [sp, #4]
 8003d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e7e3      	b.n	8003d06 <HAL_ADC_MspInit+0x26>
  else if(adcHandle->Instance==ADC3)
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <HAL_ADC_MspInit+0x90>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d1e8      	bne.n	8003d16 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_ADC_MspInit+0x84>)
 8003d46:	2100      	movs	r1, #0
 8003d48:	9102      	str	r1, [sp, #8]
 8003d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	e7d2      	b.n	8003d06 <HAL_ADC_MspInit+0x26>
 8003d60:	40012000 	.word	0x40012000
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40012100 	.word	0x40012100
 8003d70:	40012200 	.word	0x40012200

08003d74 <StartButtonTask>:
//const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
const uint16_t BUTTON_TASK_DELAY_MS = 20;
const uint16_t BUTTON_DEBOUNCE_TIME_MS = 20;
const uint16_t BUTTON_HOLD_TIME_MS = 300;

void StartButtonTask(void const * argument) {
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	b093      	sub	sp, #76	; 0x4c
	buttonMessage_t buttonMessage;
	BaseType_t xStatus;

	uint8_t buttonPressed =  0;
	EButtonState button_state[NUM_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};
	uint16_t count[NUM_BUTTONS] = {0,0,0,0,0,0}; //todo: initialize based on number of buttons
 8003d7a:	af06      	add	r7, sp, #24

	GPIO_TypeDef * buttonGPIOBank[NUM_BUTTONS] = 	{	BUTTON1_GPIO_Port,
 8003d7c:	4c42      	ldr	r4, [pc, #264]	; (8003e88 <StartButtonTask+0x114>)
					if (count[iBtn] > buttonHoldCalls) {
						button_state[iBtn] = BUTTON_HELD;
						buttonMessage.buttonName = buttonName[iBtn];
						buttonMessage.buttonEvent = BUTTON_HOLD;

						xStatus = xQueueSendToBack(xButtonQueue, &buttonMessage,
 8003d7e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003e8c <StartButtonTask+0x118>
	uint16_t count[NUM_BUTTONS] = {0,0,0,0,0,0}; //todo: initialize based on number of buttons
 8003d82:	2300      	movs	r3, #0
 8003d84:	9306      	str	r3, [sp, #24]
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef * buttonGPIOBank[NUM_BUTTONS] = 	{	BUTTON1_GPIO_Port,
 8003d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8c:	ad0c      	add	r5, sp, #48	; 0x30
 8003d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d94:	e885 0003 	stmia.w	r5, {r0, r1}
	uint16_t buttonPin[NUM_BUTTONS] = 				{	BUTTON1_Pin,
 8003d98:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8003d9c:	6861      	ldr	r1, [r4, #4]
 8003d9e:	ab09      	add	r3, sp, #36	; 0x24
 8003da0:	c303      	stmia	r3!, {r0, r1}
 8003da2:	68a0      	ldr	r0, [r4, #8]
 8003da4:	6018      	str	r0, [r3, #0]
	EButtonName buttonName[NUM_BUTTONS] =			{	BUTTON1,
 8003da6:	2302      	movs	r3, #2
	EButtonState button_state[NUM_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};
 8003da8:	2601      	movs	r6, #1
	EButtonName buttonName[NUM_BUTTONS] =			{	BUTTON1,
 8003daa:	f88d 3011 	strb.w	r3, [sp, #17]
 8003dae:	2304      	movs	r3, #4
	EButtonState button_state[NUM_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};
 8003db0:	f88d 6008 	strb.w	r6, [sp, #8]
 8003db4:	f88d 6009 	strb.w	r6, [sp, #9]
 8003db8:	f88d 600a 	strb.w	r6, [sp, #10]
 8003dbc:	f88d 600b 	strb.w	r6, [sp, #11]
 8003dc0:	f88d 600c 	strb.w	r6, [sp, #12]
 8003dc4:	f88d 600d 	strb.w	r6, [sp, #13]
	EButtonName buttonName[NUM_BUTTONS] =			{	BUTTON1,
 8003dc8:	f88d 6010 	strb.w	r6, [sp, #16]
 8003dcc:	f88d 3013 	strb.w	r3, [sp, #19]
 8003dd0:	2603      	movs	r6, #3
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	f88d 6012 	strb.w	r6, [sp, #18]
 8003dd8:	f88d 3014 	strb.w	r3, [sp, #20]
 8003ddc:	2306      	movs	r3, #6
 8003dde:	f88d 3015 	strb.w	r3, [sp, #21]
 8003de2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8003de6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8003dea:	ad02      	add	r5, sp, #8
void StartButtonTask(void const * argument) {
 8003dec:	2400      	movs	r4, #0
						buttonMessage.buttonName = buttonName[iBtn];
 8003dee:	f10d 0910 	add.w	r9, sp, #16
			if (HAL_GPIO_ReadPin(buttonGPIOBank[iBtn], buttonPin[iBtn]) == GPIO_PIN_RESET) {
 8003df2:	f83b 1014 	ldrh.w	r1, [fp, r4, lsl #1]
 8003df6:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8003dfa:	f7fc ff73 	bl	8000ce4 <HAL_GPIO_ReadPin>
			switch (button_state[iBtn]) {
 8003dfe:	782a      	ldrb	r2, [r5, #0]
 8003e00:	2a02      	cmp	r2, #2
			if (HAL_GPIO_ReadPin(buttonGPIOBank[iBtn], buttonPin[iBtn]) == GPIO_PIN_RESET) {
 8003e02:	4603      	mov	r3, r0
			switch (button_state[iBtn]) {
 8003e04:	d011      	beq.n	8003e2a <StartButtonTask+0xb6>
 8003e06:	2a03      	cmp	r2, #3
 8003e08:	d034      	beq.n	8003e74 <StartButtonTask+0x100>
 8003e0a:	2a01      	cmp	r2, #1
 8003e0c:	d104      	bne.n	8003e18 <StartButtonTask+0xa4>
				if (buttonPressed) {
 8003e0e:	b918      	cbnz	r0, 8003e18 <StartButtonTask+0xa4>
					button_state[iBtn] = BUTTON_DEBOUNCE;
 8003e10:	2202      	movs	r2, #2
					count[iBtn] = 0;
 8003e12:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
					button_state[iBtn] = BUTTON_DEBOUNCE;
 8003e16:	702a      	strb	r2, [r5, #0]
 8003e18:	3401      	adds	r4, #1
		for (uint8_t iBtn = 0; iBtn < NUM_BUTTONS; iBtn++ ) {
 8003e1a:	2c06      	cmp	r4, #6
 8003e1c:	f105 0501 	add.w	r5, r5, #1
 8003e20:	d1e7      	bne.n	8003df2 <StartButtonTask+0x7e>
				}
				break;

			}
		}
		osDelay(BUTTON_TASK_DELAY_MS);
 8003e22:	2014      	movs	r0, #20
 8003e24:	f7fe fda7 	bl	8002976 <osDelay>
		for (uint8_t iBtn = 0; iBtn < NUM_BUTTONS; iBtn++ ) {
 8003e28:	e7df      	b.n	8003dea <StartButtonTask+0x76>
				if (!buttonPressed) {
 8003e2a:	b168      	cbz	r0, 8003e48 <StartButtonTask+0xd4>
					if (count[iBtn] > buttonDebounceCalls) {
 8003e2c:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
					button_state[iBtn] = BUTTON_RELEASED;
 8003e30:	2301      	movs	r3, #1
					if (count[iBtn] > buttonDebounceCalls) {
 8003e32:	429a      	cmp	r2, r3
					button_state[iBtn] = BUTTON_RELEASED;
 8003e34:	702b      	strb	r3, [r5, #0]
					if (count[iBtn] > buttonDebounceCalls) {
 8003e36:	d9ef      	bls.n	8003e18 <StartButtonTask+0xa4>
						buttonMessage.buttonName = buttonName[iBtn];
 8003e38:	f814 2009 	ldrb.w	r2, [r4, r9]
 8003e3c:	f88d 2004 	strb.w	r2, [sp, #4]
					buttonMessage.buttonEvent = BUTTON_RELEASE;
 8003e40:	f88d 3005 	strb.w	r3, [sp, #5]
					xStatus = xQueueSendToBack(xButtonQueue, &buttonMessage, 10);
 8003e44:	2300      	movs	r3, #0
 8003e46:	e00e      	b.n	8003e66 <StartButtonTask+0xf2>
					count[iBtn]++;
 8003e48:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 8003e4c:	3201      	adds	r2, #1
 8003e4e:	b292      	uxth	r2, r2
					if (count[iBtn] > buttonHoldCalls) {
 8003e50:	2a0f      	cmp	r2, #15
					count[iBtn]++;
 8003e52:	f827 2014 	strh.w	r2, [r7, r4, lsl #1]
					if (count[iBtn] > buttonHoldCalls) {
 8003e56:	d9df      	bls.n	8003e18 <StartButtonTask+0xa4>
						buttonMessage.buttonName = buttonName[iBtn];
 8003e58:	f814 2009 	ldrb.w	r2, [r4, r9]
						button_state[iBtn] = BUTTON_HELD;
 8003e5c:	702e      	strb	r6, [r5, #0]
						buttonMessage.buttonName = buttonName[iBtn];
 8003e5e:	f88d 2004 	strb.w	r2, [sp, #4]
						buttonMessage.buttonEvent = BUTTON_HOLD;
 8003e62:	f88d 6005 	strb.w	r6, [sp, #5]
					xStatus = xQueueSendToBack(xButtonQueue, &buttonMessage, 10);
 8003e66:	220a      	movs	r2, #10
 8003e68:	a901      	add	r1, sp, #4
 8003e6a:	f8d8 0000 	ldr.w	r0, [r8]
 8003e6e:	f7ff f8f9 	bl	8003064 <xQueueGenericSend>
 8003e72:	e7d1      	b.n	8003e18 <StartButtonTask+0xa4>
				if (!buttonPressed) {
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0cf      	beq.n	8003e18 <StartButtonTask+0xa4>
					button_state[iBtn] = BUTTON_RELEASED;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	702b      	strb	r3, [r5, #0]
					buttonMessage.buttonName = buttonName[iBtn];
 8003e7c:	f814 3009 	ldrb.w	r3, [r4, r9]
 8003e80:	f88d 3004 	strb.w	r3, [sp, #4]
					buttonMessage.buttonEvent = BUTTON_RELEASE;
 8003e84:	2302      	movs	r3, #2
 8003e86:	e7db      	b.n	8003e40 <StartButtonTask+0xcc>
 8003e88:	080050a4 	.word	0x080050a4
 8003e8c:	20003e60 	.word	0x20003e60

08003e90 <setVFO>:
	return;

}


void setVFO(uint32_t freq) {
 8003e90:	b570      	push	{r4, r5, r6, lr}
	uint32_t config = 0;
	float bitfreq = 0;

	//set pointer to bit 0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003e92:	2201      	movs	r2, #1
void setVFO(uint32_t freq) {
 8003e94:	ed2d 8b02 	vpush	{d8}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003e98:	2120      	movs	r1, #32
void setVFO(uint32_t freq) {
 8003e9a:	ee08 0a10 	vmov	s16, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003e9e:	482e      	ldr	r0, [pc, #184]	; (8003f58 <setVFO+0xc8>)
 8003ea0:	f7fc ff32 	bl	8000d08 <HAL_GPIO_WritePin>
	asm("NOP");
 8003ea4:	bf00      	nop
	asm("NOP");
 8003ea6:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2120      	movs	r1, #32
 8003eac:	482a      	ldr	r0, [pc, #168]	; (8003f58 <setVFO+0xc8>)
	for(unsigned char bit = 0; bit < 32; bit++) {
		//setup the data pin
		if( (config >> bit) & 0x01 ) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003eae:	4e2a      	ldr	r6, [pc, #168]	; (8003f58 <setVFO+0xc8>)

		asm("NOP");
		asm("NOP");

		//clock
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003eb0:	4d2a      	ldr	r5, [pc, #168]	; (8003f5c <setVFO+0xcc>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003eb2:	f7fc ff29 	bl	8000d08 <HAL_GPIO_WritePin>
	bitfreq *= freq;
 8003eb6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8003eba:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003f60 <setVFO+0xd0>
 8003ebe:	ee28 8a27 	vmul.f32	s16, s16, s15
	config = (uint32_t)bitfreq;
 8003ec2:	2400      	movs	r4, #0
 8003ec4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
		if( (config >> bit) & 0x01 ) {
 8003ec8:	ee18 3a10 	vmov	r3, s16
 8003ecc:	fa23 f204 	lsr.w	r2, r3, r4
 8003ed0:	f012 0201 	ands.w	r2, r2, #1
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003ed4:	bf18      	it	ne
 8003ed6:	2201      	movne	r2, #1
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ed8:	2110      	movs	r1, #16
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7fc ff14 	bl	8000d08 <HAL_GPIO_WritePin>
		asm("NOP");
 8003ee0:	bf00      	nop
		asm("NOP");
 8003ee2:	bf00      	nop
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eea:	4628      	mov	r0, r5
 8003eec:	f7fc ff0c 	bl	8000d08 <HAL_GPIO_WritePin>
		asm("NOP");
 8003ef0:	bf00      	nop
		asm("NOP");
 8003ef2:	bf00      	nop
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003efa:	4628      	mov	r0, r5
 8003efc:	3401      	adds	r4, #1
 8003efe:	f7fc ff03 	bl	8000d08 <HAL_GPIO_WritePin>
	for(unsigned char bit = 0; bit < 32; bit++) {
 8003f02:	2c20      	cmp	r4, #32
 8003f04:	d1e0      	bne.n	8003ec8 <setVFO+0x38>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2110      	movs	r1, #16
 8003f0a:	4813      	ldr	r0, [pc, #76]	; (8003f58 <setVFO+0xc8>)

	for(unsigned char bit = 0; bit < 8; bit++) {
		//clock
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003f0c:	4d13      	ldr	r5, [pc, #76]	; (8003f5c <setVFO+0xcc>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f0e:	f7fc fefb 	bl	8000d08 <HAL_GPIO_WritePin>
 8003f12:	2408      	movs	r4, #8
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003f14:	2201      	movs	r2, #1
 8003f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7fc fef4 	bl	8000d08 <HAL_GPIO_WritePin>
		asm("NOP");
 8003f20:	bf00      	nop
		asm("NOP");
 8003f22:	bf00      	nop
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003f24:	2200      	movs	r2, #0
 8003f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	3c01      	subs	r4, #1
 8003f2e:	f7fc feeb 	bl	8000d08 <HAL_GPIO_WritePin>
	for(unsigned char bit = 0; bit < 8; bit++) {
 8003f32:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003f36:	d1ed      	bne.n	8003f14 <setVFO+0x84>
	}

	//commit changes
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	4806      	ldr	r0, [pc, #24]	; (8003f58 <setVFO+0xc8>)
 8003f3e:	f7fc fee3 	bl	8000d08 <HAL_GPIO_WritePin>
	asm("NOP");
 8003f42:	bf00      	nop
	asm("NOP");
 8003f44:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

	return;
}
 8003f46:	ecbd 8b02 	vpop	{d8}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	4802      	ldr	r0, [pc, #8]	; (8003f58 <setVFO+0xc8>)
}
 8003f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f54:	f7fc bed8 	b.w	8000d08 <HAL_GPIO_WritePin>
 8003f58:	40020400 	.word	0x40020400
 8003f5c:	40020000 	.word	0x40020000
 8003f60:	422c0000 	.word	0x422c0000

08003f64 <getDigitFromInt>:

	current_digit = (current_digit + 1) % 6;
	return;
}

unsigned char getDigitFromInt(uint32_t display_val, unsigned char pos) {
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <getDigitFromInt+0x24>)
 8003f66:	4298      	cmp	r0, r3
 8003f68:	bf28      	it	cs
 8003f6a:	4618      	movcs	r0, r3
 8003f6c:	220a      	movs	r2, #10
 8003f6e:	2300      	movs	r3, #0
	unsigned char digit = 0;
	if (display_val > 999999) {
		display_val = 999999;
	}

	for (int i = 0; i < pos; i++) {
 8003f70:	428b      	cmp	r3, r1
 8003f72:	db05      	blt.n	8003f80 <getDigitFromInt+0x1c>
		display_val /= 10;
	}
	digit = display_val % 10;
 8003f74:	fbb0 f3f2 	udiv	r3, r0, r2
 8003f78:	fb02 0013 	mls	r0, r2, r3, r0

	return digit;

}
 8003f7c:	b2c0      	uxtb	r0, r0
 8003f7e:	4770      	bx	lr
		display_val /= 10;
 8003f80:	fbb0 f0f2 	udiv	r0, r0, r2
	for (int i = 0; i < pos; i++) {
 8003f84:	3301      	adds	r3, #1
 8003f86:	e7f3      	b.n	8003f70 <getDigitFromInt+0xc>
 8003f88:	000f423f 	.word	0x000f423f

08003f8c <getDigitMask>:

unsigned char getDigitMask(unsigned char digit) {
	unsigned char digit_mask = 0;

	if (digit > 9) {
		digit = 8;
 8003f8c:	2809      	cmp	r0, #9
 8003f8e:	bf88      	it	hi
 8003f90:	2008      	movhi	r0, #8
	case 9:
		digit_mask = 0b11100110;
		break;
	}
	return digit_mask;
}
 8003f92:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <getDigitMask+0xc>)
 8003f94:	5c18      	ldrb	r0, [r3, r0]
 8003f96:	4770      	bx	lr
 8003f98:	0800534e 	.word	0x0800534e

08003f9c <updateCharacterDisplay>:
void updateCharacterDisplay(uint32_t display_val) {
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digit = getDigitFromInt(display_val, current_digit);
 8003f9e:	4c41      	ldr	r4, [pc, #260]	; (80040a4 <updateCharacterDisplay+0x108>)
 8003fa0:	7821      	ldrb	r1, [r4, #0]
 8003fa2:	f7ff ffdf 	bl	8003f64 <getDigitFromInt>
	digit_bitmask = getDigitMask(digit);
 8003fa6:	f7ff fff1 	bl	8003f8c <getDigitMask>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8003faa:	2201      	movs	r2, #1
	digit_bitmask = getDigitMask(digit);
 8003fac:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8003fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fb2:	483d      	ldr	r0, [pc, #244]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003fb4:	f7fc fea8 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fbe:	483a      	ldr	r0, [pc, #232]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003fc0:	f7fc fea2 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fca:	4837      	ldr	r0, [pc, #220]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003fcc:	f7fc fe9c 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fd6:	4834      	ldr	r0, [pc, #208]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003fd8:	f7fc fe96 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fe2:	4831      	ldr	r0, [pc, #196]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003fe4:	f7fc fe90 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fee:	482e      	ldr	r0, [pc, #184]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003ff0:	f7fc fe8a 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ffa:	482b      	ldr	r0, [pc, #172]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8003ffc:	f7fc fe84 	bl	8000d08 <HAL_GPIO_WritePin>
	asm("NOP");
 8004000:	bf00      	nop
	asm("NOP");
 8004002:	bf00      	nop
	asm("NOP");
 8004004:	bf00      	nop
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8004006:	2201      	movs	r2, #1
 8004008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800400c:	4826      	ldr	r0, [pc, #152]	; (80040a8 <updateCharacterDisplay+0x10c>)
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800400e:	4e26      	ldr	r6, [pc, #152]	; (80040a8 <updateCharacterDisplay+0x10c>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8004010:	f7fc fe7a 	bl	8000d08 <HAL_GPIO_WritePin>
 8004014:	2500      	movs	r5, #0
		if ((digit_bitmask >> inc & 0x01) == 1) {
 8004016:	fa27 f305 	lsr.w	r3, r7, r5
 800401a:	07db      	lsls	r3, r3, #31
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800401c:	bf4c      	ite	mi
 800401e:	2200      	movmi	r2, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004020:	2201      	movpl	r2, #1
 8004022:	4630      	mov	r0, r6
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	f7fc fe6f 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800402a:	2201      	movs	r2, #1
 800402c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004030:	4630      	mov	r0, r6
 8004032:	f7fc fe69 	bl	8000d08 <HAL_GPIO_WritePin>
		asm("NOP");
 8004036:	bf00      	nop
		asm("NOP");
 8004038:	bf00      	nop
		asm("NOP");
 800403a:	bf00      	nop
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004042:	4630      	mov	r0, r6
 8004044:	3501      	adds	r5, #1
 8004046:	f7fc fe5f 	bl	8000d08 <HAL_GPIO_WritePin>
	for (unsigned char inc = 0; inc < 8; inc++) {
 800404a:	2d08      	cmp	r5, #8
 800404c:	d1e3      	bne.n	8004016 <updateCharacterDisplay+0x7a>
	switch (current_digit) {
 800404e:	7823      	ldrb	r3, [r4, #0]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d80a      	bhi.n	800406a <updateCharacterDisplay+0xce>
 8004054:	e8df f003 	tbb	[pc, r3]
 8004058:	1a161203 	.word	0x1a161203
 800405c:	221e      	.short	0x221e
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800405e:	2200      	movs	r2, #0
 8004060:	f44f 6180 	mov.w	r1, #1024	; 0x400
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004064:	4810      	ldr	r0, [pc, #64]	; (80040a8 <updateCharacterDisplay+0x10c>)
 8004066:	f7fc fe4f 	bl	8000d08 <HAL_GPIO_WritePin>
	current_digit = (current_digit + 1) % 6;
 800406a:	7823      	ldrb	r3, [r4, #0]
 800406c:	2106      	movs	r1, #6
 800406e:	3301      	adds	r3, #1
 8004070:	fb93 f2f1 	sdiv	r2, r3, r1
 8004074:	fb01 3312 	mls	r3, r1, r2, r3
 8004078:	7023      	strb	r3, [r4, #0]
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800407c:	2200      	movs	r2, #0
 800407e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004082:	e7ef      	b.n	8004064 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800408a:	e7eb      	b.n	8004064 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004092:	e7e7      	b.n	8004064 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800409a:	e7e3      	b.n	8004064 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a2:	e7df      	b.n	8004064 <updateCharacterDisplay+0xc8>
 80040a4:	20003d75 	.word	0x20003d75
 80040a8:	40021000 	.word	0x40021000

080040ac <updateRgDisplay>:

void updateRgDisplay(uint32_t red_mask, uint32_t green_mask) {
 80040ac:	b570      	push	{r4, r5, r6, lr}
	static unsigned char bank = 0;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80040ae:	2200      	movs	r2, #0
void updateRgDisplay(uint32_t red_mask, uint32_t green_mask) {
 80040b0:	4605      	mov	r5, r0
 80040b2:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80040b4:	48a2      	ldr	r0, [pc, #648]	; (8004340 <updateRgDisplay+0x294>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);

	switch (bank) {
 80040b6:	4ea3      	ldr	r6, [pc, #652]	; (8004344 <updateRgDisplay+0x298>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80040b8:	2101      	movs	r1, #1
 80040ba:	f7fc fe25 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80040be:	2200      	movs	r2, #0
 80040c0:	2102      	movs	r1, #2
 80040c2:	489f      	ldr	r0, [pc, #636]	; (8004340 <updateRgDisplay+0x294>)
 80040c4:	f7fc fe20 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80040c8:	2200      	movs	r2, #0
 80040ca:	2104      	movs	r1, #4
 80040cc:	489c      	ldr	r0, [pc, #624]	; (8004340 <updateRgDisplay+0x294>)
 80040ce:	f7fc fe1b 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2108      	movs	r1, #8
 80040d6:	489a      	ldr	r0, [pc, #616]	; (8004340 <updateRgDisplay+0x294>)
 80040d8:	f7fc fe16 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80040dc:	2200      	movs	r2, #0
 80040de:	2110      	movs	r1, #16
 80040e0:	4897      	ldr	r0, [pc, #604]	; (8004340 <updateRgDisplay+0x294>)
 80040e2:	f7fc fe11 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2120      	movs	r1, #32
 80040ea:	4895      	ldr	r0, [pc, #596]	; (8004340 <updateRgDisplay+0x294>)
 80040ec:	f7fc fe0c 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80040f0:	2200      	movs	r2, #0
 80040f2:	2140      	movs	r1, #64	; 0x40
 80040f4:	4892      	ldr	r0, [pc, #584]	; (8004340 <updateRgDisplay+0x294>)
 80040f6:	f7fc fe07 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	4890      	ldr	r0, [pc, #576]	; (8004340 <updateRgDisplay+0x294>)
 8004100:	f7fc fe02 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800410a:	488d      	ldr	r0, [pc, #564]	; (8004340 <updateRgDisplay+0x294>)
 800410c:	f7fc fdfc 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004116:	488a      	ldr	r0, [pc, #552]	; (8004340 <updateRgDisplay+0x294>)
 8004118:	f7fc fdf6 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004122:	4887      	ldr	r0, [pc, #540]	; (8004340 <updateRgDisplay+0x294>)
 8004124:	f7fc fdf0 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800412e:	4884      	ldr	r0, [pc, #528]	; (8004340 <updateRgDisplay+0x294>)
 8004130:	f7fc fdea 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800413a:	4881      	ldr	r0, [pc, #516]	; (8004340 <updateRgDisplay+0x294>)
 800413c:	f7fc fde4 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004146:	487e      	ldr	r0, [pc, #504]	; (8004340 <updateRgDisplay+0x294>)
 8004148:	f7fc fdde 	bl	8000d08 <HAL_GPIO_WritePin>
	switch (bank) {
 800414c:	7833      	ldrb	r3, [r6, #0]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d857      	bhi.n	8004202 <updateRgDisplay+0x156>
 8004152:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004156:	0004      	.short	0x0004
 8004158:	00a8005c 	.word	0x00a8005c
 800415c:	00f9      	.short	0x00f9
	case (0):
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800415e:	2201      	movs	r2, #1
 8004160:	4877      	ldr	r0, [pc, #476]	; (8004340 <updateRgDisplay+0x294>)
 8004162:	4611      	mov	r1, r2
 8004164:	f7fc fdd0 	bl	8000d08 <HAL_GPIO_WritePin>

		if (red_mask >> 3 & 0x01)
 8004168:	0728      	lsls	r0, r5, #28
 800416a:	d505      	bpl.n	8004178 <updateRgDisplay+0xcc>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800416c:	2201      	movs	r2, #1
 800416e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004172:	4873      	ldr	r0, [pc, #460]	; (8004340 <updateRgDisplay+0x294>)
 8004174:	f7fc fdc8 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 7 & 0x01)
 8004178:	0629      	lsls	r1, r5, #24
 800417a:	d504      	bpl.n	8004186 <updateRgDisplay+0xda>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800417c:	2201      	movs	r2, #1
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	486f      	ldr	r0, [pc, #444]	; (8004340 <updateRgDisplay+0x294>)
 8004182:	f7fc fdc1 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 11 & 0x01)
 8004186:	052a      	lsls	r2, r5, #20
 8004188:	d504      	bpl.n	8004194 <updateRgDisplay+0xe8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800418a:	2201      	movs	r2, #1
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	486c      	ldr	r0, [pc, #432]	; (8004340 <updateRgDisplay+0x294>)
 8004190:	f7fc fdba 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 15 & 0x01)
 8004194:	042b      	lsls	r3, r5, #16
 8004196:	d504      	bpl.n	80041a2 <updateRgDisplay+0xf6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004198:	2201      	movs	r2, #1
 800419a:	2120      	movs	r1, #32
 800419c:	4868      	ldr	r0, [pc, #416]	; (8004340 <updateRgDisplay+0x294>)
 800419e:	f7fc fdb3 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 19 & 0x01)
 80041a2:	0328      	lsls	r0, r5, #12
 80041a4:	d504      	bpl.n	80041b0 <updateRgDisplay+0x104>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80041a6:	2201      	movs	r2, #1
 80041a8:	2110      	movs	r1, #16
 80041aa:	4865      	ldr	r0, [pc, #404]	; (8004340 <updateRgDisplay+0x294>)
 80041ac:	f7fc fdac 	bl	8000d08 <HAL_GPIO_WritePin>

		if (green_mask >> 3 & 0x01)
 80041b0:	0721      	lsls	r1, r4, #28
 80041b2:	d505      	bpl.n	80041c0 <updateRgDisplay+0x114>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041ba:	4861      	ldr	r0, [pc, #388]	; (8004340 <updateRgDisplay+0x294>)
 80041bc:	f7fc fda4 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 7 & 0x01)
 80041c0:	0622      	lsls	r2, r4, #24
 80041c2:	d505      	bpl.n	80041d0 <updateRgDisplay+0x124>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80041c4:	2201      	movs	r2, #1
 80041c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041ca:	485d      	ldr	r0, [pc, #372]	; (8004340 <updateRgDisplay+0x294>)
 80041cc:	f7fc fd9c 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 11 & 0x01)
 80041d0:	0523      	lsls	r3, r4, #20
 80041d2:	d505      	bpl.n	80041e0 <updateRgDisplay+0x134>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80041d4:	2201      	movs	r2, #1
 80041d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041da:	4859      	ldr	r0, [pc, #356]	; (8004340 <updateRgDisplay+0x294>)
 80041dc:	f7fc fd94 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 15 & 0x01)
 80041e0:	0425      	lsls	r5, r4, #16
 80041e2:	d505      	bpl.n	80041f0 <updateRgDisplay+0x144>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80041e4:	2201      	movs	r2, #1
 80041e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041ea:	4855      	ldr	r0, [pc, #340]	; (8004340 <updateRgDisplay+0x294>)
 80041ec:	f7fc fd8c 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 19 & 0x01)
 80041f0:	f414 2f00 	tst.w	r4, #524288	; 0x80000
 80041f4:	d005      	beq.n	8004202 <updateRgDisplay+0x156>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80041f6:	2201      	movs	r2, #1
 80041f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041fc:	4850      	ldr	r0, [pc, #320]	; (8004340 <updateRgDisplay+0x294>)
 80041fe:	f7fc fd83 	bl	8000d08 <HAL_GPIO_WritePin>

		break;

	}

	bank = (bank + 1) % 4;
 8004202:	7833      	ldrb	r3, [r6, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	7033      	strb	r3, [r6, #0]
 800420c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800420e:	484c      	ldr	r0, [pc, #304]	; (8004340 <updateRgDisplay+0x294>)
 8004210:	2201      	movs	r2, #1
 8004212:	2102      	movs	r1, #2
 8004214:	f7fc fd78 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 2 & 0x01)
 8004218:	0768      	lsls	r0, r5, #29
 800421a:	d505      	bpl.n	8004228 <updateRgDisplay+0x17c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004222:	4847      	ldr	r0, [pc, #284]	; (8004340 <updateRgDisplay+0x294>)
 8004224:	f7fc fd70 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 6 & 0x01)
 8004228:	0669      	lsls	r1, r5, #25
 800422a:	d504      	bpl.n	8004236 <updateRgDisplay+0x18a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800422c:	2201      	movs	r2, #1
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	4843      	ldr	r0, [pc, #268]	; (8004340 <updateRgDisplay+0x294>)
 8004232:	f7fc fd69 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 10 & 0x01)
 8004236:	056a      	lsls	r2, r5, #21
 8004238:	d504      	bpl.n	8004244 <updateRgDisplay+0x198>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800423a:	2201      	movs	r2, #1
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	4840      	ldr	r0, [pc, #256]	; (8004340 <updateRgDisplay+0x294>)
 8004240:	f7fc fd62 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 14 & 0x01)
 8004244:	046b      	lsls	r3, r5, #17
 8004246:	d504      	bpl.n	8004252 <updateRgDisplay+0x1a6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004248:	2201      	movs	r2, #1
 800424a:	2120      	movs	r1, #32
 800424c:	483c      	ldr	r0, [pc, #240]	; (8004340 <updateRgDisplay+0x294>)
 800424e:	f7fc fd5b 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 18 & 0x01)
 8004252:	0368      	lsls	r0, r5, #13
 8004254:	d504      	bpl.n	8004260 <updateRgDisplay+0x1b4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004256:	2201      	movs	r2, #1
 8004258:	2110      	movs	r1, #16
 800425a:	4839      	ldr	r0, [pc, #228]	; (8004340 <updateRgDisplay+0x294>)
 800425c:	f7fc fd54 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 2 & 0x01)
 8004260:	0761      	lsls	r1, r4, #29
 8004262:	d505      	bpl.n	8004270 <updateRgDisplay+0x1c4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8004264:	2201      	movs	r2, #1
 8004266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800426a:	4835      	ldr	r0, [pc, #212]	; (8004340 <updateRgDisplay+0x294>)
 800426c:	f7fc fd4c 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 6 & 0x01)
 8004270:	0662      	lsls	r2, r4, #25
 8004272:	d505      	bpl.n	8004280 <updateRgDisplay+0x1d4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8004274:	2201      	movs	r2, #1
 8004276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800427a:	4831      	ldr	r0, [pc, #196]	; (8004340 <updateRgDisplay+0x294>)
 800427c:	f7fc fd44 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 10 & 0x01)
 8004280:	0563      	lsls	r3, r4, #21
 8004282:	d505      	bpl.n	8004290 <updateRgDisplay+0x1e4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004284:	2201      	movs	r2, #1
 8004286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800428a:	482d      	ldr	r0, [pc, #180]	; (8004340 <updateRgDisplay+0x294>)
 800428c:	f7fc fd3c 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 14 & 0x01)
 8004290:	0465      	lsls	r5, r4, #17
 8004292:	d505      	bpl.n	80042a0 <updateRgDisplay+0x1f4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004294:	2201      	movs	r2, #1
 8004296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800429a:	4829      	ldr	r0, [pc, #164]	; (8004340 <updateRgDisplay+0x294>)
 800429c:	f7fc fd34 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 18 & 0x01)
 80042a0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
 80042a4:	e7a6      	b.n	80041f4 <updateRgDisplay+0x148>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80042a6:	4826      	ldr	r0, [pc, #152]	; (8004340 <updateRgDisplay+0x294>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	2104      	movs	r1, #4
 80042ac:	f7fc fd2c 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 1 & 0x01)
 80042b0:	07a8      	lsls	r0, r5, #30
 80042b2:	d505      	bpl.n	80042c0 <updateRgDisplay+0x214>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80042b4:	2201      	movs	r2, #1
 80042b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ba:	4821      	ldr	r0, [pc, #132]	; (8004340 <updateRgDisplay+0x294>)
 80042bc:	f7fc fd24 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 5 & 0x01)
 80042c0:	06a9      	lsls	r1, r5, #26
 80042c2:	d504      	bpl.n	80042ce <updateRgDisplay+0x222>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80042c4:	2201      	movs	r2, #1
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	481d      	ldr	r0, [pc, #116]	; (8004340 <updateRgDisplay+0x294>)
 80042ca:	f7fc fd1d 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 9 & 0x01)
 80042ce:	05aa      	lsls	r2, r5, #22
 80042d0:	d504      	bpl.n	80042dc <updateRgDisplay+0x230>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80042d2:	2201      	movs	r2, #1
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	481a      	ldr	r0, [pc, #104]	; (8004340 <updateRgDisplay+0x294>)
 80042d8:	f7fc fd16 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 13 & 0x01)
 80042dc:	04ab      	lsls	r3, r5, #18
 80042de:	d504      	bpl.n	80042ea <updateRgDisplay+0x23e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80042e0:	2201      	movs	r2, #1
 80042e2:	2120      	movs	r1, #32
 80042e4:	4816      	ldr	r0, [pc, #88]	; (8004340 <updateRgDisplay+0x294>)
 80042e6:	f7fc fd0f 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 17 & 0x01)
 80042ea:	03a8      	lsls	r0, r5, #14
 80042ec:	d504      	bpl.n	80042f8 <updateRgDisplay+0x24c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80042ee:	2201      	movs	r2, #1
 80042f0:	2110      	movs	r1, #16
 80042f2:	4813      	ldr	r0, [pc, #76]	; (8004340 <updateRgDisplay+0x294>)
 80042f4:	f7fc fd08 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 1 & 0x01)
 80042f8:	07a1      	lsls	r1, r4, #30
 80042fa:	d505      	bpl.n	8004308 <updateRgDisplay+0x25c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80042fc:	2201      	movs	r2, #1
 80042fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004302:	480f      	ldr	r0, [pc, #60]	; (8004340 <updateRgDisplay+0x294>)
 8004304:	f7fc fd00 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 5 & 0x01)
 8004308:	06a2      	lsls	r2, r4, #26
 800430a:	d505      	bpl.n	8004318 <updateRgDisplay+0x26c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800430c:	2201      	movs	r2, #1
 800430e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004312:	480b      	ldr	r0, [pc, #44]	; (8004340 <updateRgDisplay+0x294>)
 8004314:	f7fc fcf8 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 9 & 0x01)
 8004318:	05a3      	lsls	r3, r4, #22
 800431a:	d505      	bpl.n	8004328 <updateRgDisplay+0x27c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800431c:	2201      	movs	r2, #1
 800431e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004322:	4807      	ldr	r0, [pc, #28]	; (8004340 <updateRgDisplay+0x294>)
 8004324:	f7fc fcf0 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 13 & 0x01)
 8004328:	04a5      	lsls	r5, r4, #18
 800432a:	d505      	bpl.n	8004338 <updateRgDisplay+0x28c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004332:	4803      	ldr	r0, [pc, #12]	; (8004340 <updateRgDisplay+0x294>)
 8004334:	f7fc fce8 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 17 & 0x01)
 8004338:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800433c:	e75a      	b.n	80041f4 <updateRgDisplay+0x148>
 800433e:	bf00      	nop
 8004340:	40020c00 	.word	0x40020c00
 8004344:	20003d74 	.word	0x20003d74
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8004348:	4825      	ldr	r0, [pc, #148]	; (80043e0 <updateRgDisplay+0x334>)
 800434a:	2201      	movs	r2, #1
 800434c:	2108      	movs	r1, #8
 800434e:	f7fc fcdb 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 0 & 0x01)
 8004352:	07e8      	lsls	r0, r5, #31
 8004354:	d505      	bpl.n	8004362 <updateRgDisplay+0x2b6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
 8004358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800435c:	4820      	ldr	r0, [pc, #128]	; (80043e0 <updateRgDisplay+0x334>)
 800435e:	f7fc fcd3 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 4 & 0x01)
 8004362:	06e9      	lsls	r1, r5, #27
 8004364:	d504      	bpl.n	8004370 <updateRgDisplay+0x2c4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004366:	2201      	movs	r2, #1
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	481d      	ldr	r0, [pc, #116]	; (80043e0 <updateRgDisplay+0x334>)
 800436c:	f7fc fccc 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 8 & 0x01)
 8004370:	05ea      	lsls	r2, r5, #23
 8004372:	d504      	bpl.n	800437e <updateRgDisplay+0x2d2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004374:	2201      	movs	r2, #1
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	4819      	ldr	r0, [pc, #100]	; (80043e0 <updateRgDisplay+0x334>)
 800437a:	f7fc fcc5 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 12 & 0x01)
 800437e:	04eb      	lsls	r3, r5, #19
 8004380:	d504      	bpl.n	800438c <updateRgDisplay+0x2e0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004382:	2201      	movs	r2, #1
 8004384:	2120      	movs	r1, #32
 8004386:	4816      	ldr	r0, [pc, #88]	; (80043e0 <updateRgDisplay+0x334>)
 8004388:	f7fc fcbe 	bl	8000d08 <HAL_GPIO_WritePin>
		if (red_mask >> 16 & 0x01)
 800438c:	03ed      	lsls	r5, r5, #15
 800438e:	d504      	bpl.n	800439a <updateRgDisplay+0x2ee>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004390:	2201      	movs	r2, #1
 8004392:	2110      	movs	r1, #16
 8004394:	4812      	ldr	r0, [pc, #72]	; (80043e0 <updateRgDisplay+0x334>)
 8004396:	f7fc fcb7 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 0 & 0x01)
 800439a:	07e0      	lsls	r0, r4, #31
 800439c:	d505      	bpl.n	80043aa <updateRgDisplay+0x2fe>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800439e:	2201      	movs	r2, #1
 80043a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043a4:	480e      	ldr	r0, [pc, #56]	; (80043e0 <updateRgDisplay+0x334>)
 80043a6:	f7fc fcaf 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 4 & 0x01)
 80043aa:	06e1      	lsls	r1, r4, #27
 80043ac:	d505      	bpl.n	80043ba <updateRgDisplay+0x30e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80043ae:	2201      	movs	r2, #1
 80043b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043b4:	480a      	ldr	r0, [pc, #40]	; (80043e0 <updateRgDisplay+0x334>)
 80043b6:	f7fc fca7 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 8 & 0x01)
 80043ba:	05e2      	lsls	r2, r4, #23
 80043bc:	d505      	bpl.n	80043ca <updateRgDisplay+0x31e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80043be:	2201      	movs	r2, #1
 80043c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043c4:	4806      	ldr	r0, [pc, #24]	; (80043e0 <updateRgDisplay+0x334>)
 80043c6:	f7fc fc9f 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 12 & 0x01)
 80043ca:	04e3      	lsls	r3, r4, #19
 80043cc:	d505      	bpl.n	80043da <updateRgDisplay+0x32e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80043ce:	2201      	movs	r2, #1
 80043d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <updateRgDisplay+0x334>)
 80043d6:	f7fc fc97 	bl	8000d08 <HAL_GPIO_WritePin>
		if (green_mask >> 16 & 0x01)
 80043da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80043de:	e709      	b.n	80041f4 <updateRgDisplay+0x148>
 80043e0:	40020c00 	.word	0x40020c00

080043e4 <updateStatusDisplay>:
//4: 3
//5: 4
//6: 6
//7: 0

void updateStatusDisplay(uint32_t status_mask) {
 80043e4:	b538      	push	{r3, r4, r5, lr}
	unsigned static char led = 0;
	led = (led + 1) % 8;
 80043e6:	4d30      	ldr	r5, [pc, #192]	; (80044a8 <updateStatusDisplay+0xc4>)
 80043e8:	782b      	ldrb	r3, [r5, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 0307 	and.w	r3, r3, #7

	//Start with LED 8 (power LED)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
void updateStatusDisplay(uint32_t status_mask) {
 80043f4:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80043f6:	482d      	ldr	r0, [pc, #180]	; (80044ac <updateStatusDisplay+0xc8>)
	led = (led + 1) % 8;
 80043f8:	702b      	strb	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80043fa:	f7fc fc85 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80043fe:	2200      	movs	r2, #0
 8004400:	2102      	movs	r1, #2
 8004402:	482a      	ldr	r0, [pc, #168]	; (80044ac <updateStatusDisplay+0xc8>)
 8004404:	f7fc fc80 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8004408:	2200      	movs	r2, #0
 800440a:	2104      	movs	r1, #4
 800440c:	4827      	ldr	r0, [pc, #156]	; (80044ac <updateStatusDisplay+0xc8>)
 800440e:	f7fc fc7b 	bl	8000d08 <HAL_GPIO_WritePin>

	switch (led) {
 8004412:	782b      	ldrb	r3, [r5, #0]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d845      	bhi.n	80044a4 <updateStatusDisplay+0xc0>
 8004418:	e8df f003 	tbb	[pc, r3]
 800441c:	2e251204 	.word	0x2e251204
 8004420:	3c37      	.short	0x3c37
 8004422:	40          	.byte	0x40
 8004423:	00          	.byte	0x00
	case (0):
		if (status_mask >> 0 & 0x01) {
 8004424:	07e3      	lsls	r3, r4, #31
 8004426:	d53d      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8004428:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
		}
		break;
	case (5):
		if (status_mask >> 5 & 0x01) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800442a:	2101      	movs	r1, #1
 800442c:	481f      	ldr	r0, [pc, #124]	; (80044ac <updateStatusDisplay+0xc8>)
 800442e:	f7fc fc6b 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004432:	2200      	movs	r2, #0
		}
		break;
	case (6):
		if (status_mask >> 6 & 0x01) {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004434:	2102      	movs	r1, #2
 8004436:	481d      	ldr	r0, [pc, #116]	; (80044ac <updateStatusDisplay+0xc8>)
 8004438:	f7fc fc66 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800443c:	2201      	movs	r2, #1
 800443e:	e00c      	b.n	800445a <updateStatusDisplay+0x76>
		if (status_mask >> 1 & 0x01) {
 8004440:	07a5      	lsls	r5, r4, #30
 8004442:	d52f      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8004444:	2201      	movs	r2, #1
 8004446:	4611      	mov	r1, r2
 8004448:	4818      	ldr	r0, [pc, #96]	; (80044ac <updateStatusDisplay+0xc8>)
 800444a:	f7fc fc5d 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800444e:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004450:	2102      	movs	r1, #2
 8004452:	4816      	ldr	r0, [pc, #88]	; (80044ac <updateStatusDisplay+0xc8>)
 8004454:	f7fc fc58 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8004458:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800445a:	2104      	movs	r1, #4
 800445c:	4813      	ldr	r0, [pc, #76]	; (80044ac <updateStatusDisplay+0xc8>)
		break;

	}

	return;
}
 800445e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8004462:	f7fc bc51 	b.w	8000d08 <HAL_GPIO_WritePin>
		if (status_mask >> 2 & 0x01) {
 8004466:	0764      	lsls	r4, r4, #29
 8004468:	d51c      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800446a:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800446c:	2101      	movs	r1, #1
 800446e:	480f      	ldr	r0, [pc, #60]	; (80044ac <updateStatusDisplay+0xc8>)
 8004470:	f7fc fc4a 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004474:	2201      	movs	r2, #1
 8004476:	e7dd      	b.n	8004434 <updateStatusDisplay+0x50>
		if (status_mask >> 3 & 0x01) {
 8004478:	0720      	lsls	r0, r4, #28
 800447a:	d513      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800447c:	2200      	movs	r2, #0
 800447e:	2101      	movs	r1, #1
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8004480:	480a      	ldr	r0, [pc, #40]	; (80044ac <updateStatusDisplay+0xc8>)
 8004482:	f7fc fc41 	bl	8000d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004486:	2201      	movs	r2, #1
 8004488:	e7e2      	b.n	8004450 <updateStatusDisplay+0x6c>
		if (status_mask >> 4 & 0x01) {
 800448a:	06e1      	lsls	r1, r4, #27
 800448c:	d50a      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800448e:	2201      	movs	r2, #1
 8004490:	4611      	mov	r1, r2
 8004492:	e7f5      	b.n	8004480 <updateStatusDisplay+0x9c>
		if (status_mask >> 5 & 0x01) {
 8004494:	06a2      	lsls	r2, r4, #26
 8004496:	d505      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	e7c6      	b.n	800442a <updateStatusDisplay+0x46>
		if (status_mask >> 6 & 0x01) {
 800449c:	0663      	lsls	r3, r4, #25
 800449e:	d501      	bpl.n	80044a4 <updateStatusDisplay+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80044a0:	2200      	movs	r2, #0
 80044a2:	e7e3      	b.n	800446c <updateStatusDisplay+0x88>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	20003d76 	.word	0x20003d76
 80044ac:	40020400 	.word	0x40020400

080044b0 <StartDisplayTask>:
void StartDisplayTask(void const * argument) {
 80044b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t green_mask = 0;
 80044b4:	2400      	movs	r4, #0
		if (uxQueueMessagesWaiting(xDisplayQueue) > 0) {
 80044b6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004518 <StartDisplayTask+0x68>
	uint32_t red_mask = 0;
 80044ba:	4626      	mov	r6, r4
	uint32_t digit_val = 0;
 80044bc:	4625      	mov	r5, r4
	uint32_t status_mask = 0;
 80044be:	4627      	mov	r7, r4
		if (uxQueueMessagesWaiting(xDisplayQueue) > 0) {
 80044c0:	f8d8 0000 	ldr.w	r0, [r8]
 80044c4:	f7fe ff34 	bl	8003330 <uxQueueMessagesWaiting>
 80044c8:	b190      	cbz	r0, 80044f0 <StartDisplayTask+0x40>
			xStatus = xQueueReceive(xDisplayQueue, &displayMessage, 0);
 80044ca:	2300      	movs	r3, #0
 80044cc:	461a      	mov	r2, r3
 80044ce:	4669      	mov	r1, sp
 80044d0:	f8d8 0000 	ldr.w	r0, [r8]
 80044d4:	f7fe fe70 	bl	80031b8 <xQueueGenericReceive>
			if (xStatus == pdPASS) {
 80044d8:	2801      	cmp	r0, #1
 80044da:	d109      	bne.n	80044f0 <StartDisplayTask+0x40>
				switch (displayMessage.displayDestination) {
 80044dc:	f89d 3000 	ldrb.w	r3, [sp]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d804      	bhi.n	80044f0 <StartDisplayTask+0x40>
 80044e6:	e8df f003 	tbb	[pc, r3]
 80044ea:	1113      	.short	0x1113
 80044ec:	0215      	.short	0x0215
					status_mask = displayMessage.val;
 80044ee:	9f01      	ldr	r7, [sp, #4]
		updateStatusDisplay(status_mask);
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ff77 	bl	80043e4 <updateStatusDisplay>
		updateRgDisplay(red_mask, green_mask);
 80044f6:	4621      	mov	r1, r4
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7ff fdd7 	bl	80040ac <updateRgDisplay>
		updateCharacterDisplay(digit_val);
 80044fe:	4628      	mov	r0, r5
 8004500:	f7ff fd4c 	bl	8003f9c <updateCharacterDisplay>
		osDelay(1);
 8004504:	2001      	movs	r0, #1
 8004506:	f7fe fa36 	bl	8002976 <osDelay>
		if (uxQueueMessagesWaiting(xDisplayQueue) > 0) {
 800450a:	e7d9      	b.n	80044c0 <StartDisplayTask+0x10>
					green_mask = displayMessage.val;
 800450c:	9c01      	ldr	r4, [sp, #4]
					break;
 800450e:	e7ef      	b.n	80044f0 <StartDisplayTask+0x40>
					red_mask = displayMessage.val;
 8004510:	9e01      	ldr	r6, [sp, #4]
					break;
 8004512:	e7ed      	b.n	80044f0 <StartDisplayTask+0x40>
					digit_val = displayMessage.val;
 8004514:	9d01      	ldr	r5, [sp, #4]
					break;
 8004516:	e7eb      	b.n	80044f0 <StartDisplayTask+0x40>
 8004518:	20003e64 	.word	0x20003e64

0800451c <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t fup_hold = 0;
	uint8_t fdown_hold = 0;

	/* Infinite loop */

	setVFO(freq);
 8004520:	483c      	ldr	r0, [pc, #240]	; (8004614 <StartDefaultTask+0xf8>)
	displayVal = freq / 100;
	displayMessage.displayDestination = DIGIT_DISPLAY;
	displayMessage.val = displayVal;

	xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 8004522:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800461c <StartDefaultTask+0x100>
	uint32_t oldFreq = 14060000;
 8004526:	4d3b      	ldr	r5, [pc, #236]	; (8004614 <StartDefaultTask+0xf8>)
			freq += 1000;

		if (fdown_hold == 1)
			freq -= 1000;

		if (uxQueueMessagesWaiting(xButtonQueue) > 0) {
 8004528:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8004620 <StartDefaultTask+0x104>
{
 800452c:	b085      	sub	sp, #20
	setVFO(freq);
 800452e:	f7ff fcaf 	bl	8003e90 <setVFO>
	displayMessage.val = displayVal;
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <StartDefaultTask+0xfc>)
 8004534:	9303      	str	r3, [sp, #12]
	xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 8004536:	2300      	movs	r3, #0
 8004538:	461a      	mov	r2, r3
 800453a:	a902      	add	r1, sp, #8
	displayMessage.displayDestination = DIGIT_DISPLAY;
 800453c:	f04f 0903 	mov.w	r9, #3
	xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 8004540:	f8d8 0000 	ldr.w	r0, [r8]
	displayMessage.displayDestination = DIGIT_DISPLAY;
 8004544:	f88d 9008 	strb.w	r9, [sp, #8]
	xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 8004548:	f7fe fd8c 	bl	8003064 <xQueueGenericSend>
	osDelay(100);
 800454c:	2064      	movs	r0, #100	; 0x64
 800454e:	f7fe fa12 	bl	8002976 <osDelay>
	uint8_t fup_hold = 0;
 8004552:	2600      	movs	r6, #0
	uint8_t fdown_hold = 0;
 8004554:	4637      	mov	r7, r6
	uint32_t freq = 14060000;
 8004556:	462c      	mov	r4, r5
				//todo: add an assert or wait
			}

		}

		osDelay(100);
 8004558:	f04f 0b64 	mov.w	fp, #100	; 0x64
		if (uxQueueMessagesWaiting(xButtonQueue) > 0) {
 800455c:	f8da 0000 	ldr.w	r0, [sl]
 8004560:	f7fe fee6 	bl	8003330 <uxQueueMessagesWaiting>
 8004564:	b188      	cbz	r0, 800458a <StartDefaultTask+0x6e>
			xStatus = xQueueReceive(xButtonQueue, &buttonMessage, 0);
 8004566:	2300      	movs	r3, #0
 8004568:	461a      	mov	r2, r3
 800456a:	a901      	add	r1, sp, #4
 800456c:	f8da 0000 	ldr.w	r0, [sl]
 8004570:	f7fe fe22 	bl	80031b8 <xQueueGenericReceive>
			if (xStatus == pdPASS) {
 8004574:	2801      	cmp	r0, #1
 8004576:	d108      	bne.n	800458a <StartDefaultTask+0x6e>
				if (buttonMessage.buttonName == BUTTON4) {
 8004578:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d118      	bne.n	80045b2 <StartDefaultTask+0x96>
					if (buttonMessage.buttonEvent == BUTTON_PRESS)
 8004580:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d108      	bne.n	800459a <StartDefaultTask+0x7e>
						freq += 100;
 8004588:	3464      	adds	r4, #100	; 0x64
		if (freq != oldFreq) {
 800458a:	42ac      	cmp	r4, r5
 800458c:	d122      	bne.n	80045d4 <StartDefaultTask+0xb8>
		osDelay(100);
 800458e:	2064      	movs	r0, #100	; 0x64
 8004590:	f7fe f9f1 	bl	8002976 <osDelay>
		if (fup_hold == 1)
 8004594:	bbae      	cbnz	r6, 8004602 <StartDefaultTask+0xe6>
 8004596:	4625      	mov	r5, r4
 8004598:	e037      	b.n	800460a <StartDefaultTask+0xee>
					if (buttonMessage.buttonEvent == BUTTON_HOLD)
 800459a:	2b03      	cmp	r3, #3
 800459c:	d02c      	beq.n	80045f8 <StartDefaultTask+0xdc>
					if (buttonMessage.buttonEvent == BUTTON_RELEASE)
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d1f3      	bne.n	800458a <StartDefaultTask+0x6e>
		if (freq != oldFreq) {
 80045a2:	42ac      	cmp	r4, r5
 80045a4:	d126      	bne.n	80045f4 <StartDefaultTask+0xd8>
		osDelay(100);
 80045a6:	2064      	movs	r0, #100	; 0x64
 80045a8:	f7fe f9e5 	bl	8002976 <osDelay>
 80045ac:	4625      	mov	r5, r4
						fup_hold = 0;
 80045ae:	2600      	movs	r6, #0
 80045b0:	e02b      	b.n	800460a <StartDefaultTask+0xee>
				if (buttonMessage.buttonName == BUTTON6) {
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d1e9      	bne.n	800458a <StartDefaultTask+0x6e>
					if (buttonMessage.buttonEvent == BUTTON_PRESS)
 80045b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <StartDefaultTask+0xa6>
						freq -= 100;
 80045be:	3c64      	subs	r4, #100	; 0x64
 80045c0:	e7e3      	b.n	800458a <StartDefaultTask+0x6e>
					if (buttonMessage.buttonEvent == BUTTON_HOLD)
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d003      	beq.n	80045ce <StartDefaultTask+0xb2>
						fdown_hold = 0;
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	bf08      	it	eq
 80045ca:	2700      	moveq	r7, #0
 80045cc:	e7dd      	b.n	800458a <StartDefaultTask+0x6e>
						fdown_hold = 1;
 80045ce:	4607      	mov	r7, r0
 80045d0:	e7db      	b.n	800458a <StartDefaultTask+0x6e>
						fup_hold = 1;
 80045d2:	4606      	mov	r6, r0
			setVFO(freq);
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7ff fc5b 	bl	8003e90 <setVFO>
			displayVal = freq / 100;
 80045da:	fbb4 f3fb 	udiv	r3, r4, fp
			displayMessage.val = displayVal;
 80045de:	9303      	str	r3, [sp, #12]
			xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 80045e0:	2300      	movs	r3, #0
 80045e2:	461a      	mov	r2, r3
 80045e4:	a902      	add	r1, sp, #8
 80045e6:	f8d8 0000 	ldr.w	r0, [r8]
			displayMessage.displayDestination = DIGIT_DISPLAY;
 80045ea:	f88d 9008 	strb.w	r9, [sp, #8]
			xStatus = xQueueSendToBack(xDisplayQueue, &displayMessage, 0);
 80045ee:	f7fe fd39 	bl	8003064 <xQueueGenericSend>
 80045f2:	e7cc      	b.n	800458e <StartDefaultTask+0x72>
						fup_hold = 0;
 80045f4:	2600      	movs	r6, #0
 80045f6:	e7ed      	b.n	80045d4 <StartDefaultTask+0xb8>
		if (freq != oldFreq) {
 80045f8:	42ac      	cmp	r4, r5
 80045fa:	d1ea      	bne.n	80045d2 <StartDefaultTask+0xb6>
		osDelay(100);
 80045fc:	2064      	movs	r0, #100	; 0x64
 80045fe:	f7fe f9ba 	bl	8002976 <osDelay>
			freq += 1000;
 8004602:	4625      	mov	r5, r4
 8004604:	2601      	movs	r6, #1
 8004606:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		if (fdown_hold == 1)
 800460a:	2f01      	cmp	r7, #1
			freq -= 1000;
 800460c:	bf08      	it	eq
 800460e:	f5a4 747a 	subeq.w	r4, r4, #1000	; 0x3e8
 8004612:	e7a3      	b.n	800455c <StartDefaultTask+0x40>
 8004614:	00d689e0 	.word	0x00d689e0
 8004618:	00022538 	.word	0x00022538
 800461c:	20003e64 	.word	0x20003e64
 8004620:	20003e60 	.word	0x20003e60

08004624 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8004624:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004626:	4c1b      	ldr	r4, [pc, #108]	; (8004694 <MX_FREERTOS_Init+0x70>)
 8004628:	4626      	mov	r6, r4
 800462a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800462c:	b090      	sub	sp, #64	; 0x40
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800462e:	ad01      	add	r5, sp, #4
 8004630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004636:	2100      	movs	r1, #0
 8004638:	a801      	add	r0, sp, #4
 800463a:	f7fe f984 	bl	8002946 <osThreadCreate>
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <MX_FREERTOS_Init+0x74>)
	osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8004640:	f104 0614 	add.w	r6, r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004644:	6018      	str	r0, [r3, #0]
	osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8004646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004648:	ad06      	add	r5, sp, #24
 800464a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	602b      	str	r3, [r5, #0]
	displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8004650:	2100      	movs	r1, #0
 8004652:	a806      	add	r0, sp, #24
 8004654:	f7fe f977 	bl	8002946 <osThreadCreate>
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <MX_FREERTOS_Init+0x78>)
	osThreadDef(buttonTask, StartButtonTask, osPriorityNormal, 0, 128);
 800465a:	3428      	adds	r4, #40	; 0x28
	displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 800465c:	6018      	str	r0, [r3, #0]
	osThreadDef(buttonTask, StartButtonTask, osPriorityNormal, 0, 128);
 800465e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004660:	ad0b      	add	r5, sp, #44	; 0x2c
 8004662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	602b      	str	r3, [r5, #0]
	buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8004668:	2100      	movs	r1, #0
 800466a:	a80b      	add	r0, sp, #44	; 0x2c
 800466c:	f7fe f96b 	bl	8002946 <osThreadCreate>
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <MX_FREERTOS_Init+0x7c>)
	xDisplayQueue = xQueueCreate(10, sizeof(displayMessage_t));
 8004672:	2200      	movs	r2, #0
	buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8004674:	6018      	str	r0, [r3, #0]
	xDisplayQueue = xQueueCreate(10, sizeof(displayMessage_t));
 8004676:	2108      	movs	r1, #8
 8004678:	200a      	movs	r0, #10
 800467a:	f7fe fcd1 	bl	8003020 <xQueueGenericCreate>
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <MX_FREERTOS_Init+0x80>)
	xButtonQueue = xQueueCreate(30, sizeof(buttonMessage_t));
 8004680:	2200      	movs	r2, #0
	xDisplayQueue = xQueueCreate(10, sizeof(displayMessage_t));
 8004682:	6018      	str	r0, [r3, #0]
	xButtonQueue = xQueueCreate(30, sizeof(buttonMessage_t));
 8004684:	2102      	movs	r1, #2
 8004686:	201e      	movs	r0, #30
 8004688:	f7fe fcca 	bl	8003020 <xQueueGenericCreate>
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <MX_FREERTOS_Init+0x84>)
 800468e:	6018      	str	r0, [r3, #0]
}
 8004690:	b010      	add	sp, #64	; 0x40
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	080050c8 	.word	0x080050c8
 8004698:	20003e54 	.word	0x20003e54
 800469c:	20003e58 	.word	0x20003e58
 80046a0:	20003e5c 	.word	0x20003e5c
 80046a4:	20003e64 	.word	0x20003e64
 80046a8:	20003e60 	.word	0x20003e60

080046ac <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046b2:	2400      	movs	r4, #0
 80046b4:	4b79      	ldr	r3, [pc, #484]	; (800489c <MX_GPIO_Init+0x1f0>)
 80046b6:	9401      	str	r4, [sp, #4]
 80046b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 80046ba:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80048a8 <MX_GPIO_Init+0x1fc>
                          |GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 80046be:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80048ac <MX_GPIO_Init+0x200>
                          |DDS_DATA_Pin|DDS_FQ_UD_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80046c2:	4f77      	ldr	r7, [pc, #476]	; (80048a0 <MX_GPIO_Init+0x1f4>)
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80046c4:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80048b0 <MX_GPIO_Init+0x204>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DDS_CLK_Pin|DDS_RESET_Pin, GPIO_PIN_RESET);
 80046c8:	4e76      	ldr	r6, [pc, #472]	; (80048a4 <MX_GPIO_Init+0x1f8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046ca:	f042 0210 	orr.w	r2, r2, #16
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	f002 0210 	and.w	r2, r2, #16
 80046d6:	9201      	str	r2, [sp, #4]
 80046d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046da:	9402      	str	r4, [sp, #8]
 80046dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046de:	f042 0204 	orr.w	r2, r2, #4
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
 80046e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e6:	f002 0204 	and.w	r2, r2, #4
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046ee:	9403      	str	r4, [sp, #12]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046fe:	9203      	str	r2, [sp, #12]
 8004700:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	9404      	str	r4, [sp, #16]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
 800470c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470e:	f002 0201 	and.w	r2, r2, #1
 8004712:	9204      	str	r2, [sp, #16]
 8004714:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	9405      	str	r4, [sp, #20]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	f042 0202 	orr.w	r2, r2, #2
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	f002 0202 	and.w	r2, r2, #2
 8004726:	9205      	str	r2, [sp, #20]
 8004728:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800472a:	9406      	str	r4, [sp, #24]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 800473c:	4622      	mov	r2, r4
 800473e:	4648      	mov	r0, r9
 8004740:	f242 1133 	movw	r1, #8499	; 0x2133
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004744:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8004746:	f7fc fadf 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 800474a:	4622      	mov	r2, r4
 800474c:	4640      	mov	r0, r8
 800474e:	f248 2137 	movw	r1, #33335	; 0x8237
 8004752:	f7fc fad9 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8004756:	4622      	mov	r2, r4
 8004758:	4638      	mov	r0, r7
 800475a:	f64f 7181 	movw	r1, #65409	; 0xff81
 800475e:	f7fc fad3 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004762:	4622      	mov	r2, r4
 8004764:	4650      	mov	r0, sl
 8004766:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800476a:	f7fc facd 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DDS_CLK_Pin|DDS_RESET_Pin, GPIO_PIN_RESET);
 800476e:	4622      	mov	r2, r4
 8004770:	4630      	mov	r0, r6
 8004772:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8004776:	f7fc fac7 	bl	8000d08 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin 
                          |BUTTON6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800477a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin 
 800477c:	237c      	movs	r3, #124	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800477e:	a907      	add	r1, sp, #28
 8004780:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin 
 8004782:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004784:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004786:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004788:	f7fc f966 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC4 
                           PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 800478c:	f242 1333 	movw	r3, #8499	; 0x2133
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004790:	a907      	add	r1, sp, #28
 8004792:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8004794:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004796:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800479c:	f7fc f95c 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 80047a0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 80047a2:	a907      	add	r1, sp, #28
 80047a4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BUTTON5_Pin;
 80047a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047a8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047aa:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON5_GPIO_Port, &GPIO_InitStruct);
 80047ac:	f7fc f954 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB15 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 80047b0:	f248 2307 	movw	r3, #33287	; 0x8207
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b4:	a907      	add	r1, sp, #28
 80047b6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 80047b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ba:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047be:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c0:	f7fc f94a 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80047c4:	f64f 7381 	movw	r3, #65409	; 0xff81
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c8:	a907      	add	r1, sp, #28
 80047ca:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80047cc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ce:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d4:	f7fc f940 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 80047d8:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047dc:	a907      	add	r1, sp, #28
 80047de:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 80047e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f7fc f937 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80047ea:	f643 73ff 	movw	r3, #16383	; 0x3fff
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047ee:	a907      	add	r1, sp, #28
 80047f0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80047f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047fa:	f7fc f92d 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80047fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004802:	a907      	add	r1, sp, #28
 8004804:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004806:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004808:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800480c:	f7fc f924 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004814:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800481a:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800481c:	a907      	add	r1, sp, #28
 800481e:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004820:	930b      	str	r3, [sp, #44]	; 0x2c

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004822:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482e:	f7fc f913 	bl	8000a58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
 8004832:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(DDS_CLK_GPIO_Port, &GPIO_InitStruct);
 8004836:	a907      	add	r1, sp, #28
 8004838:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
 800483a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800483c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004840:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(DDS_CLK_GPIO_Port, &GPIO_InitStruct);
 8004844:	f7fc f908 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004848:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	a907      	add	r1, sp, #28
 800484e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004850:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004852:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004858:	f7fc f8fe 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DDS_RESET_Pin;
 800485c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DDS_RESET_GPIO_Port, &GPIO_InitStruct);
 8004860:	a907      	add	r1, sp, #28
 8004862:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DDS_RESET_Pin;
 8004864:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004866:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(DDS_RESET_GPIO_Port, &GPIO_InitStruct);
 800486c:	f7fc f8f4 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DDS_DATA_Pin|DDS_FQ_UD_Pin;
 8004870:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004872:	a907      	add	r1, sp, #28
 8004874:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = DDS_DATA_Pin|DDS_FQ_UD_Pin;
 8004876:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004878:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004880:	f7fc f8ea 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004884:	a907      	add	r1, sp, #28
 8004886:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004888:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800488c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004890:	f7fc f8e2 	bl	8000a58 <HAL_GPIO_Init>

}
 8004894:	b00c      	add	sp, #48	; 0x30
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40020000 	.word	0x40020000
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40020400 	.word	0x40020400
 80048b0:	40020c00 	.word	0x40020c00

080048b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80048b4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80048b6:	480d      	ldr	r0, [pc, #52]	; (80048ec <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <MX_I2C1_Init+0x3c>)
 80048ba:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80048f8 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80048c2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048c6:	2300      	movs	r3, #0
 80048c8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80048ca:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048cc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048ce:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80048d0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048d2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048d4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048d6:	f7fc fa31 	bl	8000d3c <HAL_I2C_Init>
 80048da:	b128      	cbz	r0, 80048e8 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048dc:	214d      	movs	r1, #77	; 0x4d
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_I2C1_Init+0x40>)
  }

}
 80048e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80048e4:	f000 b9b4 	b.w	8004c50 <_Error_Handler>
 80048e8:	bd08      	pop	{r3, pc}
 80048ea:	bf00      	nop
 80048ec:	20003e68 	.word	0x20003e68
 80048f0:	40005400 	.word	0x40005400
 80048f4:	0800537b 	.word	0x0800537b
 80048f8:	000186a0 	.word	0x000186a0

080048fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80048fc:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80048fe:	480d      	ldr	r0, [pc, #52]	; (8004934 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 100000;
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <MX_I2C2_Init+0x3c>)
 8004902:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004940 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 800490a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800490e:	2300      	movs	r3, #0
 8004910:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004912:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004914:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004916:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004918:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800491a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800491c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800491e:	f7fc fa0d 	bl	8000d3c <HAL_I2C_Init>
 8004922:	b128      	cbz	r0, 8004930 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004924:	2160      	movs	r1, #96	; 0x60
 8004926:	4805      	ldr	r0, [pc, #20]	; (800493c <MX_I2C2_Init+0x40>)
  }

}
 8004928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800492c:	f000 b990 	b.w	8004c50 <_Error_Handler>
 8004930:	bd08      	pop	{r3, pc}
 8004932:	bf00      	nop
 8004934:	20003ebc 	.word	0x20003ebc
 8004938:	40005800 	.word	0x40005800
 800493c:	0800537b 	.word	0x0800537b
 8004940:	000186a0 	.word	0x000186a0

08004944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004944:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8004946:	6803      	ldr	r3, [r0, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <HAL_I2C_MspInit+0x84>)
 800494a:	4293      	cmp	r3, r2
{
 800494c:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 800494e:	d11c      	bne.n	800498a <HAL_I2C_MspInit+0x46>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004950:	23c0      	movs	r3, #192	; 0xc0
 8004952:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004954:	2312      	movs	r3, #18
 8004956:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004958:	2301      	movs	r3, #1
 800495a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004960:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004962:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004964:	4819      	ldr	r0, [pc, #100]	; (80049cc <HAL_I2C_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004966:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004968:	f7fc f876 	bl	8000a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800496c:	2300      	movs	r3, #0
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <HAL_I2C_MspInit+0x8c>)
 8004972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004974:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004984:	b009      	add	sp, #36	; 0x24
 8004986:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 800498a:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <HAL_I2C_MspInit+0x90>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d1f9      	bne.n	8004984 <HAL_I2C_MspInit+0x40>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004990:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004994:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004996:	2312      	movs	r3, #18
 8004998:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499a:	2301      	movs	r3, #1
 800499c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049a4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a6:	4809      	ldr	r0, [pc, #36]	; (80049cc <HAL_I2C_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049aa:	f7fc f855 	bl	8000a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <HAL_I2C_MspInit+0x8c>)
 80049b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	9b02      	ldr	r3, [sp, #8]
}
 80049c6:	e7dd      	b.n	8004984 <HAL_I2C_MspInit+0x40>
 80049c8:	40005400 	.word	0x40005400
 80049cc:	40020400 	.word	0x40020400
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40005800 	.word	0x40005800

080049d8 <MX_I2S2_Init>:

/* I2S2 init function */
void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <MX_I2S2_Init+0x38>)
{
 80049da:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <MX_I2S2_Init+0x3c>)
 80049de:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80049e0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80049e4:	2300      	movs	r3, #0
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80049e6:	6042      	str	r2, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80049e8:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80049ea:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80049ec:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80049ee:	6183      	str	r3, [r0, #24]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80049f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 80049f4:	2301      	movs	r3, #1
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80049f6:	6142      	str	r2, [r0, #20]
  hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 80049f8:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80049fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80049fc:	f7fc fa74 	bl	8000ee8 <HAL_I2S_Init>
 8004a00:	b128      	cbz	r0, 8004a0e <MX_I2S2_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a02:	214d      	movs	r1, #77	; 0x4d
 8004a04:	4804      	ldr	r0, [pc, #16]	; (8004a18 <MX_I2S2_Init+0x40>)
  }

}
 8004a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004a0a:	f000 b921 	b.w	8004c50 <_Error_Handler>
 8004a0e:	bd08      	pop	{r3, pc}
 8004a10:	20003f10 	.word	0x20003f10
 8004a14:	40003800 	.word	0x40003800
 8004a18:	08005388 	.word	0x08005388

08004a1c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{

  hi2s3.Instance = SPI3;
 8004a1c:	480d      	ldr	r0, [pc, #52]	; (8004a54 <MX_I2S3_Init+0x38>)
{
 8004a1e:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <MX_I2S3_Init+0x3c>)
 8004a22:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004a24:	f44f 7200 	mov.w	r2, #512	; 0x200
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004a28:	2300      	movs	r3, #0
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004a2a:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004a2c:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004a2e:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004a30:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004a32:	6183      	str	r3, [r0, #24]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004a34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  hi2s3.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 8004a38:	2301      	movs	r3, #1
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004a3a:	6142      	str	r2, [r0, #20]
  hi2s3.Init.ClockSource = I2S_CLOCK_EXTERNAL;
 8004a3c:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8004a3e:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004a40:	f7fc fa52 	bl	8000ee8 <HAL_I2S_Init>
 8004a44:	b128      	cbz	r0, 8004a52 <MX_I2S3_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a46:	2160      	movs	r1, #96	; 0x60
 8004a48:	4804      	ldr	r0, [pc, #16]	; (8004a5c <MX_I2S3_Init+0x40>)
  }

}
 8004a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004a4e:	f000 b8ff 	b.w	8004c50 <_Error_Handler>
 8004a52:	bd08      	pop	{r3, pc}
 8004a54:	20003f58 	.word	0x20003f58
 8004a58:	40003c00 	.word	0x40003c00
 8004a5c:	08005388 	.word	0x08005388

08004a60 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8004a60:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2sHandle->Instance==SPI2)
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	4a32      	ldr	r2, [pc, #200]	; (8004b30 <HAL_I2S_MspInit+0xd0>)
 8004a66:	4293      	cmp	r3, r2
{
 8004a68:	b088      	sub	sp, #32
  if(i2sHandle->Instance==SPI2)
 8004a6a:	d12f      	bne.n	8004acc <HAL_I2S_MspInit+0x6c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a6c:	2400      	movs	r4, #0
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_I2S_MspInit+0xd4>)
 8004a70:	9401      	str	r4, [sp, #4]
 8004a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a74:	4830      	ldr	r0, [pc, #192]	; (8004b38 <HAL_I2S_MspInit+0xd8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	9405      	str	r4, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a88:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a8a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8c:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a8e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004a92:	2306      	movs	r3, #6
 8004a94:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a96:	2605      	movs	r6, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a9a:	f7fb ffdd 	bl	8000a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004a9e:	2348      	movs	r3, #72	; 0x48
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa0:	a903      	add	r1, sp, #12
 8004aa2:	4825      	ldr	r0, [pc, #148]	; (8004b38 <HAL_I2S_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004aa4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aaa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004aac:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aae:	f7fb ffd3 	bl	8000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004ab2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab6:	4821      	ldr	r0, [pc, #132]	; (8004b3c <HAL_I2S_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004ab8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aba:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004abe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ac0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac4:	f7fb ffc8 	bl	8000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004ac8:	b008      	add	sp, #32
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
  else if(i2sHandle->Instance==SPI3)
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <HAL_I2S_MspInit+0xe0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d1fa      	bne.n	8004ac8 <HAL_I2S_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_I2S_MspInit+0xd4>)
 8004ad6:	9402      	str	r4, [sp, #8]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ada:	481a      	ldr	r0, [pc, #104]	; (8004b44 <HAL_I2S_MspInit+0xe4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004adc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	9405      	str	r4, [sp, #20]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2502      	movs	r5, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004aee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004af2:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004af4:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004af8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004afc:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afe:	f7fb ffab 	bl	8000a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8004b02:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b06:	a903      	add	r1, sp, #12
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <HAL_I2S_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8004b0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b12:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b14:	f7fb ffa0 	bl	8000a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8004b1e:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b24:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8004b26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b28:	a903      	add	r1, sp, #12
 8004b2a:	4803      	ldr	r0, [pc, #12]	; (8004b38 <HAL_I2S_MspInit+0xd8>)
 8004b2c:	e7ca      	b.n	8004ac4 <HAL_I2S_MspInit+0x64>
 8004b2e:	bf00      	nop
 8004b30:	40003800 	.word	0x40003800
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40020800 	.word	0x40020800
 8004b3c:	40020400 	.word	0x40020400
 8004b40:	40003c00 	.word	0x40003c00
 8004b44:	40020000 	.word	0x40020000

08004b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <SystemClock_Config+0xa8>)
 8004b4e:	2100      	movs	r1, #0
 8004b50:	9101      	str	r1, [sp, #4]
 8004b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b64:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <SystemClock_Config+0xac>)
 8004b66:	9102      	str	r1, [sp, #8]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b82:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b88:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b8a:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b8c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b8e:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b90:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b92:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004b94:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b96:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b98:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b9a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004b9c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b9e:	f7fc fc45 	bl	800142c <HAL_RCC_OscConfig>
 8004ba2:	b100      	cbz	r0, 8004ba6 <SystemClock_Config+0x5e>
 8004ba4:	e7fe      	b.n	8004ba4 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ba6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004baa:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bac:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bae:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004bb4:	2105      	movs	r1, #5
 8004bb6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bb8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bba:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bbc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004bbe:	f7fc fe5b 	bl	8001878 <HAL_RCC_ClockConfig>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	b100      	cbz	r0, 8004bc8 <SystemClock_Config+0x80>
 8004bc6:	e7fe      	b.n	8004bc6 <SystemClock_Config+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004bc8:	f7fc ff4a 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8004bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bd4:	f7fb ff12 	bl	80009fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7fb ff25 	bl	8000a28 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004bde:	4622      	mov	r2, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004be6:	f7fb feb1 	bl	800094c <HAL_NVIC_SetPriority>
}
 8004bea:	b014      	add	sp, #80	; 0x50
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000

08004bf8 <main>:
{
 8004bf8:	b508      	push	{r3, lr}
  HAL_Init();
 8004bfa:	f7fb fc71 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8004bfe:	f7ff ffa3 	bl	8004b48 <SystemClock_Config>
  MX_GPIO_Init();
 8004c02:	f7ff fd53 	bl	80046ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8004c06:	f7fe ffd3 	bl	8003bb0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004c0a:	f7ff fe53 	bl	80048b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004c0e:	f7ff fe75 	bl	80048fc <MX_I2C2_Init>
  MX_ADC2_Init();
 8004c12:	f7fe ffff 	bl	8003c14 <MX_ADC2_Init>
  MX_I2S2_Init();
 8004c16:	f7ff fedf 	bl	80049d8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8004c1a:	f7ff feff 	bl	8004a1c <MX_I2S3_Init>
  MX_SPI1_Init();
 8004c1e:	f000 f819 	bl	8004c54 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004c22:	f000 f98f 	bl	8004f44 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8004c26:	f7ff f827 	bl	8003c78 <MX_ADC3_Init>
  MX_TIM5_Init();
 8004c2a:	f000 f931 	bl	8004e90 <MX_TIM5_Init>
  MX_TIM2_Init();
 8004c2e:	f000 f8ff 	bl	8004e30 <MX_TIM2_Init>
  MX_FREERTOS_Init();
 8004c32:	f7ff fcf7 	bl	8004624 <MX_FREERTOS_Init>
  osKernelStart();
 8004c36:	f7fd fe81 	bl	800293c <osKernelStart>
 8004c3a:	e7fe      	b.n	8004c3a <main+0x42>

08004c3c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8004c3c:	6802      	ldr	r2, [r0, #0]
 8004c3e:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004c44:	f7fb bc66 	b.w	8000514 <HAL_IncTick>
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40000400 	.word	0x40000400

08004c50 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004c50:	e7fe      	b.n	8004c50 <_Error_Handler>

08004c52 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8004c52:	4770      	bx	lr

08004c54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004c54:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8004c56:	480f      	ldr	r0, [pc, #60]	; (8004c94 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <MX_SPI1_Init+0x44>)
 8004c5a:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8004c5e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c62:	2300      	movs	r3, #0
 8004c64:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c66:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c68:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c6a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c70:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c72:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c74:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c76:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c78:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c7a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004c7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c7e:	f7fc ff61 	bl	8001b44 <HAL_SPI_Init>
 8004c82:	b128      	cbz	r0, 8004c90 <MX_SPI1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c84:	214f      	movs	r1, #79	; 0x4f
 8004c86:	4805      	ldr	r0, [pc, #20]	; (8004c9c <MX_SPI1_Init+0x48>)
  }

}
 8004c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004c8c:	f7ff bfe0 	b.w	8004c50 <_Error_Handler>
 8004c90:	bd08      	pop	{r3, pc}
 8004c92:	bf00      	nop
 8004c94:	20003fa0 	.word	0x20003fa0
 8004c98:	40013000 	.word	0x40013000
 8004c9c:	08005395 	.word	0x08005395

08004ca0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8004ca2:	6802      	ldr	r2, [r0, #0]
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_SPI_MspInit+0x44>)
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d119      	bne.n	8004cde <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004caa:	2100      	movs	r1, #0
 8004cac:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004cb0:	9100      	str	r1, [sp, #0]
 8004cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb4:	480c      	ldr	r0, [pc, #48]	; (8004ce8 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004cc8:	23e0      	movs	r3, #224	; 0xe0
 8004cca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f7fb febd 	bl	8000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004cde:	b007      	add	sp, #28
 8004ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ce4:	40013000 	.word	0x40013000
 8004ce8:	40020000 	.word	0x40020000

08004cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cee:	2003      	movs	r0, #3
 8004cf0:	f7fb fe0e 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	f06f 000b 	mvn.w	r0, #11
 8004cfc:	f7fb fe26 	bl	800094c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	4611      	mov	r1, r2
 8004d04:	f06f 000a 	mvn.w	r0, #10
 8004d08:	f7fb fe20 	bl	800094c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4611      	mov	r1, r2
 8004d10:	f06f 0009 	mvn.w	r0, #9
 8004d14:	f7fb fe1a 	bl	800094c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	f06f 0004 	mvn.w	r0, #4
 8004d20:	f7fb fe14 	bl	800094c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004d24:	2200      	movs	r2, #0
 8004d26:	4611      	mov	r1, r2
 8004d28:	f06f 0003 	mvn.w	r0, #3
 8004d2c:	f7fb fe0e 	bl	800094c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d30:	2200      	movs	r2, #0
 8004d32:	210f      	movs	r1, #15
 8004d34:	f06f 0001 	mvn.w	r0, #1
 8004d38:	f7fb fe08 	bl	800094c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	210f      	movs	r1, #15
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004d48:	f7fb be00 	b.w	800094c <HAL_NVIC_SetPriority>

08004d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d4c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8004d4e:	4601      	mov	r1, r0
{
 8004d50:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8004d52:	2200      	movs	r2, #0
 8004d54:	201d      	movs	r0, #29
 8004d56:	f7fb fdf9 	bl	800094c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8004d5a:	201d      	movs	r0, #29
 8004d5c:	f7fb fe38 	bl	80009d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8004d60:	2500      	movs	r5, #0
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_InitTick+0x6c>)
 8004d64:	9502      	str	r5, [sp, #8]
 8004d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8004d68:	4c14      	ldr	r4, [pc, #80]	; (8004dbc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8004d6a:	f042 0202 	orr.w	r2, r2, #2
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d78:	a901      	add	r1, sp, #4
 8004d7a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8004d7c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d7e:	f7fc fe95 	bl	8001aac <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d82:	f7fc fe73 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8004d86:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <HAL_InitTick+0x74>)
 8004d88:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8004d8a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004d8e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d90:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_InitTick+0x78>)
 8004d94:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d98:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 8004d9a:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8004d9c:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8004d9e:	6125      	str	r5, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8004da2:	f7fd fb2d 	bl	8002400 <HAL_TIM_Base_Init>
 8004da6:	b920      	cbnz	r0, 8004db2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7fd f973 	bl	8002094 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004dae:	b009      	add	sp, #36	; 0x24
 8004db0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
 8004db4:	e7fb      	b.n	8004dae <HAL_InitTick+0x62>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	20003ff8 	.word	0x20003ff8
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	000f4240 	.word	0x000f4240

08004dc8 <NMI_Handler>:
 8004dc8:	4770      	bx	lr

08004dca <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004dca:	e7fe      	b.n	8004dca <HardFault_Handler>

08004dcc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004dcc:	e7fe      	b.n	8004dcc <MemManage_Handler>

08004dce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004dce:	e7fe      	b.n	8004dce <BusFault_Handler>

08004dd0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004dd0:	e7fe      	b.n	8004dd0 <UsageFault_Handler>

08004dd2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004dd2:	4770      	bx	lr

08004dd4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004dd4:	f7fd bdd7 	b.w	8002986 <osSystickHandler>

08004dd8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <TIM3_IRQHandler+0x8>)
 8004dda:	f7fd ba0b 	b.w	80021f4 <HAL_TIM_IRQHandler>
 8004dde:	bf00      	nop
 8004de0:	20003ff8 	.word	0x20003ff8

08004de4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004de4:	490f      	ldr	r1, [pc, #60]	; (8004e24 <SystemInit+0x40>)
 8004de6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004dea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <SystemInit+0x44>)
 8004df4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004df6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004dfe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004e06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <SystemInit+0x48>)
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e16:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e18:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e1e:	608b      	str	r3, [r1, #8]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000ed00 	.word	0xe000ed00
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	24003010 	.word	0x24003010

08004e30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e30:	b510      	push	{r4, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8004e32:	4815      	ldr	r0, [pc, #84]	; (8004e88 <MX_TIM2_Init+0x58>)
  htim2.Init.Prescaler = 0;
 8004e34:	2400      	movs	r4, #0
{
 8004e36:	b088      	sub	sp, #32
  htim2.Init.Prescaler = 0;
 8004e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e3c:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e40:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8004e42:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e44:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e46:	f7fd fadb 	bl	8002400 <HAL_TIM_Base_Init>
 8004e4a:	b118      	cbz	r0, 8004e54 <MX_TIM2_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e4c:	2149      	movs	r1, #73	; 0x49
 8004e4e:	480f      	ldr	r0, [pc, #60]	; (8004e8c <MX_TIM2_Init+0x5c>)
 8004e50:	f7ff fefe 	bl	8004c50 <_Error_Handler>
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8004e54:	a903      	add	r1, sp, #12
 8004e56:	480c      	ldr	r0, [pc, #48]	; (8004e88 <MX_TIM2_Init+0x58>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004e58:	9403      	str	r4, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004e5a:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8004e5c:	f7fd f968 	bl	8002130 <HAL_TIM_SlaveConfigSynchronization>
 8004e60:	b118      	cbz	r0, 8004e6a <MX_TIM2_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e62:	2150      	movs	r1, #80	; 0x50
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <MX_TIM2_Init+0x5c>)
 8004e66:	f7ff fef3 	bl	8004c50 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e6a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e6c:	a901      	add	r1, sp, #4
 8004e6e:	4806      	ldr	r0, [pc, #24]	; (8004e88 <MX_TIM2_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e70:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e72:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e74:	f7fd fb38 	bl	80024e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e78:	b118      	cbz	r0, 8004e82 <MX_TIM2_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e7a:	2157      	movs	r1, #87	; 0x57
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <MX_TIM2_Init+0x5c>)
 8004e7e:	f7ff fee7 	bl	8004c50 <_Error_Handler>
  }

}
 8004e82:	b008      	add	sp, #32
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop
 8004e88:	20004070 	.word	0x20004070
 8004e8c:	080053ba 	.word	0x080053ba

08004e90 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004e90:	b510      	push	{r4, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 8004e92:	4815      	ldr	r0, [pc, #84]	; (8004ee8 <MX_TIM5_Init+0x58>)
 8004e94:	4b15      	ldr	r3, [pc, #84]	; (8004eec <MX_TIM5_Init+0x5c>)
 8004e96:	6003      	str	r3, [r0, #0]
{
 8004e98:	b088      	sub	sp, #32
  htim5.Init.Prescaler = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 8004ea0:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004ea4:	f7fd faac 	bl	8002400 <HAL_TIM_Base_Init>
 8004ea8:	b118      	cbz	r0, 8004eb2 <MX_TIM5_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004eaa:	2168      	movs	r1, #104	; 0x68
 8004eac:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <MX_TIM5_Init+0x60>)
 8004eae:	f7ff fecf 	bl	8004c50 <_Error_Handler>
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004eb2:	2307      	movs	r3, #7
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004eb4:	2400      	movs	r4, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 8004eb6:	a903      	add	r1, sp, #12
 8004eb8:	480b      	ldr	r0, [pc, #44]	; (8004ee8 <MX_TIM5_Init+0x58>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004eba:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004ebc:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 8004ebe:	f7fd f937 	bl	8002130 <HAL_TIM_SlaveConfigSynchronization>
 8004ec2:	b118      	cbz	r0, 8004ecc <MX_TIM5_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ec4:	216f      	movs	r1, #111	; 0x6f
 8004ec6:	480a      	ldr	r0, [pc, #40]	; (8004ef0 <MX_TIM5_Init+0x60>)
 8004ec8:	f7ff fec2 	bl	8004c50 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ecc:	a901      	add	r1, sp, #4
 8004ece:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <MX_TIM5_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ed0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ed2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ed4:	f7fd fb08 	bl	80024e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed8:	b118      	cbz	r0, 8004ee2 <MX_TIM5_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004eda:	2176      	movs	r1, #118	; 0x76
 8004edc:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <MX_TIM5_Init+0x60>)
 8004ede:	f7ff feb7 	bl	8004c50 <_Error_Handler>
  }

}
 8004ee2:	b008      	add	sp, #32
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20004034 	.word	0x20004034
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	080053ba 	.word	0x080053ba

08004ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8004ef4:	6803      	ldr	r3, [r0, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8004efa:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8004efc:	d10d      	bne.n	8004f1a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_TIM_Base_MspInit+0x48>)
 8004f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004f16:	b002      	add	sp, #8
 8004f18:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM5)
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_TIM_Base_MspInit+0x4c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d1fa      	bne.n	8004f16 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f20:	2300      	movs	r3, #0
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_TIM_Base_MspInit+0x48>)
 8004f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	9b01      	ldr	r3, [sp, #4]
}
 8004f38:	e7ed      	b.n	8004f16 <HAL_TIM_Base_MspInit+0x22>
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40000c00 	.word	0x40000c00

08004f44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f44:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004f46:	480c      	ldr	r0, [pc, #48]	; (8004f78 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <MX_USART1_UART_Init+0x38>)
 8004f4a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004f4e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f52:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f54:	2300      	movs	r3, #0
 8004f56:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f58:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f5a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f5c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f5e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f60:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f62:	f7fd fc69 	bl	8002838 <HAL_UART_Init>
 8004f66:	b128      	cbz	r0, 8004f74 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004f68:	214c      	movs	r1, #76	; 0x4c
 8004f6a:	4805      	ldr	r0, [pc, #20]	; (8004f80 <MX_USART1_UART_Init+0x3c>)
  }

}
 8004f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004f70:	f7ff be6e 	b.w	8004c50 <_Error_Handler>
 8004f74:	bd08      	pop	{r3, pc}
 8004f76:	bf00      	nop
 8004f78:	200040ac 	.word	0x200040ac
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	080053c7 	.word	0x080053c7

08004f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8004f86:	6802      	ldr	r2, [r0, #0]
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_UART_MspInit+0x48>)
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d11a      	bne.n	8004fc4 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f94:	480f      	ldr	r0, [pc, #60]	; (8004fd4 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f98:	f042 0210 	orr.w	r2, r2, #16
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fa8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fba:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc0:	f7fb fd4a 	bl	8000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004fc4:	b007      	add	sp, #28
 8004fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fca:	bf00      	nop
 8004fcc:	40011000 	.word	0x40011000
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40020000 	.word	0x40020000

08004fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fde:	e003      	b.n	8004fe8 <LoopCopyDataInit>

08004fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fe6:	3104      	adds	r1, #4

08004fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fe8:	480b      	ldr	r0, [pc, #44]	; (8005018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ff0:	d3f6      	bcc.n	8004fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ff2:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ff4:	e002      	b.n	8004ffc <LoopFillZerobss>

08004ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ff8:	f842 3b04 	str.w	r3, [r2], #4

08004ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005000:	d3f9      	bcc.n	8004ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005002:	f7ff feef 	bl	8004de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005006:	f000 f811 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800500a:	f7ff fdf5 	bl	8004bf8 <main>
  bx  lr    
 800500e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005014:	080053e8 	.word	0x080053e8
  ldr  r0, =_sdata
 8005018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800501c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005020:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005024:	200040ec 	.word	0x200040ec

08005028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005028:	e7fe      	b.n	8005028 <ADC_IRQHandler>
	...

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0d      	ldr	r6, [pc, #52]	; (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005032:	1ba4      	subs	r4, r4, r6
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2500      	movs	r5, #0
 8005038:	42a5      	cmp	r5, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4e0b      	ldr	r6, [pc, #44]	; (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	; (8005070 <__libc_init_array+0x44>)
 8005040:	f000 f824 	bl	800508c <_init>
 8005044:	1ba4      	subs	r4, r4, r6
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2500      	movs	r5, #0
 800504a:	42a5      	cmp	r5, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005054:	4798      	blx	r3
 8005056:	3501      	adds	r5, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800505e:	4798      	blx	r3
 8005060:	3501      	adds	r5, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	080053e0 	.word	0x080053e0
 8005068:	080053e0 	.word	0x080053e0
 800506c:	080053e0 	.word	0x080053e0
 8005070:	080053e4 	.word	0x080053e4

08005074 <memcpy>:
 8005074:	b510      	push	{r4, lr}
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	440a      	add	r2, r1
 800507a:	4291      	cmp	r1, r2
 800507c:	d100      	bne.n	8005080 <memcpy+0xc>
 800507e:	bd10      	pop	{r4, pc}
 8005080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005088:	e7f7      	b.n	800507a <memcpy+0x6>
	...

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
