
hamfam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000210c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800229c  0800229c  0001229c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          00000118  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000120  20000120  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001befc  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000032ad  00000000  00000000  0003bf34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000076d4  00000000  00000000  0003f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  000468b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  00047450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000084dd  00000000  00000000  00048250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004fcf  00000000  00000000  0005072d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000556fc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000021e0  00000000  00000000  00055778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002284 	.word	0x08002284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08002284 	.word	0x08002284

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f82f 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f001 fdc6 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f001 fd93 	bl	8002032 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200000e0 	.word	0x200000e0
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000e0 	.word	0x200000e0

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000542:	bf1c      	itt	ne
 8000544:	4b05      	ldrne	r3, [pc, #20]	; (800055c <HAL_Delay+0x24>)
 8000546:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000548:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800054a:	bf18      	it	ne
 800054c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054e:	f7ff ffed 	bl	800052c <HAL_GetTick>
 8000552:	1b40      	subs	r0, r0, r5
 8000554:	4284      	cmp	r4, r0
 8000556:	d8fa      	bhi.n	800054e <HAL_Delay+0x16>
  {
  }
}
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000560:	1ec3      	subs	r3, r0, #3
 8000562:	2b04      	cmp	r3, #4
{
 8000564:	b510      	push	{r4, lr}
 8000566:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000568:	d903      	bls.n	8000572 <HAL_NVIC_SetPriorityGrouping+0x12>
 800056a:	21a2      	movs	r1, #162	; 0xa2
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800056e:	f001 fd5f 	bl	8002030 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000574:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000582:	0224      	lsls	r4, r4, #8
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800058c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800058e:	60d4      	str	r4, [r2, #12]
 8000590:	bd10      	pop	{r4, pc}
 8000592:	bf00      	nop
 8000594:	0800229c 	.word	0x0800229c
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800059c:	2a0f      	cmp	r2, #15
{ 
 800059e:	b570      	push	{r4, r5, r6, lr}
 80005a0:	4604      	mov	r4, r0
 80005a2:	460e      	mov	r6, r1
 80005a4:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005a6:	d903      	bls.n	80005b0 <HAL_NVIC_SetPriority+0x14>
 80005a8:	21ba      	movs	r1, #186	; 0xba
 80005aa:	481a      	ldr	r0, [pc, #104]	; (8000614 <HAL_NVIC_SetPriority+0x78>)
 80005ac:	f001 fd40 	bl	8002030 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80005b0:	2e0f      	cmp	r6, #15
 80005b2:	d903      	bls.n	80005bc <HAL_NVIC_SetPriority+0x20>
 80005b4:	21bb      	movs	r1, #187	; 0xbb
 80005b6:	4817      	ldr	r0, [pc, #92]	; (8000614 <HAL_NVIC_SetPriority+0x78>)
 80005b8:	f001 fd3a 	bl	8002030 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_NVIC_SetPriority+0x7c>)
 80005be:	68d9      	ldr	r1, [r3, #12]
 80005c0:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c4:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	bf28      	it	cs
 80005ce:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	2a06      	cmp	r2, #6
 80005d4:	bf8c      	ite	hi
 80005d6:	3903      	subhi	r1, #3
 80005d8:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005da:	fa00 f203 	lsl.w	r2, r0, r3
 80005de:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e2:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e4:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e6:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e8:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 80005ea:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	ea42 0205 	orr.w	r2, r2, r5
 80005f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfaf      	iteee	ge
 80005f6:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	f004 040f 	andlt.w	r4, r4, #15
 80005fe:	4b07      	ldrlt	r3, [pc, #28]	; (800061c <HAL_NVIC_SetPriority+0x80>)
 8000600:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	bfa5      	ittet	ge
 8000604:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 8000608:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000610:	bd70      	pop	{r4, r5, r6, pc}
 8000612:	bf00      	nop
 8000614:	0800229c 	.word	0x0800229c
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	e000ed14 	.word	0xe000ed14

08000620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000622:	1e04      	subs	r4, r0, #0
 8000624:	da03      	bge.n	800062e <HAL_NVIC_EnableIRQ+0xe>
 8000626:	21ce      	movs	r1, #206	; 0xce
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_NVIC_EnableIRQ+0x24>)
 800062a:	f001 fd01 	bl	8002030 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062e:	0962      	lsrs	r2, r4, #5
 8000630:	2301      	movs	r3, #1
 8000632:	f004 041f 	and.w	r4, r4, #31
 8000636:	fa03 f404 	lsl.w	r4, r3, r4
 800063a:	4b03      	ldr	r3, [pc, #12]	; (8000648 <HAL_NVIC_EnableIRQ+0x28>)
 800063c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	0800229c 	.word	0x0800229c
 8000648:	e000e100 	.word	0xe000e100

0800064c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064c:	3801      	subs	r0, #1
 800064e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000652:	d20a      	bcs.n	800066a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	21f0      	movs	r1, #240	; 0xf0
 800065c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000678:	2804      	cmp	r0, #4
{
 800067a:	b510      	push	{r4, lr}
 800067c:	4c08      	ldr	r4, [pc, #32]	; (80006a0 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800067e:	d00a      	beq.n	8000696 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000680:	b120      	cbz	r0, 800068c <HAL_SYSTICK_CLKSourceConfig+0x14>
 8000682:	f240 11d9 	movw	r1, #473	; 0x1d9
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000688:	f001 fcd2 	bl	8002030 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000692:	6023      	str	r3, [r4, #0]
 8000694:	bd10      	pop	{r4, pc}
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	e7f9      	b.n	8000692 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010
 80006a4:	0800229c 	.word	0x0800229c

080006a8 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80006a8:	4b9c      	ldr	r3, [pc, #624]	; (800091c <HAL_GPIO_Init+0x274>)
 80006aa:	4298      	cmp	r0, r3
{
 80006ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b0:	4604      	mov	r4, r0
 80006b2:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80006b4:	d023      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ba:	4298      	cmp	r0, r3
 80006bc:	d01f      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d01b      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ca:	4298      	cmp	r0, r3
 80006cc:	d017      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006d2:	4298      	cmp	r0, r3
 80006d4:	d013      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006da:	4298      	cmp	r0, r3
 80006dc:	d00f      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d00b      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ea:	4298      	cmp	r0, r3
 80006ec:	d007      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_Init+0x56>
 80006f6:	21c3      	movs	r1, #195	; 0xc3
 80006f8:	4889      	ldr	r0, [pc, #548]	; (8000920 <HAL_GPIO_Init+0x278>)
 80006fa:	f001 fc99 	bl	8002030 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80006fe:	682b      	ldr	r3, [r5, #0]
 8000700:	b29a      	uxth	r2, r3
 8000702:	b112      	cbz	r2, 800070a <HAL_GPIO_Init+0x62>
 8000704:	0c1b      	lsrs	r3, r3, #16
 8000706:	041b      	lsls	r3, r3, #16
 8000708:	b11b      	cbz	r3, 8000712 <HAL_GPIO_Init+0x6a>
 800070a:	21c4      	movs	r1, #196	; 0xc4
 800070c:	4884      	ldr	r0, [pc, #528]	; (8000920 <HAL_GPIO_Init+0x278>)
 800070e:	f001 fc8f 	bl	8002030 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000712:	686b      	ldr	r3, [r5, #4]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d917      	bls.n	8000748 <HAL_GPIO_Init+0xa0>
 8000718:	f1a3 0211 	sub.w	r2, r3, #17
 800071c:	2a01      	cmp	r2, #1
 800071e:	d913      	bls.n	8000748 <HAL_GPIO_Init+0xa0>
 8000720:	4980      	ldr	r1, [pc, #512]	; (8000924 <HAL_GPIO_Init+0x27c>)
 8000722:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000726:	428a      	cmp	r2, r1
 8000728:	d00e      	beq.n	8000748 <HAL_GPIO_Init+0xa0>
 800072a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800072e:	428b      	cmp	r3, r1
 8000730:	d00a      	beq.n	8000748 <HAL_GPIO_Init+0xa0>
 8000732:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000736:	428a      	cmp	r2, r1
 8000738:	d006      	beq.n	8000748 <HAL_GPIO_Init+0xa0>
 800073a:	4a7b      	ldr	r2, [pc, #492]	; (8000928 <HAL_GPIO_Init+0x280>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d003      	beq.n	8000748 <HAL_GPIO_Init+0xa0>
 8000740:	21c5      	movs	r1, #197	; 0xc5
 8000742:	4877      	ldr	r0, [pc, #476]	; (8000920 <HAL_GPIO_Init+0x278>)
 8000744:	f001 fc74 	bl	8002030 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000748:	68ab      	ldr	r3, [r5, #8]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d903      	bls.n	8000756 <HAL_GPIO_Init+0xae>
 800074e:	21c6      	movs	r1, #198	; 0xc6
 8000750:	4873      	ldr	r0, [pc, #460]	; (8000920 <HAL_GPIO_Init+0x278>)
 8000752:	f001 fc6d 	bl	8002030 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000756:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8000930 <HAL_GPIO_Init+0x288>
{
 800075a:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 800075c:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075e:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8000760:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000764:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000768:	454f      	cmp	r7, r9
 800076a:	f040 80c4 	bne.w	80008f6 <HAL_GPIO_Init+0x24e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076e:	686a      	ldr	r2, [r5, #4]
 8000770:	f022 0210 	bic.w	r2, r2, #16
 8000774:	2a02      	cmp	r2, #2
 8000776:	d118      	bne.n	80007aa <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000778:	692a      	ldr	r2, [r5, #16]
 800077a:	2a0d      	cmp	r2, #13
 800077c:	d905      	bls.n	800078a <HAL_GPIO_Init+0xe2>
 800077e:	2a0f      	cmp	r2, #15
 8000780:	d003      	beq.n	800078a <HAL_GPIO_Init+0xe2>
 8000782:	21d7      	movs	r1, #215	; 0xd7
 8000784:	4866      	ldr	r0, [pc, #408]	; (8000920 <HAL_GPIO_Init+0x278>)
 8000786:	f001 fc53 	bl	8002030 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 800078a:	08f1      	lsrs	r1, r6, #3
 800078c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000790:	f006 0207 	and.w	r2, r6, #7
 8000794:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 8000796:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000798:	220f      	movs	r2, #15
 800079a:	4082      	lsls	r2, r0
 800079c:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007a0:	692a      	ldr	r2, [r5, #16]
 80007a2:	4082      	lsls	r2, r0
 80007a4:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007a8:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007aa:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 80007ac:	6820      	ldr	r0, [r4, #0]
 80007ae:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b2:	f04f 0a03 	mov.w	sl, #3
 80007b6:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ba:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007be:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c2:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c6:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ca:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ce:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d0:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d2:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 80007d4:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d6:	d817      	bhi.n	8000808 <HAL_GPIO_Init+0x160>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80007d8:	68ea      	ldr	r2, [r5, #12]
 80007da:	2a03      	cmp	r2, #3
 80007dc:	d903      	bls.n	80007e6 <HAL_GPIO_Init+0x13e>
 80007de:	21ea      	movs	r1, #234	; 0xea
 80007e0:	484f      	ldr	r0, [pc, #316]	; (8000920 <HAL_GPIO_Init+0x278>)
 80007e2:	f001 fc25 	bl	8002030 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 80007e6:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e8:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ea:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ec:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f0:	fa02 f20b 	lsl.w	r2, r2, fp
 80007f4:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 80007f6:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80007f8:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007fe:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000802:	40b3      	lsls	r3, r6
 8000804:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000806:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8000808:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080a:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800080c:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000810:	68ab      	ldr	r3, [r5, #8]
 8000812:	fa03 f30b 	lsl.w	r3, r3, fp
 8000816:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 800081a:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800081c:	00c3      	lsls	r3, r0, #3
 800081e:	d56a      	bpl.n	80008f6 <HAL_GPIO_Init+0x24e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000820:	4a42      	ldr	r2, [pc, #264]	; (800092c <HAL_GPIO_Init+0x284>)
 8000822:	2300      	movs	r3, #0
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000828:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800082c:	6451      	str	r1, [r2, #68]	; 0x44
 800082e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000830:	f026 0103 	bic.w	r1, r6, #3
 8000834:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000838:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800083c:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000840:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000842:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000848:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000850:	220f      	movs	r2, #15
 8000852:	fa02 f20e 	lsl.w	r2, r2, lr
 8000856:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085a:	4a30      	ldr	r2, [pc, #192]	; (800091c <HAL_GPIO_Init+0x274>)
 800085c:	4294      	cmp	r4, r2
 800085e:	d01f      	beq.n	80008a0 <HAL_GPIO_Init+0x1f8>
 8000860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000864:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000868:	429c      	cmp	r4, r3
 800086a:	d04b      	beq.n	8000904 <HAL_GPIO_Init+0x25c>
 800086c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000870:	429c      	cmp	r4, r3
 8000872:	d049      	beq.n	8000908 <HAL_GPIO_Init+0x260>
 8000874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000878:	429c      	cmp	r4, r3
 800087a:	d047      	beq.n	800090c <HAL_GPIO_Init+0x264>
 800087c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000880:	429c      	cmp	r4, r3
 8000882:	d045      	beq.n	8000910 <HAL_GPIO_Init+0x268>
 8000884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000888:	429c      	cmp	r4, r3
 800088a:	d043      	beq.n	8000914 <HAL_GPIO_Init+0x26c>
 800088c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000890:	429c      	cmp	r4, r3
 8000892:	d041      	beq.n	8000918 <HAL_GPIO_Init+0x270>
 8000894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000898:	429c      	cmp	r4, r3
 800089a:	bf14      	ite	ne
 800089c:	2308      	movne	r3, #8
 800089e:	2307      	moveq	r3, #7
 80008a0:	fa03 f30e 	lsl.w	r3, r3, lr
 80008a4:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008a8:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 80008aa:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 80008ae:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b2:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 80008b4:	bf54      	ite	pl
 80008b6:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80008b8:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 80008bc:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 80008c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c4:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 80008c6:	bf54      	ite	pl
 80008c8:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80008ca:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 80008ce:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008d2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008d6:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80008dc:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80008e0:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 80008e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008e8:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 80008ea:	bf54      	ite	pl
 80008ec:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80008ee:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80008f2:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f6:	3601      	adds	r6, #1
 80008f8:	2e10      	cmp	r6, #16
 80008fa:	f47f af2f 	bne.w	800075c <HAL_GPIO_Init+0xb4>
      }
    }
  }
}
 80008fe:	b003      	add	sp, #12
 8000900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000904:	2301      	movs	r3, #1
 8000906:	e7cb      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 8000908:	2302      	movs	r3, #2
 800090a:	e7c9      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 800090c:	2303      	movs	r3, #3
 800090e:	e7c7      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 8000910:	2304      	movs	r3, #4
 8000912:	e7c5      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 8000914:	2305      	movs	r3, #5
 8000916:	e7c3      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 8000918:	2306      	movs	r3, #6
 800091a:	e7c1      	b.n	80008a0 <HAL_GPIO_Init+0x1f8>
 800091c:	40020000 	.word	0x40020000
 8000920:	080022d7 	.word	0x080022d7
 8000924:	10110000 	.word	0x10110000
 8000928:	10220000 	.word	0x10220000
 800092c:	40023800 	.word	0x40023800
 8000930:	40013c00 	.word	0x40013c00

08000934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4605      	mov	r5, r0
 8000938:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800093a:	460c      	mov	r4, r1
 800093c:	b921      	cbnz	r1, 8000948 <HAL_GPIO_WritePin+0x14>
 800093e:	f240 11af 	movw	r1, #431	; 0x1af
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <HAL_GPIO_WritePin+0x30>)
 8000944:	f001 fb74 	bl	8002030 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000948:	2e01      	cmp	r6, #1
 800094a:	d906      	bls.n	800095a <HAL_GPIO_WritePin+0x26>
 800094c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_GPIO_WritePin+0x30>)
 8000952:	f001 fb6d 	bl	8002030 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000956:	61ac      	str	r4, [r5, #24]
 8000958:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 800095a:	2e00      	cmp	r6, #0
 800095c:	d1fb      	bne.n	8000956 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800095e:	0424      	lsls	r4, r4, #16
 8000960:	e7f9      	b.n	8000956 <HAL_GPIO_WritePin+0x22>
 8000962:	bf00      	nop
 8000964:	080022d7 	.word	0x080022d7

08000968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800096c:	4604      	mov	r4, r0
 800096e:	b918      	cbnz	r0, 8000978 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000970:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000972:	b002      	add	sp, #8
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d903      	bls.n	8000986 <HAL_RCC_OscConfig+0x1e>
 800097e:	21f8      	movs	r1, #248	; 0xf8
 8000980:	48a2      	ldr	r0, [pc, #648]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 8000982:	f001 fb55 	bl	8002030 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	07d8      	lsls	r0, r3, #31
 800098a:	d418      	bmi.n	80009be <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	0799      	lsls	r1, r3, #30
 8000990:	d46b      	bmi.n	8000a6a <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	0719      	lsls	r1, r3, #28
 8000996:	f100 80be 	bmi.w	8000b16 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	075a      	lsls	r2, r3, #29
 800099e:	f100 80e4 	bmi.w	8000b6a <HAL_RCC_OscConfig+0x202>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80009a2:	69a3      	ldr	r3, [r4, #24]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d904      	bls.n	80009b2 <HAL_RCC_OscConfig+0x4a>
 80009a8:	f240 11df 	movw	r1, #479	; 0x1df
 80009ac:	4897      	ldr	r0, [pc, #604]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 80009ae:	f001 fb3f 	bl	8002030 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009b2:	69a2      	ldr	r2, [r4, #24]
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8151 	bne.w	8000c5c <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 80009ba:	2000      	movs	r0, #0
 80009bc:	e7d9      	b.n	8000972 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80009be:	6863      	ldr	r3, [r4, #4]
 80009c0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80009c4:	d006      	beq.n	80009d4 <HAL_RCC_OscConfig+0x6c>
 80009c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ca:	d003      	beq.n	80009d4 <HAL_RCC_OscConfig+0x6c>
 80009cc:	21fd      	movs	r1, #253	; 0xfd
 80009ce:	488f      	ldr	r0, [pc, #572]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 80009d0:	f001 fb2e 	bl	8002030 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009d4:	4b8e      	ldr	r3, [pc, #568]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	f002 020c 	and.w	r2, r2, #12
 80009dc:	2a04      	cmp	r2, #4
 80009de:	d007      	beq.n	80009f0 <HAL_RCC_OscConfig+0x88>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009e6:	2a08      	cmp	r2, #8
 80009e8:	d10a      	bne.n	8000a00 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	d507      	bpl.n	8000a00 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f0:	4b87      	ldr	r3, [pc, #540]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	039b      	lsls	r3, r3, #14
 80009f6:	d5c9      	bpl.n	800098c <HAL_RCC_OscConfig+0x24>
 80009f8:	6863      	ldr	r3, [r4, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1c6      	bne.n	800098c <HAL_RCC_OscConfig+0x24>
 80009fe:	e7b7      	b.n	8000970 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	4d83      	ldr	r5, [pc, #524]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a08:	d111      	bne.n	8000a2e <HAL_RCC_OscConfig+0xc6>
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a12:	f7ff fd8b 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a16:	4d7e      	ldr	r5, [pc, #504]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8000a18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	039f      	lsls	r7, r3, #14
 8000a1e:	d4b5      	bmi.n	800098c <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a20:	f7ff fd84 	bl	800052c <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2864      	cmp	r0, #100	; 0x64
 8000a28:	d9f7      	bls.n	8000a1a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	e7a1      	b.n	8000972 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a32:	d104      	bne.n	8000a3e <HAL_RCC_OscConfig+0xd6>
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3a:	602b      	str	r3, [r5, #0]
 8000a3c:	e7e5      	b.n	8000a0a <HAL_RCC_OscConfig+0xa2>
 8000a3e:	682a      	ldr	r2, [r5, #0]
 8000a40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a44:	602a      	str	r2, [r5, #0]
 8000a46:	682a      	ldr	r2, [r5, #0]
 8000a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a4c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1df      	bne.n	8000a12 <HAL_RCC_OscConfig+0xaa>
        tickstart = HAL_GetTick();
 8000a52:	f7ff fd6b 	bl	800052c <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	0398      	lsls	r0, r3, #14
 8000a5c:	d596      	bpl.n	800098c <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fd65 	bl	800052c <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	2864      	cmp	r0, #100	; 0x64
 8000a66:	d9f7      	bls.n	8000a58 <HAL_RCC_OscConfig+0xf0>
 8000a68:	e7df      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000a6a:	68e3      	ldr	r3, [r4, #12]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d904      	bls.n	8000a7a <HAL_RCC_OscConfig+0x112>
 8000a70:	f240 112f 	movw	r1, #303	; 0x12f
 8000a74:	4865      	ldr	r0, [pc, #404]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 8000a76:	f001 fadb 	bl	8002030 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000a7a:	6923      	ldr	r3, [r4, #16]
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	d904      	bls.n	8000a8a <HAL_RCC_OscConfig+0x122>
 8000a80:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000a84:	4861      	ldr	r0, [pc, #388]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 8000a86:	f001 fad3 	bl	8002030 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a8a:	4b61      	ldr	r3, [pc, #388]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f012 0f0c 	tst.w	r2, #12
 8000a92:	d007      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a9a:	2a08      	cmp	r2, #8
 8000a9c:	d112      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	0259      	lsls	r1, r3, #9
 8000aa2:	d40f      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	0792      	lsls	r2, r2, #30
 8000aaa:	d503      	bpl.n	8000ab4 <HAL_RCC_OscConfig+0x14c>
 8000aac:	68e2      	ldr	r2, [r4, #12]
 8000aae:	2a01      	cmp	r2, #1
 8000ab0:	f47f af5e 	bne.w	8000970 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	6921      	ldr	r1, [r4, #16]
 8000ab8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000abc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ac0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac2:	e766      	b.n	8000992 <HAL_RCC_OscConfig+0x2a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ac4:	68e2      	ldr	r2, [r4, #12]
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000ac8:	b1b2      	cbz	r2, 8000af8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ace:	f7ff fd2d 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad2:	4d4f      	ldr	r5, [pc, #316]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8000ad4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	079f      	lsls	r7, r3, #30
 8000ada:	d507      	bpl.n	8000aec <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	6922      	ldr	r2, [r4, #16]
 8000ae0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ae4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ae8:	602b      	str	r3, [r5, #0]
 8000aea:	e752      	b.n	8000992 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aec:	f7ff fd1e 	bl	800052c <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9ef      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x16e>
 8000af6:	e798      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000afa:	f7ff fd17 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afe:	4d44      	ldr	r5, [pc, #272]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8000b00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	0798      	lsls	r0, r3, #30
 8000b06:	f57f af44 	bpl.w	8000992 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b0a:	f7ff fd0f 	bl	800052c <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f6      	bls.n	8000b02 <HAL_RCC_OscConfig+0x19a>
 8000b14:	e789      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000b16:	6963      	ldr	r3, [r4, #20]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d904      	bls.n	8000b26 <HAL_RCC_OscConfig+0x1be>
 8000b1c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000b20:	483a      	ldr	r0, [pc, #232]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 8000b22:	f001 fa85 	bl	8002030 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b26:	6962      	ldr	r2, [r4, #20]
 8000b28:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <HAL_RCC_OscConfig+0x2b0>)
 8000b2a:	b17a      	cbz	r2, 8000b4c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b30:	f7ff fcfc 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b34:	4d36      	ldr	r5, [pc, #216]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000b36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b3a:	079b      	lsls	r3, r3, #30
 8000b3c:	f53f af2d 	bmi.w	800099a <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b40:	f7ff fcf4 	bl	800052c <HAL_GetTick>
 8000b44:	1b80      	subs	r0, r0, r6
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x1d0>
 8000b4a:	e76e      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000b4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fced 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b52:	4d2f      	ldr	r5, [pc, #188]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000b54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b58:	079f      	lsls	r7, r3, #30
 8000b5a:	f57f af1e 	bpl.w	800099a <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b5e:	f7ff fce5 	bl	800052c <HAL_GetTick>
 8000b62:	1b80      	subs	r0, r0, r6
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9f6      	bls.n	8000b56 <HAL_RCC_OscConfig+0x1ee>
 8000b68:	e75f      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000b6a:	68a3      	ldr	r3, [r4, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d906      	bls.n	8000b7e <HAL_RCC_OscConfig+0x216>
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d004      	beq.n	8000b7e <HAL_RCC_OscConfig+0x216>
 8000b74:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <HAL_RCC_OscConfig+0x2a4>)
 8000b7a:	f001 fa59 	bl	8002030 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b82:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b86:	d128      	bne.n	8000bda <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	9201      	str	r2, [sp, #4]
 8000b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b90:	641a      	str	r2, [r3, #64]	; 0x40
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b9c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b9e:	4d1f      	ldr	r5, [pc, #124]	; (8000c1c <HAL_RCC_OscConfig+0x2b4>)
 8000ba0:	682b      	ldr	r3, [r5, #0]
 8000ba2:	05d8      	lsls	r0, r3, #23
 8000ba4:	d51b      	bpl.n	8000bde <HAL_RCC_OscConfig+0x276>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba6:	68a3      	ldr	r3, [r4, #8]
 8000ba8:	4d19      	ldr	r5, [pc, #100]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d127      	bne.n	8000bfe <HAL_RCC_OscConfig+0x296>
 8000bae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fcb9 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bba:	4d15      	ldr	r5, [pc, #84]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000bbc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bc4:	079a      	lsls	r2, r3, #30
 8000bc6:	d543      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x2e8>
    if(pwrclkchanged == SET)
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	f43f aeea 	beq.w	80009a2 <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_RCC_OscConfig+0x2a8>)
 8000bd0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	e6e3      	b.n	80009a2 <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 8000bda:	2600      	movs	r6, #0
 8000bdc:	e7df      	b.n	8000b9e <HAL_RCC_OscConfig+0x236>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000be6:	f7ff fca1 	bl	800052c <HAL_GetTick>
 8000bea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	05d9      	lsls	r1, r3, #23
 8000bf0:	d4d9      	bmi.n	8000ba6 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bf2:	f7ff fc9b 	bl	800052c <HAL_GetTick>
 8000bf6:	1bc0      	subs	r0, r0, r7
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d9f7      	bls.n	8000bec <HAL_RCC_OscConfig+0x284>
 8000bfc:	e715      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d10e      	bne.n	8000c20 <HAL_RCC_OscConfig+0x2b8>
 8000c02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	672b      	str	r3, [r5, #112]	; 0x70
 8000c0a:	e7d0      	b.n	8000bae <HAL_RCC_OscConfig+0x246>
 8000c0c:	08002310 	.word	0x08002310
 8000c10:	40023800 	.word	0x40023800
 8000c14:	42470000 	.word	0x42470000
 8000c18:	42470e80 	.word	0x42470e80
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c22:	f022 0201 	bic.w	r2, r2, #1
 8000c26:	672a      	str	r2, [r5, #112]	; 0x70
 8000c28:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c2a:	f022 0204 	bic.w	r2, r2, #4
 8000c2e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1c0      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();
 8000c34:	f7ff fc7a 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c38:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c3c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c40:	079b      	lsls	r3, r3, #30
 8000c42:	d5c1      	bpl.n	8000bc8 <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c44:	f7ff fc72 	bl	800052c <HAL_GetTick>
 8000c48:	1bc0      	subs	r0, r0, r7
 8000c4a:	4540      	cmp	r0, r8
 8000c4c:	d9f7      	bls.n	8000c3e <HAL_RCC_OscConfig+0x2d6>
 8000c4e:	e6ec      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c50:	f7ff fc6c 	bl	800052c <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	4540      	cmp	r0, r8
 8000c58:	d9b3      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x25a>
 8000c5a:	e6e6      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c5c:	4e3b      	ldr	r6, [pc, #236]	; (8000d4c <HAL_RCC_OscConfig+0x3e4>)
 8000c5e:	68b3      	ldr	r3, [r6, #8]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	f43f ae83 	beq.w	8000970 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c6a:	2a02      	cmp	r2, #2
 8000c6c:	4d38      	ldr	r5, [pc, #224]	; (8000d50 <HAL_RCC_OscConfig+0x3e8>)
 8000c6e:	d15e      	bne.n	8000d2e <HAL_RCC_OscConfig+0x3c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000c70:	69e3      	ldr	r3, [r4, #28]
 8000c72:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8000c76:	d004      	beq.n	8000c82 <HAL_RCC_OscConfig+0x31a>
 8000c78:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8000c7c:	4835      	ldr	r0, [pc, #212]	; (8000d54 <HAL_RCC_OscConfig+0x3ec>)
 8000c7e:	f001 f9d7 	bl	8002030 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000c82:	6a23      	ldr	r3, [r4, #32]
 8000c84:	2b3f      	cmp	r3, #63	; 0x3f
 8000c86:	d904      	bls.n	8000c92 <HAL_RCC_OscConfig+0x32a>
 8000c88:	f240 11e9 	movw	r1, #489	; 0x1e9
 8000c8c:	4831      	ldr	r0, [pc, #196]	; (8000d54 <HAL_RCC_OscConfig+0x3ec>)
 8000c8e:	f001 f9cf 	bl	8002030 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c94:	3b32      	subs	r3, #50	; 0x32
 8000c96:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8000c9a:	d904      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x33e>
 8000c9c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8000ca0:	482c      	ldr	r0, [pc, #176]	; (8000d54 <HAL_RCC_OscConfig+0x3ec>)
 8000ca2:	f001 f9c5 	bl	8002030 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000ca6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ca8:	2a08      	cmp	r2, #8
 8000caa:	d804      	bhi.n	8000cb6 <HAL_RCC_OscConfig+0x34e>
 8000cac:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	07d8      	lsls	r0, r3, #31
 8000cb4:	d404      	bmi.n	8000cc0 <HAL_RCC_OscConfig+0x358>
 8000cb6:	f240 11eb 	movw	r1, #491	; 0x1eb
 8000cba:	4826      	ldr	r0, [pc, #152]	; (8000d54 <HAL_RCC_OscConfig+0x3ec>)
 8000cbc:	f001 f9b8 	bl	8002030 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	2b0d      	cmp	r3, #13
 8000cc6:	d904      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x36a>
 8000cc8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000ccc:	4821      	ldr	r0, [pc, #132]	; (8000d54 <HAL_RCC_OscConfig+0x3ec>)
 8000cce:	f001 f9af 	bl	8002030 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fc29 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cda:	4e1c      	ldr	r6, [pc, #112]	; (8000d4c <HAL_RCC_OscConfig+0x3e4>)
        tickstart = HAL_GetTick();
 8000cdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cde:	6833      	ldr	r3, [r6, #0]
 8000ce0:	0199      	lsls	r1, r3, #6
 8000ce2:	d41e      	bmi.n	8000d22 <HAL_RCC_OscConfig+0x3ba>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ce4:	6a22      	ldr	r2, [r4, #32]
 8000ce6:	69e3      	ldr	r3, [r4, #28]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf8:	4c14      	ldr	r4, [pc, #80]	; (8000d4c <HAL_RCC_OscConfig+0x3e4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cfa:	0852      	lsrs	r2, r2, #1
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d02:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d04:	2301      	movs	r3, #1
 8000d06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc10 	bl	800052c <HAL_GetTick>
 8000d0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	019a      	lsls	r2, r3, #6
 8000d12:	f53f ae52 	bmi.w	80009ba <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d16:	f7ff fc09 	bl	800052c <HAL_GetTick>
 8000d1a:	1b40      	subs	r0, r0, r5
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f6      	bls.n	8000d0e <HAL_RCC_OscConfig+0x3a6>
 8000d20:	e683      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d22:	f7ff fc03 	bl	800052c <HAL_GetTick>
 8000d26:	1bc0      	subs	r0, r0, r7
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d9d8      	bls.n	8000cde <HAL_RCC_OscConfig+0x376>
 8000d2c:	e67d      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_DISABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d32:	f7ff fbfb 	bl	800052c <HAL_GetTick>
 8000d36:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	019b      	lsls	r3, r3, #6
 8000d3c:	f57f ae3d 	bpl.w	80009ba <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d40:	f7ff fbf4 	bl	800052c <HAL_GetTick>
 8000d44:	1b00      	subs	r0, r0, r4
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f6      	bls.n	8000d38 <HAL_RCC_OscConfig+0x3d0>
 8000d4a:	e66e      	b.n	8000a2a <HAL_RCC_OscConfig+0xc2>
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	42470060 	.word	0x42470060
 8000d54:	08002310 	.word	0x08002310

08000d58 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8000d5c:	2801      	cmp	r0, #1
{
 8000d5e:	b088      	sub	sp, #32
 8000d60:	4680      	mov	r8, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	4615      	mov	r5, r2
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8000d66:	d904      	bls.n	8000d72 <HAL_RCC_MCOConfig+0x1a>
 8000d68:	f240 3101 	movw	r1, #769	; 0x301
 8000d6c:	4832      	ldr	r0, [pc, #200]	; (8000e38 <HAL_RCC_MCOConfig+0xe0>)
 8000d6e:	f001 f95f 	bl	8002030 <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8000d72:	f035 6380 	bics.w	r3, r5, #67108864	; 0x4000000
 8000d76:	d00c      	beq.n	8000d92 <HAL_RCC_MCOConfig+0x3a>
 8000d78:	f025 7300 	bic.w	r3, r5, #33554432	; 0x2000000
 8000d7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8000d80:	d007      	beq.n	8000d92 <HAL_RCC_MCOConfig+0x3a>
 8000d82:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8000d86:	d004      	beq.n	8000d92 <HAL_RCC_MCOConfig+0x3a>
 8000d88:	f240 3102 	movw	r1, #770	; 0x302
 8000d8c:	482a      	ldr	r0, [pc, #168]	; (8000e38 <HAL_RCC_MCOConfig+0xe0>)
 8000d8e:	f001 f94f 	bl	8002030 <assert_failed>
 8000d92:	2600      	movs	r6, #0
 8000d94:	4c29      	ldr	r4, [pc, #164]	; (8000e3c <HAL_RCC_MCOConfig+0xe4>)
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000d96:	f1b8 0f00 	cmp.w	r8, #0
 8000d9a:	d127      	bne.n	8000dec <HAL_RCC_MCOConfig+0x94>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8000d9c:	f437 03c0 	bics.w	r3, r7, #6291456	; 0x600000
 8000da0:	d004      	beq.n	8000dac <HAL_RCC_MCOConfig+0x54>
 8000da2:	f240 3106 	movw	r1, #774	; 0x306
 8000da6:	4824      	ldr	r0, [pc, #144]	; (8000e38 <HAL_RCC_MCOConfig+0xe0>)
 8000da8:	f001 f942 	bl	8002030 <assert_failed>

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000dac:	9601      	str	r6, [sp, #4]
 8000dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000db0:	4823      	ldr	r0, [pc, #140]	; (8000e40 <HAL_RCC_MCOConfig+0xe8>)
    __MCO1_CLK_ENABLE();
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6323      	str	r3, [r4, #48]	; 0x30
 8000db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	9605      	str	r6, [sp, #20]
    __MCO1_CLK_ENABLE();
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dc4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000dd0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000dd6:	f7ff fc67 	bl	80006a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000dda:	68a2      	ldr	r2, [r4, #8]
 8000ddc:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8000de0:	433a      	orrs	r2, r7
 8000de2:	432a      	orrs	r2, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000de4:	60a2      	str	r2, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000de6:	b008      	add	sp, #32
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 8000dec:	f037 4340 	bics.w	r3, r7, #3221225472	; 0xc0000000
 8000df0:	d004      	beq.n	8000dfc <HAL_RCC_MCOConfig+0xa4>
 8000df2:	f240 311e 	movw	r1, #798	; 0x31e
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <HAL_RCC_MCOConfig+0xe0>)
 8000df8:	f001 f91a 	bl	8002030 <assert_failed>
    __MCO2_CLK_ENABLE();
 8000dfc:	9602      	str	r6, [sp, #8]
 8000dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <HAL_RCC_MCOConfig+0xec>)
    __MCO2_CLK_ENABLE();
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6323      	str	r3, [r4, #48]	; 0x30
 8000e08:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	9605      	str	r6, [sp, #20]
    __MCO2_CLK_ENABLE();
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e14:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000e20:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000e26:	f7ff fc3f 	bl	80006a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000e2a:	68a2      	ldr	r2, [r4, #8]
 8000e2c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8000e30:	433a      	orrs	r2, r7
 8000e32:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
 8000e36:	e7d5      	b.n	8000de4 <HAL_RCC_MCOConfig+0x8c>
 8000e38:	08002310 	.word	0x08002310
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800

08000e48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e4a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e4c:	688b      	ldr	r3, [r1, #8]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d003      	beq.n	8000e5e <HAL_RCC_GetSysClockFreq+0x16>
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d003      	beq.n	8000e62 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e5c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e60:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e62:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e64:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e66:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6c:	bf14      	ite	ne
 8000e6e:	480c      	ldrne	r0, [pc, #48]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e70:	480a      	ldreq	r0, [pc, #40]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e72:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e76:	bf18      	it	ne
 8000e78:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e82:	f7ff f9a5 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e8e:	3301      	adds	r3, #1
 8000e90:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e96:	bd08      	pop	{r3, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	00f42400 	.word	0x00f42400
 8000ea0:	007a1200 	.word	0x007a1200

08000ea4 <HAL_RCC_ClockConfig>:
{
 8000ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000eaa:	4604      	mov	r4, r0
 8000eac:	b910      	cbnz	r0, 8000eb4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000eb4:	6803      	ldr	r3, [r0, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	2b0e      	cmp	r3, #14
 8000eba:	d904      	bls.n	8000ec6 <HAL_RCC_ClockConfig+0x22>
 8000ebc:	f44f 7114 	mov.w	r1, #592	; 0x250
 8000ec0:	486d      	ldr	r0, [pc, #436]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8000ec2:	f001 f8b5 	bl	8002030 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000ec6:	2d07      	cmp	r5, #7
 8000ec8:	d904      	bls.n	8000ed4 <HAL_RCC_ClockConfig+0x30>
 8000eca:	f240 2151 	movw	r1, #593	; 0x251
 8000ece:	486a      	ldr	r0, [pc, #424]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8000ed0:	f001 f8ae 	bl	8002030 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <HAL_RCC_ClockConfig+0x1d8>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f002 020f 	and.w	r2, r2, #15
 8000edc:	4295      	cmp	r5, r2
 8000ede:	d83d      	bhi.n	8000f5c <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	0796      	lsls	r6, r2, #30
 8000ee4:	d442      	bmi.n	8000f6c <HAL_RCC_ClockConfig+0xc8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	07d9      	lsls	r1, r3, #31
 8000eea:	d46c      	bmi.n	8000fc6 <HAL_RCC_ClockConfig+0x122>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000eec:	4b63      	ldr	r3, [pc, #396]	; (800107c <HAL_RCC_ClockConfig+0x1d8>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f002 020f 	and.w	r2, r2, #15
 8000ef4:	4295      	cmp	r5, r2
 8000ef6:	f0c0 809c 	bcc.w	8001032 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	075a      	lsls	r2, r3, #29
 8000efe:	f100 80a1 	bmi.w	8001044 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	071b      	lsls	r3, r3, #28
 8000f06:	d518      	bpl.n	8000f3a <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000f08:	6923      	ldr	r3, [r4, #16]
 8000f0a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8000f0e:	d00c      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x86>
 8000f10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f14:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8000f18:	d007      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x86>
 8000f1a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000f1e:	d004      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x86>
 8000f20:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000f24:	4854      	ldr	r0, [pc, #336]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8000f26:	f001 f883 	bl	8002030 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f2a:	4a55      	ldr	r2, [pc, #340]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8000f2c:	6921      	ldr	r1, [r4, #16]
 8000f2e:	6893      	ldr	r3, [r2, #8]
 8000f30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f38:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f3a:	f7ff ff85 	bl	8000e48 <HAL_RCC_GetSysClockFreq>
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8000f40:	4a50      	ldr	r2, [pc, #320]	; (8001084 <HAL_RCC_ClockConfig+0x1e0>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	40d8      	lsrs	r0, r3
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <HAL_RCC_ClockConfig+0x1e4>)
 8000f4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f001 f89f 	bl	8002094 <HAL_InitTick>
  return HAL_OK;
 8000f56:	2000      	movs	r0, #0
 8000f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5c:	b2ea      	uxtb	r2, r5
 8000f5e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	429d      	cmp	r5, r3
 8000f68:	d1a1      	bne.n	8000eae <HAL_RCC_ClockConfig+0xa>
 8000f6a:	e7b9      	b.n	8000ee0 <HAL_RCC_ClockConfig+0x3c>
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f6e:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f72:	bf1e      	ittt	ne
 8000f74:	6899      	ldrne	r1, [r3, #8]
 8000f76:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000f7a:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f7e:	bf42      	ittt	mi
 8000f80:	689a      	ldrmi	r2, [r3, #8]
 8000f82:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f86:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000f8e:	d012      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x112>
 8000f90:	f023 0220 	bic.w	r2, r3, #32
 8000f94:	2a90      	cmp	r2, #144	; 0x90
 8000f96:	d00e      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x112>
 8000f98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f9c:	2aa0      	cmp	r2, #160	; 0xa0
 8000f9e:	d00a      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x112>
 8000fa0:	f023 0210 	bic.w	r2, r3, #16
 8000fa4:	2ac0      	cmp	r2, #192	; 0xc0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x112>
 8000fa8:	2bf0      	cmp	r3, #240	; 0xf0
 8000faa:	d004      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x112>
 8000fac:	f44f 711d 	mov.w	r1, #628	; 0x274
 8000fb0:	4831      	ldr	r0, [pc, #196]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8000fb2:	f001 f83d 	bl	8002030 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb6:	4a32      	ldr	r2, [pc, #200]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8000fb8:	68a1      	ldr	r1, [r4, #8]
 8000fba:	6893      	ldr	r3, [r2, #8]
 8000fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6093      	str	r3, [r2, #8]
 8000fc4:	e78f      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d904      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0x132>
 8000fcc:	f240 217b 	movw	r1, #635	; 0x27b
 8000fd0:	4829      	ldr	r0, [pc, #164]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8000fd2:	f001 f82d 	bl	8002030 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8000fda:	2a01      	cmp	r2, #1
 8000fdc:	d11f      	bne.n	800101e <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	f43f af63 	beq.w	8000eae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe8:	4e25      	ldr	r6, [pc, #148]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8000fea:	68b3      	ldr	r3, [r6, #8]
 8000fec:	f023 0303 	bic.w	r3, r3, #3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ff4:	f7ff fa9a 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ffc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffe:	68b3      	ldr	r3, [r6, #8]
 8001000:	6862      	ldr	r2, [r4, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800100a:	f43f af6f 	beq.w	8000eec <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100e:	f7ff fa8d 	bl	800052c <HAL_GetTick>
 8001012:	1bc0      	subs	r0, r0, r7
 8001014:	4540      	cmp	r0, r8
 8001016:	d9f2      	bls.n	8000ffe <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8001018:	2003      	movs	r0, #3
}
 800101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101e:	1e91      	subs	r1, r2, #2
 8001020:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001022:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001024:	d802      	bhi.n	800102c <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001026:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800102a:	e7db      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	f013 0f02 	tst.w	r3, #2
 8001030:	e7d8      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	b2ea      	uxtb	r2, r5
 8001034:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	429d      	cmp	r5, r3
 800103e:	f47f af36 	bne.w	8000eae <HAL_RCC_ClockConfig+0xa>
 8001042:	e75a      	b.n	8000efa <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001044:	68e3      	ldr	r3, [r4, #12]
 8001046:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800104a:	d00c      	beq.n	8001066 <HAL_RCC_ClockConfig+0x1c2>
 800104c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001050:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001054:	d007      	beq.n	8001066 <HAL_RCC_ClockConfig+0x1c2>
 8001056:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800105a:	d004      	beq.n	8001066 <HAL_RCC_ClockConfig+0x1c2>
 800105c:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_RCC_ClockConfig+0x1d4>)
 8001062:	f000 ffe5 	bl	8002030 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_RCC_ClockConfig+0x1dc>)
 8001068:	68e1      	ldr	r1, [r4, #12]
 800106a:	6893      	ldr	r3, [r2, #8]
 800106c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001070:	430b      	orrs	r3, r1
 8001072:	6093      	str	r3, [r2, #8]
 8001074:	e745      	b.n	8000f02 <HAL_RCC_ClockConfig+0x5e>
 8001076:	bf00      	nop
 8001078:	08002310 	.word	0x08002310
 800107c:	40023c00 	.word	0x40023c00
 8001080:	40023800 	.word	0x40023800
 8001084:	0800238a 	.word	0x0800238a
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800108c:	4b01      	ldr	r3, [pc, #4]	; (8001094 <HAL_RCC_GetHCLKFreq+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010a6:	6810      	ldr	r0, [r2, #0]
}
 80010a8:	40d8      	lsrs	r0, r3
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800
 80010b0:	0800239a 	.word	0x0800239a
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010b8:	230f      	movs	r3, #15
 80010ba:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_RCC_GetClockConfig+0x34>)
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80010cc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80010d4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010de:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_RCC_GetClockConfig+0x38>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	600b      	str	r3, [r1, #0]
 80010ea:	4770      	bx	lr
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40023c00 	.word	0x40023c00

080010f4 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	4a24      	ldr	r2, [pc, #144]	; (8001188 <HAL_TIM_Base_Start_IT+0x94>)
 80010f8:	4293      	cmp	r3, r2
{
 80010fa:	b510      	push	{r4, lr}
 80010fc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80010fe:	d037      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d034      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001106:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800110a:	4293      	cmp	r3, r2
 800110c:	d030      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800110e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001112:	4293      	cmp	r3, r2
 8001114:	d02c      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800111a:	4293      	cmp	r3, r2
 800111c:	d028      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800111e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001122:	4293      	cmp	r3, r2
 8001124:	d024      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800112a:	4293      	cmp	r3, r2
 800112c:	d020      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800112e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8001132:	4293      	cmp	r3, r2
 8001134:	d01c      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001136:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800113a:	4293      	cmp	r3, r2
 800113c:	d018      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800113e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001142:	4293      	cmp	r3, r2
 8001144:	d014      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114a:	4293      	cmp	r3, r2
 800114c:	d010      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800114e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001152:	4293      	cmp	r3, r2
 8001154:	d00c      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800115a:	4293      	cmp	r3, r2
 800115c:	d008      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 800115e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001162:	4293      	cmp	r3, r2
 8001164:	d004      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x7c>
 8001166:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <HAL_TIM_Base_Start_IT+0x98>)
 800116c:	f000 ff60 	bl	8002030 <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001182:	2000      	movs	r0, #0
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000
 800118c:	08002348 	.word	0x08002348

08001190 <HAL_TIM_OC_DelayElapsedCallback>:
 8001190:	4770      	bx	lr

08001192 <HAL_TIM_IC_CaptureCallback>:
 8001192:	4770      	bx	lr

08001194 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001194:	4770      	bx	lr

08001196 <HAL_TIM_TriggerCallback>:
 8001196:	4770      	bx	lr

08001198 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001198:	6803      	ldr	r3, [r0, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	0791      	lsls	r1, r2, #30
{
 800119e:	b510      	push	{r4, lr}
 80011a0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011a2:	d50e      	bpl.n	80011c2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	0792      	lsls	r2, r2, #30
 80011a8:	d50b      	bpl.n	80011c2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011aa:	f06f 0202 	mvn.w	r2, #2
 80011ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011b0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011b2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011b4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011b6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011b8:	d077      	beq.n	80012aa <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80011ba:	f7ff ffea 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011be:	2300      	movs	r3, #0
 80011c0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	0750      	lsls	r0, r2, #29
 80011c8:	d510      	bpl.n	80011ec <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	0751      	lsls	r1, r2, #29
 80011ce:	d50d      	bpl.n	80011ec <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011d0:	f06f 0204 	mvn.w	r2, #4
 80011d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011d6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011d8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011da:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011de:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80011e0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011e2:	d068      	beq.n	80012b6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80011e4:	f7ff ffd5 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011e8:	2300      	movs	r3, #0
 80011ea:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	0712      	lsls	r2, r2, #28
 80011f2:	d50f      	bpl.n	8001214 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	0710      	lsls	r0, r2, #28
 80011f8:	d50c      	bpl.n	8001214 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011fa:	f06f 0208 	mvn.w	r2, #8
 80011fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001200:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001202:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001204:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001206:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001208:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800120a:	d05a      	beq.n	80012c2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800120c:	f7ff ffc1 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001210:	2300      	movs	r3, #0
 8001212:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	06d2      	lsls	r2, r2, #27
 800121a:	d510      	bpl.n	800123e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	06d0      	lsls	r0, r2, #27
 8001220:	d50d      	bpl.n	800123e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001222:	f06f 0210 	mvn.w	r2, #16
 8001226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001228:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800122a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800122c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001230:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001232:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001234:	d04b      	beq.n	80012ce <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001236:	f7ff ffac 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800123a:	2300      	movs	r3, #0
 800123c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	07d1      	lsls	r1, r2, #31
 8001244:	d508      	bpl.n	8001258 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	07d2      	lsls	r2, r2, #31
 800124a:	d505      	bpl.n	8001258 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800124c:	f06f 0201 	mvn.w	r2, #1
 8001250:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001252:	4620      	mov	r0, r4
 8001254:	f000 fee2 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	0610      	lsls	r0, r2, #24
 800125e:	d508      	bpl.n	8001272 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	0611      	lsls	r1, r2, #24
 8001264:	d505      	bpl.n	8001272 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001266:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800126a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800126c:	4620      	mov	r0, r4
 800126e:	f000 f90e 	bl	800148e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	0652      	lsls	r2, r2, #25
 8001278:	d508      	bpl.n	800128c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	0650      	lsls	r0, r2, #25
 800127e:	d505      	bpl.n	800128c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001284:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff85 	bl	8001196 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	0691      	lsls	r1, r2, #26
 8001292:	d522      	bpl.n	80012da <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	0692      	lsls	r2, r2, #26
 8001298:	d51f      	bpl.n	80012da <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800129a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800129e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012a0:	611a      	str	r2, [r3, #16]
    }
  }
}
 80012a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80012a6:	f000 b8f1 	b.w	800148c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012aa:	f7ff ff71 	bl	8001190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff ff70 	bl	8001194 <HAL_TIM_PWM_PulseFinishedCallback>
 80012b4:	e783      	b.n	80011be <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012b6:	f7ff ff6b 	bl	8001190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff ff6a 	bl	8001194 <HAL_TIM_PWM_PulseFinishedCallback>
 80012c0:	e792      	b.n	80011e8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012c2:	f7ff ff65 	bl	8001190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80012c6:	4620      	mov	r0, r4
 80012c8:	f7ff ff64 	bl	8001194 <HAL_TIM_PWM_PulseFinishedCallback>
 80012cc:	e7a0      	b.n	8001210 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ce:	f7ff ff5f 	bl	8001190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ff5e 	bl	8001194 <HAL_TIM_PWM_PulseFinishedCallback>
 80012d8:	e7af      	b.n	800123a <HAL_TIM_IRQHandler+0xa2>
 80012da:	bd10      	pop	{r4, pc}

080012dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80012dc:	4a2e      	ldr	r2, [pc, #184]	; (8001398 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80012de:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80012e0:	4290      	cmp	r0, r2
 80012e2:	d012      	beq.n	800130a <TIM_Base_SetConfig+0x2e>
 80012e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012e8:	d00f      	beq.n	800130a <TIM_Base_SetConfig+0x2e>
 80012ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d00b      	beq.n	800130a <TIM_Base_SetConfig+0x2e>
 80012f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f6:	4290      	cmp	r0, r2
 80012f8:	d007      	beq.n	800130a <TIM_Base_SetConfig+0x2e>
 80012fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012fe:	4290      	cmp	r0, r2
 8001300:	d003      	beq.n	800130a <TIM_Base_SetConfig+0x2e>
 8001302:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001306:	4290      	cmp	r0, r2
 8001308:	d11d      	bne.n	8001346 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800130a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800130c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001310:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <TIM_Base_SetConfig+0xbc>)
 8001314:	4290      	cmp	r0, r2
 8001316:	d104      	bne.n	8001322 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001318:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800131a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800131e:	4313      	orrs	r3, r2
 8001320:	e028      	b.n	8001374 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001322:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001326:	d0f7      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <TIM_Base_SetConfig+0xc0>)
 800132a:	4290      	cmp	r0, r2
 800132c:	d0f4      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 800132e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001332:	4290      	cmp	r0, r2
 8001334:	d0f0      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 8001336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800133a:	4290      	cmp	r0, r2
 800133c:	d0ec      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 800133e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001342:	4290      	cmp	r0, r2
 8001344:	d0e8      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <TIM_Base_SetConfig+0xc4>)
 8001348:	4290      	cmp	r0, r2
 800134a:	d0e5      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 800134c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001350:	4290      	cmp	r0, r2
 8001352:	d0e1      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 8001354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001358:	4290      	cmp	r0, r2
 800135a:	d0dd      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 800135c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001360:	4290      	cmp	r0, r2
 8001362:	d0d9      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 8001364:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001368:	4290      	cmp	r0, r2
 800136a:	d0d5      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
 800136c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001370:	4290      	cmp	r0, r2
 8001372:	d0d1      	beq.n	8001318 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8001374:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001376:	688b      	ldr	r3, [r1, #8]
 8001378:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800137a:	680b      	ldr	r3, [r1, #0]
 800137c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <TIM_Base_SetConfig+0xbc>)
 8001380:	4298      	cmp	r0, r3
 8001382:	d006      	beq.n	8001392 <TIM_Base_SetConfig+0xb6>
 8001384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001388:	4298      	cmp	r0, r3
 800138a:	d002      	beq.n	8001392 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800138c:	2301      	movs	r3, #1
 800138e:	6143      	str	r3, [r0, #20]
}
 8001390:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001392:	690b      	ldr	r3, [r1, #16]
 8001394:	6303      	str	r3, [r0, #48]	; 0x30
 8001396:	e7f9      	b.n	800138c <TIM_Base_SetConfig+0xb0>
 8001398:	40010000 	.word	0x40010000
 800139c:	40000400 	.word	0x40000400
 80013a0:	40014000 	.word	0x40014000

080013a4 <HAL_TIM_Base_Init>:
{ 
 80013a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80013a6:	4604      	mov	r4, r0
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d069      	beq.n	8001480 <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	4a35      	ldr	r2, [pc, #212]	; (8001484 <HAL_TIM_Base_Init+0xe0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d036      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b8:	d033      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02f      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d027      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d023      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013e2:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01b      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013ea:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d017      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 80013fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00f      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 8001402:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001406:	4293      	cmp	r3, r2
 8001408:	d00b      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 800140a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4293      	cmp	r3, r2
 8001418:	d003      	beq.n	8001422 <HAL_TIM_Base_Init+0x7e>
 800141a:	21d7      	movs	r1, #215	; 0xd7
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <HAL_TIM_Base_Init+0xe4>)
 800141e:	f000 fe07 	bl	8002030 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001422:	68a3      	ldr	r3, [r4, #8]
 8001424:	f033 0210 	bics.w	r2, r3, #16
 8001428:	d009      	beq.n	800143e <HAL_TIM_Base_Init+0x9a>
 800142a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800142e:	2a20      	cmp	r2, #32
 8001430:	d005      	beq.n	800143e <HAL_TIM_Base_Init+0x9a>
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d003      	beq.n	800143e <HAL_TIM_Base_Init+0x9a>
 8001436:	21d8      	movs	r1, #216	; 0xd8
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <HAL_TIM_Base_Init+0xe4>)
 800143a:	f000 fdf9 	bl	8002030 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800143e:	6923      	ldr	r3, [r4, #16]
 8001440:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8001444:	d006      	beq.n	8001454 <HAL_TIM_Base_Init+0xb0>
 8001446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144a:	d003      	beq.n	8001454 <HAL_TIM_Base_Init+0xb0>
 800144c:	21d9      	movs	r1, #217	; 0xd9
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <HAL_TIM_Base_Init+0xe4>)
 8001450:	f000 fdee 	bl	8002030 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001454:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001458:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800145c:	b923      	cbnz	r3, 8001468 <HAL_TIM_Base_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 800145e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001462:	4620      	mov	r0, r4
 8001464:	f000 fe88 	bl	8002178 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	1d21      	adds	r1, r4, #4
 8001472:	f7ff ff33 	bl	80012dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001476:	2301      	movs	r3, #1
 8001478:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
 800147e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001480:	2001      	movs	r0, #1
}
 8001482:	bd10      	pop	{r4, pc}
 8001484:	40010000 	.word	0x40010000
 8001488:	08002348 	.word	0x08002348

0800148c <HAL_TIMEx_CommutationCallback>:
 800148c:	4770      	bx	lr

0800148e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800148e:	4770      	bx	lr

08001490 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001490:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001492:	f000 f963 	bl	800175c <xTaskGetSchedulerState>
 8001496:	2801      	cmp	r0, #1
 8001498:	d003      	beq.n	80014a2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800149a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800149e:	f000 b869 	b.w	8001574 <xPortSysTickHandler>
 80014a2:	bd08      	pop	{r3, pc}

080014a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80014a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014b2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014b6:	3301      	adds	r3, #1
 80014b8:	6003      	str	r3, [r0, #0]
 80014ba:	4770      	bx	lr

080014bc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014bc:	6841      	ldr	r1, [r0, #4]
 80014be:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014c0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014c4:	6882      	ldr	r2, [r0, #8]
 80014c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014cc:	bf08      	it	eq
 80014ce:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014d0:	2200      	movs	r2, #0
 80014d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	3801      	subs	r0, #1
 80014d8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80014da:	4770      	bx	lr
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <pxCurrentTCBConst2>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	6808      	ldr	r0, [r1, #0]
 80014e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ea:	f380 8809 	msr	PSP, r0
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f380 8811 	msr	BASEPRI, r0
 80014fa:	4770      	bx	lr
 80014fc:	f3af 8000 	nop.w

08001500 <pxCurrentTCBConst2>:
 8001500:	20000024 	.word	0x20000024
	...

08001510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001510:	f3ef 8009 	mrs	r0, PSP
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <pxCurrentTCBConst>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f01e 0f10 	tst.w	lr, #16
 8001520:	bf08      	it	eq
 8001522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800152a:	6010      	str	r0, [r2, #0]
 800152c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001534:	f380 8811 	msr	BASEPRI, r0
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	f3bf 8f6f 	isb	sy
 8001540:	f000 f8d2 	bl	80016e8 <vTaskSwitchContext>
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f380 8811 	msr	BASEPRI, r0
 800154c:	bc08      	pop	{r3}
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	6808      	ldr	r0, [r1, #0]
 8001552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001556:	f01e 0f10 	tst.w	lr, #16
 800155a:	bf08      	it	eq
 800155c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001560:	f380 8809 	msr	PSP, r0
 8001564:	f3bf 8f6f 	isb	sy
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w

08001570 <pxCurrentTCBConst>:
 8001570:	20000024 	.word	0x20000024

08001574 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001574:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001586:	f000 f81d 	bl	80015c4 <xTaskIncrementTick>
 800158a:	b118      	cbz	r0, 8001594 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <xPortSysTickHandler+0x28>)
 800158e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001592:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001594:	2300      	movs	r3, #0
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	bd08      	pop	{r3, pc}
 800159c:	e000ed04 	.word	0xe000ed04

080015a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <prvResetNextTaskUnblockTime+0x1c>)
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <prvResetNextTaskUnblockTime+0x20>)
 80015a8:	b919      	cbnz	r1, 80015b2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015b6:	68d2      	ldr	r2, [r2, #12]
 80015b8:	6852      	ldr	r2, [r2, #4]
 80015ba:	e7f8      	b.n	80015ae <prvResetNextTaskUnblockTime+0xe>
 80015bc:	20000028 	.word	0x20000028
 80015c0:	200000c8 	.word	0x200000c8

080015c4 <xTaskIncrementTick>:
{
 80015c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <xTaskIncrementTick+0xf8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d153      	bne.n	8001678 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <xTaskIncrementTick+0xfc>)
 80015d2:	681c      	ldr	r4, [r3, #0]
 80015d4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80015d6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80015d8:	b9bc      	cbnz	r4, 800160a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <xTaskIncrementTick+0x100>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	b142      	cbz	r2, 80015f4 <xTaskIncrementTick+0x30>
	__asm volatile
 80015e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
 80015f2:	e7fe      	b.n	80015f2 <xTaskIncrementTick+0x2e>
 80015f4:	4a34      	ldr	r2, [pc, #208]	; (80016c8 <xTaskIncrementTick+0x104>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	6810      	ldr	r0, [r2, #0]
 80015fa:	6018      	str	r0, [r3, #0]
 80015fc:	6011      	str	r1, [r2, #0]
 80015fe:	4a33      	ldr	r2, [pc, #204]	; (80016cc <xTaskIncrementTick+0x108>)
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	f7ff ffcb 	bl	80015a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800160a:	4d31      	ldr	r5, [pc, #196]	; (80016d0 <xTaskIncrementTick+0x10c>)
 800160c:	4f31      	ldr	r7, [pc, #196]	; (80016d4 <xTaskIncrementTick+0x110>)
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	429c      	cmp	r4, r3
 8001612:	f04f 0b00 	mov.w	fp, #0
 8001616:	d33e      	bcc.n	8001696 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001618:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80016c4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800161c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80016e4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001620:	f8d8 2000 	ldr.w	r2, [r8]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	bb72      	cbnz	r2, 8001686 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800162c:	602a      	str	r2, [r5, #0]
					break;
 800162e:	e032      	b.n	8001696 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001630:	f106 0a04 	add.w	sl, r6, #4
 8001634:	4650      	mov	r0, sl
 8001636:	f7ff ff41 	bl	80014bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800163a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800163c:	b119      	cbz	r1, 8001646 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800163e:	f106 0018 	add.w	r0, r6, #24
 8001642:	f7ff ff3b 	bl	80014bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001646:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001648:	f8d9 3000 	ldr.w	r3, [r9]
 800164c:	2201      	movs	r2, #1
 800164e:	fa02 f100 	lsl.w	r1, r2, r0
 8001652:	4319      	orrs	r1, r3
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <xTaskIncrementTick+0x114>)
 8001656:	f8c9 1000 	str.w	r1, [r9]
 800165a:	f04f 0e14 	mov.w	lr, #20
 800165e:	4651      	mov	r1, sl
 8001660:	fb0e 3000 	mla	r0, lr, r0, r3
 8001664:	f7ff ff1e 	bl	80014a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800166c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800166e:	4291      	cmp	r1, r2
 8001670:	bf28      	it	cs
 8001672:	f04f 0b01 	movcs.w	fp, #1
 8001676:	e7d3      	b.n	8001620 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001678:	4a18      	ldr	r2, [pc, #96]	; (80016dc <xTaskIncrementTick+0x118>)
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001680:	f04f 0b00 	mov.w	fp, #0
 8001684:	e011      	b.n	80016aa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001686:	f8d8 2000 	ldr.w	r2, [r8]
 800168a:	68d2      	ldr	r2, [r2, #12]
 800168c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800168e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001690:	428c      	cmp	r4, r1
 8001692:	d2cd      	bcs.n	8001630 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001694:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <xTaskIncrementTick+0x114>)
 800169a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800169c:	2214      	movs	r2, #20
 800169e:	434a      	muls	r2, r1
 80016a0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80016a2:	2a02      	cmp	r2, #2
 80016a4:	bf28      	it	cs
 80016a6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80016aa:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <xTaskIncrementTick+0x11c>)
 80016ac:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	bf18      	it	ne
 80016b2:	f04f 0b01 	movne.w	fp, #1
}
 80016b6:	4658      	mov	r0, fp
 80016b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016bc:	200000c0 	.word	0x200000c0
 80016c0:	200000d4 	.word	0x200000d4
 80016c4:	20000028 	.word	0x20000028
 80016c8:	2000002c 	.word	0x2000002c
 80016cc:	200000cc 	.word	0x200000cc
 80016d0:	200000c8 	.word	0x200000c8
 80016d4:	20000024 	.word	0x20000024
 80016d8:	20000030 	.word	0x20000030
 80016dc:	200000bc 	.word	0x200000bc
 80016e0:	200000d8 	.word	0x200000d8
 80016e4:	200000c4 	.word	0x200000c4

080016e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <vTaskSwitchContext+0x60>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <vTaskSwitchContext+0x64>)
{
 80016ee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016f0:	b112      	cbz	r2, 80016f8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80016f2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80016f8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <vTaskSwitchContext+0x68>)
 80016fc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f1c3 031f 	rsb	r3, r3, #31
 8001708:	2214      	movs	r2, #20
 800170a:	4912      	ldr	r1, [pc, #72]	; (8001754 <vTaskSwitchContext+0x6c>)
 800170c:	435a      	muls	r2, r3
 800170e:	1888      	adds	r0, r1, r2
 8001710:	588c      	ldr	r4, [r1, r2]
 8001712:	b944      	cbnz	r4, 8001726 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	e7fe      	b.n	8001724 <vTaskSwitchContext+0x3c>
 8001726:	6844      	ldr	r4, [r0, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	6864      	ldr	r4, [r4, #4]
 800172c:	6044      	str	r4, [r0, #4]
 800172e:	440a      	add	r2, r1
 8001730:	4294      	cmp	r4, r2
 8001732:	bf04      	itt	eq
 8001734:	6862      	ldreq	r2, [r4, #4]
 8001736:	6042      	streq	r2, [r0, #4]
 8001738:	2214      	movs	r2, #20
 800173a:	fb02 1303 	mla	r3, r2, r3, r1
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <vTaskSwitchContext+0x70>)
 8001744:	e7d6      	b.n	80016f4 <vTaskSwitchContext+0xc>
 8001746:	bf00      	nop
 8001748:	200000c0 	.word	0x200000c0
 800174c:	200000d8 	.word	0x200000d8
 8001750:	200000c4 	.word	0x200000c4
 8001754:	20000030 	.word	0x20000030
 8001758:	20000024 	.word	0x20000024

0800175c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <xTaskGetSchedulerState+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b133      	cbz	r3, 8001770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <xTaskGetSchedulerState+0x1c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001768:	bf0c      	ite	eq
 800176a:	2002      	moveq	r0, #2
 800176c:	2000      	movne	r0, #0
 800176e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001770:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 8001772:	4770      	bx	lr
 8001774:	200000d0 	.word	0x200000d0
 8001778:	200000c0 	.word	0x200000c0

0800177c <getDigitFromInt>:
	current_digit = (current_digit + 1) % 6;
	return;
}

unsigned char getDigitFromInt(unsigned int display_val, unsigned char pos)
{
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <getDigitFromInt+0x24>)
 800177e:	4298      	cmp	r0, r3
 8001780:	bf28      	it	cs
 8001782:	4618      	movcs	r0, r3
 8001784:	220a      	movs	r2, #10
 8001786:	2300      	movs	r3, #0
	if(display_val > 999999) {
		display_val = 999999;
	}


	for (int i = 0; i < pos; i++) {
 8001788:	428b      	cmp	r3, r1
 800178a:	db05      	blt.n	8001798 <getDigitFromInt+0x1c>
		display_val /= 10;
	}
	digit = display_val % 10;
 800178c:	fbb0 f3f2 	udiv	r3, r0, r2
 8001790:	fb02 0013 	mls	r0, r2, r3, r0

	return digit;

}
 8001794:	b2c0      	uxtb	r0, r0
 8001796:	4770      	bx	lr
		display_val /= 10;
 8001798:	fbb0 f0f2 	udiv	r0, r0, r2
	for (int i = 0; i < pos; i++) {
 800179c:	3301      	adds	r3, #1
 800179e:	e7f3      	b.n	8001788 <getDigitFromInt+0xc>
 80017a0:	000f423f 	.word	0x000f423f

080017a4 <getDigitMask>:
unsigned char getDigitMask(unsigned char digit)
{
	unsigned char digit_mask = 0;

	if(digit > 9) {
		digit = 8;
 80017a4:	2809      	cmp	r0, #9
 80017a6:	bf88      	it	hi
 80017a8:	2008      	movhi	r0, #8
	case 9:
		digit_mask = 0b11100110;
		break;
	}
	return digit_mask;
}
 80017aa:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <getDigitMask+0xc>)
 80017ac:	5c18      	ldrb	r0, [r3, r0]
 80017ae:	4770      	bx	lr
 80017b0:	08002380 	.word	0x08002380

080017b4 <updateCharacterDisplay>:
{
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digit = getDigitFromInt(display_val, current_digit);
 80017b6:	4c41      	ldr	r4, [pc, #260]	; (80018bc <updateCharacterDisplay+0x108>)
 80017b8:	7821      	ldrb	r1, [r4, #0]
 80017ba:	f7ff ffdf 	bl	800177c <getDigitFromInt>
	digit_bitmask = getDigitMask(digit);
 80017be:	f7ff fff1 	bl	80017a4 <getDigitMask>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
	digit_bitmask = getDigitMask(digit);
 80017c4:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <updateCharacterDisplay+0x10c>)
 80017cc:	f7ff f8b2 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d6:	483a      	ldr	r0, [pc, #232]	; (80018c0 <updateCharacterDisplay+0x10c>)
 80017d8:	f7ff f8ac 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	4837      	ldr	r0, [pc, #220]	; (80018c0 <updateCharacterDisplay+0x10c>)
 80017e4:	f7ff f8a6 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4834      	ldr	r0, [pc, #208]	; (80018c0 <updateCharacterDisplay+0x10c>)
 80017f0:	f7ff f8a0 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	4831      	ldr	r0, [pc, #196]	; (80018c0 <updateCharacterDisplay+0x10c>)
 80017fc:	f7ff f89a 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	482e      	ldr	r0, [pc, #184]	; (80018c0 <updateCharacterDisplay+0x10c>)
 8001808:	f7ff f894 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001812:	482b      	ldr	r0, [pc, #172]	; (80018c0 <updateCharacterDisplay+0x10c>)
 8001814:	f7ff f88e 	bl	8000934 <HAL_GPIO_WritePin>
	asm("NOP");
 8001818:	bf00      	nop
	asm("NOP");
 800181a:	bf00      	nop
	asm("NOP");
 800181c:	bf00      	nop
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <updateCharacterDisplay+0x10c>)
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001826:	4e26      	ldr	r6, [pc, #152]	; (80018c0 <updateCharacterDisplay+0x10c>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001828:	f7ff f884 	bl	8000934 <HAL_GPIO_WritePin>
 800182c:	2500      	movs	r5, #0
		if( (digit_bitmask >> inc & 0x01) == 1) {
 800182e:	fa27 f305 	lsr.w	r3, r7, r5
 8001832:	07db      	lsls	r3, r3, #31
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001834:	bf4c      	ite	mi
 8001836:	2200      	movmi	r2, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001838:	2201      	movpl	r2, #1
 800183a:	4630      	mov	r0, r6
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	f7ff f879 	bl	8000934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	4630      	mov	r0, r6
 800184a:	f7ff f873 	bl	8000934 <HAL_GPIO_WritePin>
		asm("NOP");
 800184e:	bf00      	nop
		asm("NOP");
 8001850:	bf00      	nop
		asm("NOP");
 8001852:	bf00      	nop
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185a:	4630      	mov	r0, r6
 800185c:	3501      	adds	r5, #1
 800185e:	f7ff f869 	bl	8000934 <HAL_GPIO_WritePin>
	for(unsigned char inc = 0; inc < 8; inc++) {
 8001862:	2d08      	cmp	r5, #8
 8001864:	d1e3      	bne.n	800182e <updateCharacterDisplay+0x7a>
	switch(current_digit) {
 8001866:	7823      	ldrb	r3, [r4, #0]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d80a      	bhi.n	8001882 <updateCharacterDisplay+0xce>
 800186c:	e8df f003 	tbb	[pc, r3]
 8001870:	1a161203 	.word	0x1a161203
 8001874:	221e      	.short	0x221e
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 6180 	mov.w	r1, #1024	; 0x400
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <updateCharacterDisplay+0x10c>)
 800187e:	f7ff f859 	bl	8000934 <HAL_GPIO_WritePin>
	current_digit = (current_digit + 1) % 6;
 8001882:	7823      	ldrb	r3, [r4, #0]
 8001884:	2106      	movs	r1, #6
 8001886:	3301      	adds	r3, #1
 8001888:	fb93 f2f1 	sdiv	r2, r3, r1
 800188c:	fb01 3312 	mls	r3, r1, r2, r3
 8001890:	7023      	strb	r3, [r4, #0]
 8001892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189a:	e7ef      	b.n	800187c <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a2:	e7eb      	b.n	800187c <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018aa:	e7e7      	b.n	800187c <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	e7e3      	b.n	800187c <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ba:	e7df      	b.n	800187c <updateCharacterDisplay+0xc8>
 80018bc:	200000dd 	.word	0x200000dd
 80018c0:	40021000 	.word	0x40021000

080018c4 <updateRgDisplay>:

void updateRgDisplay(unsigned int red_mask, unsigned int green_mask)
{
 80018c4:	b570      	push	{r4, r5, r6, lr}
	static unsigned char bank = 0;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
{
 80018c8:	4605      	mov	r5, r0
 80018ca:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 80018cc:	48a2      	ldr	r0, [pc, #648]	; (8001b58 <updateRgDisplay+0x294>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);

	switch(bank) {
 80018ce:	4ea3      	ldr	r6, [pc, #652]	; (8001b5c <updateRgDisplay+0x298>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 80018d0:	2101      	movs	r1, #1
 80018d2:	f7ff f82f 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2102      	movs	r1, #2
 80018da:	489f      	ldr	r0, [pc, #636]	; (8001b58 <updateRgDisplay+0x294>)
 80018dc:	f7ff f82a 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	489c      	ldr	r0, [pc, #624]	; (8001b58 <updateRgDisplay+0x294>)
 80018e6:	f7ff f825 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2108      	movs	r1, #8
 80018ee:	489a      	ldr	r0, [pc, #616]	; (8001b58 <updateRgDisplay+0x294>)
 80018f0:	f7ff f820 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2110      	movs	r1, #16
 80018f8:	4897      	ldr	r0, [pc, #604]	; (8001b58 <updateRgDisplay+0x294>)
 80018fa:	f7ff f81b 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2120      	movs	r1, #32
 8001902:	4895      	ldr	r0, [pc, #596]	; (8001b58 <updateRgDisplay+0x294>)
 8001904:	f7ff f816 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	4892      	ldr	r0, [pc, #584]	; (8001b58 <updateRgDisplay+0x294>)
 800190e:	f7ff f811 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	4890      	ldr	r0, [pc, #576]	; (8001b58 <updateRgDisplay+0x294>)
 8001918:	f7ff f80c 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	488d      	ldr	r0, [pc, #564]	; (8001b58 <updateRgDisplay+0x294>)
 8001924:	f7ff f806 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <updateRgDisplay+0x294>)
 8001930:	f7ff f800 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800193a:	4887      	ldr	r0, [pc, #540]	; (8001b58 <updateRgDisplay+0x294>)
 800193c:	f7fe fffa 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001946:	4884      	ldr	r0, [pc, #528]	; (8001b58 <updateRgDisplay+0x294>)
 8001948:	f7fe fff4 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001952:	4881      	ldr	r0, [pc, #516]	; (8001b58 <updateRgDisplay+0x294>)
 8001954:	f7fe ffee 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195e:	487e      	ldr	r0, [pc, #504]	; (8001b58 <updateRgDisplay+0x294>)
 8001960:	f7fe ffe8 	bl	8000934 <HAL_GPIO_WritePin>
	switch(bank) {
 8001964:	7833      	ldrb	r3, [r6, #0]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d857      	bhi.n	8001a1a <updateRgDisplay+0x156>
 800196a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800196e:	0004      	.short	0x0004
 8001970:	00a8005c 	.word	0x00a8005c
 8001974:	00f9      	.short	0x00f9
	case(0):
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	4877      	ldr	r0, [pc, #476]	; (8001b58 <updateRgDisplay+0x294>)
 800197a:	4611      	mov	r1, r2
 800197c:	f7fe ffda 	bl	8000934 <HAL_GPIO_WritePin>

			if(red_mask >> 3 & 0x01)
 8001980:	0728      	lsls	r0, r5, #28
 8001982:	d505      	bpl.n	8001990 <updateRgDisplay+0xcc>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198a:	4873      	ldr	r0, [pc, #460]	; (8001b58 <updateRgDisplay+0x294>)
 800198c:	f7fe ffd2 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 7 & 0x01)
 8001990:	0629      	lsls	r1, r5, #24
 8001992:	d504      	bpl.n	800199e <updateRgDisplay+0xda>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	486f      	ldr	r0, [pc, #444]	; (8001b58 <updateRgDisplay+0x294>)
 800199a:	f7fe ffcb 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 11 & 0x01)
 800199e:	052a      	lsls	r2, r5, #20
 80019a0:	d504      	bpl.n	80019ac <updateRgDisplay+0xe8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	486c      	ldr	r0, [pc, #432]	; (8001b58 <updateRgDisplay+0x294>)
 80019a8:	f7fe ffc4 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 15 & 0x01)
 80019ac:	042b      	lsls	r3, r5, #16
 80019ae:	d504      	bpl.n	80019ba <updateRgDisplay+0xf6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2120      	movs	r1, #32
 80019b4:	4868      	ldr	r0, [pc, #416]	; (8001b58 <updateRgDisplay+0x294>)
 80019b6:	f7fe ffbd 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 19 & 0x01)
 80019ba:	0328      	lsls	r0, r5, #12
 80019bc:	d504      	bpl.n	80019c8 <updateRgDisplay+0x104>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2110      	movs	r1, #16
 80019c2:	4865      	ldr	r0, [pc, #404]	; (8001b58 <updateRgDisplay+0x294>)
 80019c4:	f7fe ffb6 	bl	8000934 <HAL_GPIO_WritePin>

			if(green_mask >> 3 & 0x01)
 80019c8:	0721      	lsls	r1, r4, #28
 80019ca:	d505      	bpl.n	80019d8 <updateRgDisplay+0x114>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d2:	4861      	ldr	r0, [pc, #388]	; (8001b58 <updateRgDisplay+0x294>)
 80019d4:	f7fe ffae 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 7 & 0x01)
 80019d8:	0622      	lsls	r2, r4, #24
 80019da:	d505      	bpl.n	80019e8 <updateRgDisplay+0x124>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e2:	485d      	ldr	r0, [pc, #372]	; (8001b58 <updateRgDisplay+0x294>)
 80019e4:	f7fe ffa6 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 11 & 0x01)
 80019e8:	0523      	lsls	r3, r4, #20
 80019ea:	d505      	bpl.n	80019f8 <updateRgDisplay+0x134>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f2:	4859      	ldr	r0, [pc, #356]	; (8001b58 <updateRgDisplay+0x294>)
 80019f4:	f7fe ff9e 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 15 & 0x01)
 80019f8:	0425      	lsls	r5, r4, #16
 80019fa:	d505      	bpl.n	8001a08 <updateRgDisplay+0x144>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a02:	4855      	ldr	r0, [pc, #340]	; (8001b58 <updateRgDisplay+0x294>)
 8001a04:	f7fe ff96 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 19 & 0x01)
 8001a08:	f414 2f00 	tst.w	r4, #524288	; 0x80000
 8001a0c:	d005      	beq.n	8001a1a <updateRgDisplay+0x156>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a14:	4850      	ldr	r0, [pc, #320]	; (8001b58 <updateRgDisplay+0x294>)
 8001a16:	f7fe ff8d 	bl	8000934 <HAL_GPIO_WritePin>

			break;

	}

	bank = (bank + 1) % 4;
 8001a1a:	7833      	ldrb	r3, [r6, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	7033      	strb	r3, [r6, #0]
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_SET);
 8001a26:	484c      	ldr	r0, [pc, #304]	; (8001b58 <updateRgDisplay+0x294>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	f7fe ff82 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 2 & 0x01)
 8001a30:	0768      	lsls	r0, r5, #29
 8001a32:	d505      	bpl.n	8001a40 <updateRgDisplay+0x17c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	4847      	ldr	r0, [pc, #284]	; (8001b58 <updateRgDisplay+0x294>)
 8001a3c:	f7fe ff7a 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 6 & 0x01)
 8001a40:	0669      	lsls	r1, r5, #25
 8001a42:	d504      	bpl.n	8001a4e <updateRgDisplay+0x18a>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	4843      	ldr	r0, [pc, #268]	; (8001b58 <updateRgDisplay+0x294>)
 8001a4a:	f7fe ff73 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 10 & 0x01)
 8001a4e:	056a      	lsls	r2, r5, #21
 8001a50:	d504      	bpl.n	8001a5c <updateRgDisplay+0x198>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2140      	movs	r1, #64	; 0x40
 8001a56:	4840      	ldr	r0, [pc, #256]	; (8001b58 <updateRgDisplay+0x294>)
 8001a58:	f7fe ff6c 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 14 & 0x01)
 8001a5c:	046b      	lsls	r3, r5, #17
 8001a5e:	d504      	bpl.n	8001a6a <updateRgDisplay+0x1a6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2120      	movs	r1, #32
 8001a64:	483c      	ldr	r0, [pc, #240]	; (8001b58 <updateRgDisplay+0x294>)
 8001a66:	f7fe ff65 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 18 & 0x01)
 8001a6a:	0368      	lsls	r0, r5, #13
 8001a6c:	d504      	bpl.n	8001a78 <updateRgDisplay+0x1b4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2110      	movs	r1, #16
 8001a72:	4839      	ldr	r0, [pc, #228]	; (8001b58 <updateRgDisplay+0x294>)
 8001a74:	f7fe ff5e 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 2 & 0x01)
 8001a78:	0761      	lsls	r1, r4, #29
 8001a7a:	d505      	bpl.n	8001a88 <updateRgDisplay+0x1c4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a82:	4835      	ldr	r0, [pc, #212]	; (8001b58 <updateRgDisplay+0x294>)
 8001a84:	f7fe ff56 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 6 & 0x01)
 8001a88:	0662      	lsls	r2, r4, #25
 8001a8a:	d505      	bpl.n	8001a98 <updateRgDisplay+0x1d4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a92:	4831      	ldr	r0, [pc, #196]	; (8001b58 <updateRgDisplay+0x294>)
 8001a94:	f7fe ff4e 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 10 & 0x01)
 8001a98:	0563      	lsls	r3, r4, #21
 8001a9a:	d505      	bpl.n	8001aa8 <updateRgDisplay+0x1e4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa2:	482d      	ldr	r0, [pc, #180]	; (8001b58 <updateRgDisplay+0x294>)
 8001aa4:	f7fe ff46 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 14 & 0x01)
 8001aa8:	0465      	lsls	r5, r4, #17
 8001aaa:	d505      	bpl.n	8001ab8 <updateRgDisplay+0x1f4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab2:	4829      	ldr	r0, [pc, #164]	; (8001b58 <updateRgDisplay+0x294>)
 8001ab4:	f7fe ff3e 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 18 & 0x01)
 8001ab8:	f414 2f80 	tst.w	r4, #262144	; 0x40000
 8001abc:	e7a6      	b.n	8001a0c <updateRgDisplay+0x148>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 8001abe:	4826      	ldr	r0, [pc, #152]	; (8001b58 <updateRgDisplay+0x294>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	f7fe ff36 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 1 & 0x01)
 8001ac8:	07a8      	lsls	r0, r5, #30
 8001aca:	d505      	bpl.n	8001ad8 <updateRgDisplay+0x214>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad2:	4821      	ldr	r0, [pc, #132]	; (8001b58 <updateRgDisplay+0x294>)
 8001ad4:	f7fe ff2e 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 5 & 0x01)
 8001ad8:	06a9      	lsls	r1, r5, #26
 8001ada:	d504      	bpl.n	8001ae6 <updateRgDisplay+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <updateRgDisplay+0x294>)
 8001ae2:	f7fe ff27 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 9 & 0x01)
 8001ae6:	05aa      	lsls	r2, r5, #22
 8001ae8:	d504      	bpl.n	8001af4 <updateRgDisplay+0x230>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	481a      	ldr	r0, [pc, #104]	; (8001b58 <updateRgDisplay+0x294>)
 8001af0:	f7fe ff20 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 13 & 0x01)
 8001af4:	04ab      	lsls	r3, r5, #18
 8001af6:	d504      	bpl.n	8001b02 <updateRgDisplay+0x23e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <updateRgDisplay+0x294>)
 8001afe:	f7fe ff19 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 17 & 0x01)
 8001b02:	03a8      	lsls	r0, r5, #14
 8001b04:	d504      	bpl.n	8001b10 <updateRgDisplay+0x24c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <updateRgDisplay+0x294>)
 8001b0c:	f7fe ff12 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 1 & 0x01)
 8001b10:	07a1      	lsls	r1, r4, #30
 8001b12:	d505      	bpl.n	8001b20 <updateRgDisplay+0x25c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <updateRgDisplay+0x294>)
 8001b1c:	f7fe ff0a 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 5 & 0x01)
 8001b20:	06a2      	lsls	r2, r4, #26
 8001b22:	d505      	bpl.n	8001b30 <updateRgDisplay+0x26c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <updateRgDisplay+0x294>)
 8001b2c:	f7fe ff02 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 9 & 0x01)
 8001b30:	05a3      	lsls	r3, r4, #22
 8001b32:	d505      	bpl.n	8001b40 <updateRgDisplay+0x27c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <updateRgDisplay+0x294>)
 8001b3c:	f7fe fefa 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 13 & 0x01)
 8001b40:	04a5      	lsls	r5, r4, #18
 8001b42:	d505      	bpl.n	8001b50 <updateRgDisplay+0x28c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	4803      	ldr	r0, [pc, #12]	; (8001b58 <updateRgDisplay+0x294>)
 8001b4c:	f7fe fef2 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 17 & 0x01)
 8001b50:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001b54:	e75a      	b.n	8001a0c <updateRgDisplay+0x148>
 8001b56:	bf00      	nop
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	200000dc 	.word	0x200000dc
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_SET);
 8001b60:	4825      	ldr	r0, [pc, #148]	; (8001bf8 <updateRgDisplay+0x334>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	2108      	movs	r1, #8
 8001b66:	f7fe fee5 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 0 & 0x01)
 8001b6a:	07e8      	lsls	r0, r5, #31
 8001b6c:	d505      	bpl.n	8001b7a <updateRgDisplay+0x2b6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b74:	4820      	ldr	r0, [pc, #128]	; (8001bf8 <updateRgDisplay+0x334>)
 8001b76:	f7fe fedd 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 4 & 0x01)
 8001b7a:	06e9      	lsls	r1, r5, #27
 8001b7c:	d504      	bpl.n	8001b88 <updateRgDisplay+0x2c4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	481d      	ldr	r0, [pc, #116]	; (8001bf8 <updateRgDisplay+0x334>)
 8001b84:	f7fe fed6 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 8 & 0x01)
 8001b88:	05ea      	lsls	r2, r5, #23
 8001b8a:	d504      	bpl.n	8001b96 <updateRgDisplay+0x2d2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4819      	ldr	r0, [pc, #100]	; (8001bf8 <updateRgDisplay+0x334>)
 8001b92:	f7fe fecf 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 12 & 0x01)
 8001b96:	04eb      	lsls	r3, r5, #19
 8001b98:	d504      	bpl.n	8001ba4 <updateRgDisplay+0x2e0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <updateRgDisplay+0x334>)
 8001ba0:	f7fe fec8 	bl	8000934 <HAL_GPIO_WritePin>
			if(red_mask >> 16 & 0x01)
 8001ba4:	03ed      	lsls	r5, r5, #15
 8001ba6:	d504      	bpl.n	8001bb2 <updateRgDisplay+0x2ee>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <updateRgDisplay+0x334>)
 8001bae:	f7fe fec1 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 0 & 0x01)
 8001bb2:	07e0      	lsls	r0, r4, #31
 8001bb4:	d505      	bpl.n	8001bc2 <updateRgDisplay+0x2fe>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbc:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <updateRgDisplay+0x334>)
 8001bbe:	f7fe feb9 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 4 & 0x01)
 8001bc2:	06e1      	lsls	r1, r4, #27
 8001bc4:	d505      	bpl.n	8001bd2 <updateRgDisplay+0x30e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <updateRgDisplay+0x334>)
 8001bce:	f7fe feb1 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 8 & 0x01)
 8001bd2:	05e2      	lsls	r2, r4, #23
 8001bd4:	d505      	bpl.n	8001be2 <updateRgDisplay+0x31e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <updateRgDisplay+0x334>)
 8001bde:	f7fe fea9 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 12 & 0x01)
 8001be2:	04e3      	lsls	r3, r4, #19
 8001be4:	d505      	bpl.n	8001bf2 <updateRgDisplay+0x32e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <updateRgDisplay+0x334>)
 8001bee:	f7fe fea1 	bl	8000934 <HAL_GPIO_WritePin>
			if(green_mask >> 16 & 0x01)
 8001bf2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001bf6:	e709      	b.n	8001a0c <updateRgDisplay+0x148>
 8001bf8:	40020c00 	.word	0x40020c00

08001bfc <updateStatusDisplay>:
}


void updateStatusDisplay(unsigned int status_mask)
{
 8001bfc:	b538      	push	{r3, r4, r5, lr}
	unsigned static char led = 0;
	led = (led + 1) % 8;
 8001bfe:	4d30      	ldr	r5, [pc, #192]	; (8001cc0 <updateStatusDisplay+0xc4>)
 8001c00:	782b      	ldrb	r3, [r5, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	f003 0307 	and.w	r3, r3, #7

	//Start with LED 8 (power LED)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2101      	movs	r1, #1
{
 8001c0c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c0e:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <updateStatusDisplay+0xc8>)
	led = (led + 1) % 8;
 8001c10:	702b      	strb	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c12:	f7fe fe8f 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2102      	movs	r1, #2
 8001c1a:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c1c:	f7fe fe8a 	bl	8000934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2104      	movs	r1, #4
 8001c24:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c26:	f7fe fe85 	bl	8000934 <HAL_GPIO_WritePin>

	switch(led) {
 8001c2a:	782b      	ldrb	r3, [r5, #0]
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d845      	bhi.n	8001cbc <updateStatusDisplay+0xc0>
 8001c30:	e8df f003 	tbb	[pc, r3]
 8001c34:	2e251204 	.word	0x2e251204
 8001c38:	3c37      	.short	0x3c37
 8001c3a:	40          	.byte	0x40
 8001c3b:	00          	.byte	0x00
	case(0):
			if(status_mask >> 0 & 0x01) {
 8001c3c:	07e3      	lsls	r3, r4, #31
 8001c3e:	d53d      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
			}
			break;
	case(5):
			if(status_mask >> 5 & 0x01) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c42:	2101      	movs	r1, #1
 8001c44:	481f      	ldr	r0, [pc, #124]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c46:	f7fe fe75 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
			}
			break;
	case(6):
			if(status_mask >> 6 & 0x01) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c50:	f7fe fe70 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	e00c      	b.n	8001c72 <updateStatusDisplay+0x76>
			if(status_mask >> 1 & 0x01) {
 8001c58:	07a5      	lsls	r5, r4, #30
 8001c5a:	d52f      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c62:	f7fe fe67 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c6c:	f7fe fe62 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8001c72:	2104      	movs	r1, #4
 8001c74:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <updateStatusDisplay+0xc8>)

	}


	return;
}
 8001c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8001c7a:	f7fe be5b 	b.w	8000934 <HAL_GPIO_WritePin>
			if(status_mask >> 2 & 0x01) {
 8001c7e:	0764      	lsls	r4, r4, #29
 8001c80:	d51c      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c84:	2101      	movs	r1, #1
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c88:	f7fe fe54 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	e7dd      	b.n	8001c4c <updateStatusDisplay+0x50>
			if(status_mask >> 3 & 0x01) {
 8001c90:	0720      	lsls	r0, r4, #28
 8001c92:	d513      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2101      	movs	r1, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <updateStatusDisplay+0xc8>)
 8001c9a:	f7fe fe4b 	bl	8000934 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	e7e2      	b.n	8001c68 <updateStatusDisplay+0x6c>
			if(status_mask >> 4 & 0x01) {
 8001ca2:	06e1      	lsls	r1, r4, #27
 8001ca4:	d50a      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4611      	mov	r1, r2
 8001caa:	e7f5      	b.n	8001c98 <updateStatusDisplay+0x9c>
			if(status_mask >> 5 & 0x01) {
 8001cac:	06a2      	lsls	r2, r4, #26
 8001cae:	d505      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	e7c6      	b.n	8001c42 <updateStatusDisplay+0x46>
			if(status_mask >> 6 & 0x01) {
 8001cb4:	0663      	lsls	r3, r4, #25
 8001cb6:	d501      	bpl.n	8001cbc <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	e7e3      	b.n	8001c84 <updateStatusDisplay+0x88>
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000de 	.word	0x200000de
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC9   ------> I2S_CKIN
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8001cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cce:	2400      	movs	r4, #0
 8001cd0:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <MX_GPIO_Init+0x1b0>)
 8001cd2:	9401      	str	r4, [sp, #4]
 8001cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8001cd6:	4f69      	ldr	r7, [pc, #420]	; (8001e7c <MX_GPIO_Init+0x1b4>)
                          |GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cd8:	4e69      	ldr	r6, [pc, #420]	; (8001e80 <MX_GPIO_Init+0x1b8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8001cda:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001e84 <MX_GPIO_Init+0x1bc>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001cde:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8001e88 <MX_GPIO_Init+0x1c0>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001e8c <MX_GPIO_Init+0x1c4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	f042 0210 	orr.w	r2, r2, #16
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cee:	f002 0210 	and.w	r2, r2, #16
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	9402      	str	r4, [sp, #8]
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfa:	f042 0204 	orr.w	r2, r2, #4
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d02:	f002 0204 	and.w	r2, r2, #4
 8001d06:	9202      	str	r2, [sp, #8]
 8001d08:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	9403      	str	r4, [sp, #12]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
 8001d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d16:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d1a:	9203      	str	r2, [sp, #12]
 8001d1c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	9404      	str	r4, [sp, #16]
 8001d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
 8001d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2a:	f002 0201 	and.w	r2, r2, #1
 8001d2e:	9204      	str	r2, [sp, #16]
 8001d30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	9405      	str	r4, [sp, #20]
 8001d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d36:	f042 0202 	orr.w	r2, r2, #2
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3e:	f002 0202 	and.w	r2, r2, #2
 8001d42:	9205      	str	r2, [sp, #20]
 8001d44:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	9406      	str	r4, [sp, #24]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	f042 0208 	orr.w	r2, r2, #8
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8001d58:	4622      	mov	r2, r4
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	f242 1133 	movw	r1, #8499	; 0x2133
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8001d62:	f7fe fde7 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d66:	4622      	mov	r2, r4
 8001d68:	4630      	mov	r0, r6
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	f7fe fde2 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8001d70:	4622      	mov	r2, r4
 8001d72:	4648      	mov	r0, r9
 8001d74:	f248 2137 	movw	r1, #33335	; 0x8237
 8001d78:	f7fe fddc 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4650      	mov	r0, sl
 8001d80:	f64f 7181 	movw	r1, #65409	; 0xff81
 8001d84:	f7fe fdd6 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001d88:	4622      	mov	r2, r4
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001d90:	f7fe fdd0 	bl	8000934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001d94:	237e      	movs	r3, #126	; 0x7e
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d96:	a907      	add	r1, sp, #28
 8001d98:	4650      	mov	r0, sl

  /*Configure GPIO pins : PC13 PC0 PC1 PC4 
                           PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001d9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da2:	f7fe fc81 	bl	80006a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8001da6:	f242 1333 	movw	r3, #8499	; 0x2133
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	a907      	add	r1, sp, #28
 8001dac:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8001dae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f7fe fc77 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dba:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	a907      	add	r1, sp, #28
 8001dbe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f7fe fc6e 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB15 
                           PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8001dcc:	f248 2337 	movw	r3, #33335	; 0x8237
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	a907      	add	r1, sp, #28
 8001dd2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8001dd4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f7fe fc64 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001de0:	f64f 7381 	movw	r3, #65409	; 0xff81
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de4:	a907      	add	r1, sp, #28
 8001de6:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001de8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df0:	f7fe fc5a 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8001df4:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	a907      	add	r1, sp, #28
 8001dfa:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8001dfc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f7fe fc51 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001e06:	f643 73ff 	movw	r3, #16383	; 0x3fff
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	a907      	add	r1, sp, #28
 8001e0c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001e0e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e16:	f7fe fc47 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	a907      	add	r1, sp, #28
 8001e20:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e22:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f7fe fc3e 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e34:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	a907      	add	r1, sp, #28
 8001e38:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f7fe fc31 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e46:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	a907      	add	r1, sp, #28
 8001e4c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e4e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e56:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f7fe fc26 	bl	80006a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e68:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f7fe fc1c 	bl	80006a8 <HAL_GPIO_Init>

}
 8001e70:	b00c      	add	sp, #48	; 0x30
 8001e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40020c00 	.word	0x40020c00

08001e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <SystemClock_Config+0xb0>)
 8001e96:	2100      	movs	r1, #0
 8001e98:	9101      	str	r1, [sp, #4]
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <SystemClock_Config+0xb4>)
 8001eae:	9102      	str	r1, [sp, #8]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eca:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ed0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ed2:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ed6:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ed8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eda:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001edc:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee0:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ee4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee6:	f7fe fd3f 	bl	8000968 <HAL_RCC_OscConfig>
 8001eea:	b100      	cbz	r0, 8001eee <SystemClock_Config+0x5e>
 8001eec:	e7fe      	b.n	8001eec <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efc:	2105      	movs	r1, #5
 8001efe:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f00:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f04:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f06:	f7fe ffcd 	bl	8000ea4 <HAL_RCC_ClockConfig>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	b100      	cbz	r0, 8001f10 <SystemClock_Config+0x80>
 8001f0e:	e7fe      	b.n	8001f0e <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8001f10:	4602      	mov	r2, r0
 8001f12:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8001f16:	f7fe ff1f 	bl	8000d58 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f1a:	f7ff f8b7 	bl	800108c <HAL_RCC_GetHCLKFreq>
 8001f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f26:	f7fe fb91 	bl	800064c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f2a:	4630      	mov	r0, r6
 8001f2c:	f7fe fba4 	bl	8000678 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001f30:	4622      	mov	r2, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f38:	f7fe fb30 	bl	800059c <HAL_NVIC_SetPriority>
}
 8001f3c:	b014      	add	sp, #80	; 0x50
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000

08001f48 <main>:
{
 8001f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Init();
 8001f4c:	f7fe fac8 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8001f50:	f7ff ff9e 	bl	8001e90 <SystemClock_Config>
  MX_GPIO_Init();
 8001f54:	f7ff feb8 	bl	8001cc8 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	482d      	ldr	r0, [pc, #180]	; (8002014 <main+0xcc>)
		  display_val = (display_val + 1) % 999999;
 8001f5e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002018 <main+0xd0>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f62:	f7fe fce7 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	4829      	ldr	r0, [pc, #164]	; (8002014 <main+0xcc>)
 8001f6e:	f7fe fce1 	bl	8000934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f78:	4826      	ldr	r0, [pc, #152]	; (8002014 <main+0xcc>)
 8001f7a:	f7fe fcdb 	bl	8000934 <HAL_GPIO_WritePin>
  unsigned int display_val = 0;
 8001f7e:	f04f 0800 	mov.w	r8, #0
  unsigned int status_mask = 1;
 8001f82:	2701      	movs	r7, #1
  unsigned int count = 0;
 8001f84:	4644      	mov	r4, r8
  unsigned int green_mask = 6;
 8001f86:	2606      	movs	r6, #6
  unsigned int red_mask = 3;
 8001f88:	2503      	movs	r5, #3
	  count = (count + 1) % 10000; //ms count
 8001f8a:	f242 7910 	movw	r9, #10000	; 0x2710
	  if( (count % 10) == 0) {
 8001f8e:	f04f 0a0a 	mov.w	sl, #10
	  count = (count + 1) % 10000; //ms count
 8001f92:	3401      	adds	r4, #1
 8001f94:	fbb4 f3f9 	udiv	r3, r4, r9
 8001f98:	fb09 4413 	mls	r4, r9, r3, r4
	  if( (count % 10) == 0) {
 8001f9c:	fbb4 f3fa 	udiv	r3, r4, sl
 8001fa0:	fb0a 4313 	mls	r3, sl, r3, r4
 8001fa4:	b92b      	cbnz	r3, 8001fb2 <main+0x6a>
		  display_val = (display_val + 1) % 999999;
 8001fa6:	f108 0801 	add.w	r8, r8, #1
 8001faa:	fbb8 f3fb 	udiv	r3, r8, fp
 8001fae:	fb0b 8813 	mls	r8, fp, r3, r8
	  if((count % 25) == 0) {
 8001fb2:	2219      	movs	r2, #25
 8001fb4:	fbb4 f3f2 	udiv	r3, r4, r2
 8001fb8:	fb02 4313 	mls	r3, r2, r3, r4
 8001fbc:	b973      	cbnz	r3, 8001fdc <main+0x94>
	  		  red_mask <<= 1;
 8001fbe:	006d      	lsls	r5, r5, #1
	  		  if(red_mask >> 20 & 0x01) {
 8001fc0:	02e9      	lsls	r1, r5, #11
	  		  green_mask <<= 1;
 8001fc2:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8001fc6:	bf44      	itt	mi
 8001fc8:	f3c5 0513 	ubfxmi	r5, r5, #0, #20
	  			  red_mask = red_mask & 0b011111111111111111111;
 8001fcc:	f045 0501 	orrmi.w	r5, r5, #1
	  		  if(green_mask >> 20 & 0x01) {
 8001fd0:	02f2      	lsls	r2, r6, #11
 8001fd2:	bf44      	itt	mi
 8001fd4:	f3c6 0613 	ubfxmi	r6, r6, #0, #20
	  			  green_mask = green_mask & 0b011111111111111111111;
 8001fd8:	f046 0601 	orrmi.w	r6, r6, #1
	  if( (count % 1000) ==  0 ) {
 8001fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe0:	fbb4 f3f2 	udiv	r3, r4, r2
 8001fe4:	fb02 4313 	mls	r3, r2, r3, r4
 8001fe8:	b92b      	cbnz	r3, 8001ff6 <main+0xae>
	  		  status_mask <<= 1;
 8001fea:	007f      	lsls	r7, r7, #1
	  		  if(status_mask >> 8 & 0x01) {
 8001fec:	05fb      	lsls	r3, r7, #23
 8001fee:	bf44      	itt	mi
 8001ff0:	b2ff      	uxtbmi	r7, r7
	  			  status_mask = status_mask & 0x0FF;
 8001ff2:	f047 0701 	orrmi.w	r7, r7, #1
		  updateStatusDisplay(status_mask);
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	f7ff fe00 	bl	8001bfc <updateStatusDisplay>
		  updateRgDisplay(red_mask, green_mask);
 8001ffc:	4631      	mov	r1, r6
 8001ffe:	4628      	mov	r0, r5
 8002000:	f7ff fc60 	bl	80018c4 <updateRgDisplay>
		  updateCharacterDisplay(display_val);
 8002004:	4640      	mov	r0, r8
 8002006:	f7ff fbd5 	bl	80017b4 <updateCharacterDisplay>
	  HAL_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f7fe fa94 	bl	8000538 <HAL_Delay>
	  count = (count + 1) % 10000; //ms count
 8002010:	e7bf      	b.n	8001f92 <main+0x4a>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	000f423f 	.word	0x000f423f

0800201c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800201c:	6802      	ldr	r2, [r0, #0]
 800201e:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002020:	429a      	cmp	r2, r3
 8002022:	d101      	bne.n	8002028 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002024:	f7fe ba76 	b.w	8000514 <HAL_IncTick>
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40000400 	.word	0x40000400

08002030 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8002030:	4770      	bx	lr

08002032 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002032:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f7fe fa93 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	4611      	mov	r1, r2
 800203e:	f06f 000b 	mvn.w	r0, #11
 8002042:	f7fe faab 	bl	800059c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	4611      	mov	r1, r2
 800204a:	f06f 000a 	mvn.w	r0, #10
 800204e:	f7fe faa5 	bl	800059c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	4611      	mov	r1, r2
 8002056:	f06f 0009 	mvn.w	r0, #9
 800205a:	f7fe fa9f 	bl	800059c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	4611      	mov	r1, r2
 8002062:	f06f 0004 	mvn.w	r0, #4
 8002066:	f7fe fa99 	bl	800059c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	4611      	mov	r1, r2
 800206e:	f06f 0003 	mvn.w	r0, #3
 8002072:	f7fe fa93 	bl	800059c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	210f      	movs	r1, #15
 800207a:	f06f 0001 	mvn.w	r0, #1
 800207e:	f7fe fa8d 	bl	800059c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	210f      	movs	r1, #15
 8002086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800208e:	f7fe ba85 	b.w	800059c <HAL_NVIC_SetPriority>
	...

08002094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8002096:	4601      	mov	r1, r0
{
 8002098:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800209a:	2200      	movs	r2, #0
 800209c:	201d      	movs	r0, #29
 800209e:	f7fe fa7d 	bl	800059c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80020a2:	201d      	movs	r0, #29
 80020a4:	f7fe fabc 	bl	8000620 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80020a8:	2500      	movs	r5, #0
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_InitTick+0x6c>)
 80020ac:	9502      	str	r5, [sp, #8]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80020b0:	4c14      	ldr	r4, [pc, #80]	; (8002104 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	f042 0202 	orr.w	r2, r2, #2
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c0:	a901      	add	r1, sp, #4
 80020c2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 80020c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c6:	f7fe fff7 	bl	80010b8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020ca:	f7fe ffe5 	bl	8001098 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_InitTick+0x74>)
 80020d0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80020d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020d6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020d8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_InitTick+0x78>)
 80020dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80020e0:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 80020e2:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80020e4:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 80020e6:	6125      	str	r5, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80020ea:	f7ff f95b 	bl	80013a4 <HAL_TIM_Base_Init>
 80020ee:	b920      	cbnz	r0, 80020fa <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7fe ffff 	bl	80010f4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80020f6:	b009      	add	sp, #36	; 0x24
 80020f8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80020fa:	2001      	movs	r0, #1
 80020fc:	e7fb      	b.n	80020f6 <HAL_InitTick+0x62>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	200000e4 	.word	0x200000e4
 8002108:	40000400 	.word	0x40000400
 800210c:	000f4240 	.word	0x000f4240

08002110 <NMI_Handler>:
 8002110:	4770      	bx	lr

08002112 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler>

08002114 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler>

08002116 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler>

08002118 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler>

0800211a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800211c:	f7ff b9b8 	b.w	8001490 <osSystickHandler>

08002120 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002120:	4801      	ldr	r0, [pc, #4]	; (8002128 <TIM3_IRQHandler+0x8>)
 8002122:	f7ff b839 	b.w	8001198 <HAL_TIM_IRQHandler>
 8002126:	bf00      	nop
 8002128:	200000e4 	.word	0x200000e4

0800212c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	490f      	ldr	r1, [pc, #60]	; (800216c <SystemInit+0x40>)
 800212e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002132:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <SystemInit+0x44>)
 800213c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800213e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002146:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800214e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002152:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <SystemInit+0x48>)
 8002156:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800215e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002160:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002166:	608b      	str	r3, [r1, #8]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	40023800 	.word	0x40023800
 8002174:	24003010 	.word	0x24003010

08002178 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM2)
 800217a:	6803      	ldr	r3, [r0, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d11b      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_TIM_Base_MspInit+0x64>)
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218c:	f041 0101 	orr.w	r1, r1, #1
 8002190:	6411      	str	r1, [r2, #64]	; 0x40
 8002192:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	9303      	str	r3, [sp, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002196:	f002 0201 	and.w	r2, r2, #1
 800219a:	9200      	str	r2, [sp, #0]
 800219c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a4:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f7fe fa7a 	bl	80006a8 <HAL_GPIO_Init>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021b4:	b007      	add	sp, #28
 80021b6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM5)
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_TIM_Base_MspInit+0x6c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d1f9      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_TIM_Base_MspInit+0x64>)
 80021c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c8:	f042 0208 	orr.w	r2, r2, #8
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	9b01      	ldr	r3, [sp, #4]
}
 80021d8:	e7ec      	b.n	80021b4 <HAL_TIM_Base_MspInit+0x3c>
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40000c00 	.word	0x40000c00

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ee:	e003      	b.n	80021f8 <LoopCopyDataInit>

080021f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021f6:	3104      	adds	r1, #4

080021f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002200:	d3f6      	bcc.n	80021f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002204:	e002      	b.n	800220c <LoopFillZerobss>

08002206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002208:	f842 3b04 	str.w	r3, [r2], #4

0800220c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002210:	d3f9      	bcc.n	8002206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002212:	f7ff ff8b 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f000 f811 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7ff fe95 	bl	8001f48 <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002224:	080023b4 	.word	0x080023b4
  ldr  r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800222c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8002230:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8002234:	20000120 	.word	0x20000120

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>
	...

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4e0d      	ldr	r6, [pc, #52]	; (8002274 <__libc_init_array+0x38>)
 8002240:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002242:	1ba4      	subs	r4, r4, r6
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	2500      	movs	r5, #0
 8002248:	42a5      	cmp	r5, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	4e0b      	ldr	r6, [pc, #44]	; (800227c <__libc_init_array+0x40>)
 800224e:	4c0c      	ldr	r4, [pc, #48]	; (8002280 <__libc_init_array+0x44>)
 8002250:	f000 f818 	bl	8002284 <_init>
 8002254:	1ba4      	subs	r4, r4, r6
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2500      	movs	r5, #0
 800225a:	42a5      	cmp	r5, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002264:	4798      	blx	r3
 8002266:	3501      	adds	r5, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800226e:	4798      	blx	r3
 8002270:	3501      	adds	r5, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080023ac 	.word	0x080023ac
 8002278:	080023ac 	.word	0x080023ac
 800227c:	080023ac 	.word	0x080023ac
 8002280:	080023b0 	.word	0x080023b0

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
