
hamfam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00003dc0  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dd0  20003dd0  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001dce7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000038dd  00000000  00000000  0003dd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007909  00000000  00000000  00041604  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  00048f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00049b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008cf5  00000000  00000000  0004a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000524c  00000000  00000000  00053655  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000588a1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000022bc  00000000  00000000  00058920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a58 	.word	0x08002a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002a58 	.word	0x08002a58

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f002 f9c0 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f002 f98d 	bl	8002826 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d88 	.word	0x20003d88
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d88 	.word	0x20003d88

08000538 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000538:	1ec3      	subs	r3, r0, #3
 800053a:	2b04      	cmp	r3, #4
{
 800053c:	b510      	push	{r4, lr}
 800053e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000540:	d903      	bls.n	800054a <HAL_NVIC_SetPriorityGrouping+0x12>
 8000542:	21a2      	movs	r1, #162	; 0xa2
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000546:	f002 f96d 	bl	8002824 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800054c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000552:	041b      	lsls	r3, r3, #16
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800055a:	0224      	lsls	r4, r4, #8
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000564:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000566:	60d4      	str	r4, [r2, #12]
 8000568:	bd10      	pop	{r4, pc}
 800056a:	bf00      	nop
 800056c:	08002a98 	.word	0x08002a98
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000574:	2a0f      	cmp	r2, #15
{ 
 8000576:	b570      	push	{r4, r5, r6, lr}
 8000578:	4604      	mov	r4, r0
 800057a:	460e      	mov	r6, r1
 800057c:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800057e:	d903      	bls.n	8000588 <HAL_NVIC_SetPriority+0x14>
 8000580:	21ba      	movs	r1, #186	; 0xba
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <HAL_NVIC_SetPriority+0x78>)
 8000584:	f002 f94e 	bl	8002824 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000588:	2e0f      	cmp	r6, #15
 800058a:	d903      	bls.n	8000594 <HAL_NVIC_SetPriority+0x20>
 800058c:	21bb      	movs	r1, #187	; 0xbb
 800058e:	4817      	ldr	r0, [pc, #92]	; (80005ec <HAL_NVIC_SetPriority+0x78>)
 8000590:	f002 f948 	bl	8002824 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_NVIC_SetPriority+0x7c>)
 8000596:	68d9      	ldr	r1, [r3, #12]
 8000598:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059c:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	bf28      	it	cs
 80005a6:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	2a06      	cmp	r2, #6
 80005ac:	bf8c      	ite	hi
 80005ae:	3903      	subhi	r1, #3
 80005b0:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b2:	fa00 f203 	lsl.w	r2, r0, r3
 80005b6:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b8:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ba:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005bc:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005be:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 80005c2:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	ea42 0205 	orr.w	r2, r2, r5
 80005c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	bfaf      	iteee	ge
 80005ce:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	f004 040f 	andlt.w	r4, r4, #15
 80005d6:	4b07      	ldrlt	r3, [pc, #28]	; (80005f4 <HAL_NVIC_SetPriority+0x80>)
 80005d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	bfa5      	ittet	ge
 80005dc:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 80005e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	bf00      	nop
 80005ec:	08002a98 	.word	0x08002a98
 80005f0:	e000ed00 	.word	0xe000ed00
 80005f4:	e000ed14 	.word	0xe000ed14

080005f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80005fa:	1e04      	subs	r4, r0, #0
 80005fc:	da03      	bge.n	8000606 <HAL_NVIC_EnableIRQ+0xe>
 80005fe:	21ce      	movs	r1, #206	; 0xce
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <HAL_NVIC_EnableIRQ+0x24>)
 8000602:	f002 f90f 	bl	8002824 <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000606:	0962      	lsrs	r2, r4, #5
 8000608:	2301      	movs	r3, #1
 800060a:	f004 041f 	and.w	r4, r4, #31
 800060e:	fa03 f404 	lsl.w	r4, r3, r4
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_NVIC_EnableIRQ+0x28>)
 8000614:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	08002a98 	.word	0x08002a98
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000624:	3801      	subs	r0, #1
 8000626:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062a:	d20a      	bcs.n	8000642 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	21f0      	movs	r1, #240	; 0xf0
 8000634:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000638:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000650:	2804      	cmp	r0, #4
{
 8000652:	b510      	push	{r4, lr}
 8000654:	4c08      	ldr	r4, [pc, #32]	; (8000678 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000656:	d00a      	beq.n	800066e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000658:	b120      	cbz	r0, 8000664 <HAL_SYSTICK_CLKSourceConfig+0x14>
 800065a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000660:	f002 f8e0 	bl	8002824 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800066a:	6023      	str	r3, [r4, #0]
 800066c:	bd10      	pop	{r4, pc}
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	e7f9      	b.n	800066a <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	08002a98 	.word	0x08002a98

08000680 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <HAL_GPIO_Init+0x274>)
 8000682:	4298      	cmp	r0, r3
{
 8000684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000688:	4604      	mov	r4, r0
 800068a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800068c:	d023      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 800068e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000692:	4298      	cmp	r0, r3
 8000694:	d01f      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 8000696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800069a:	4298      	cmp	r0, r3
 800069c:	d01b      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 800069e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006a2:	4298      	cmp	r0, r3
 80006a4:	d017      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006aa:	4298      	cmp	r0, r3
 80006ac:	d013      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006b2:	4298      	cmp	r0, r3
 80006b4:	d00f      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ba:	4298      	cmp	r0, r3
 80006bc:	d00b      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d007      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ca:	4298      	cmp	r0, r3
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x56>
 80006ce:	21c3      	movs	r1, #195	; 0xc3
 80006d0:	4889      	ldr	r0, [pc, #548]	; (80008f8 <HAL_GPIO_Init+0x278>)
 80006d2:	f002 f8a7 	bl	8002824 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80006d6:	682b      	ldr	r3, [r5, #0]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	b112      	cbz	r2, 80006e2 <HAL_GPIO_Init+0x62>
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	b11b      	cbz	r3, 80006ea <HAL_GPIO_Init+0x6a>
 80006e2:	21c4      	movs	r1, #196	; 0xc4
 80006e4:	4884      	ldr	r0, [pc, #528]	; (80008f8 <HAL_GPIO_Init+0x278>)
 80006e6:	f002 f89d 	bl	8002824 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80006ea:	686b      	ldr	r3, [r5, #4]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d917      	bls.n	8000720 <HAL_GPIO_Init+0xa0>
 80006f0:	f1a3 0211 	sub.w	r2, r3, #17
 80006f4:	2a01      	cmp	r2, #1
 80006f6:	d913      	bls.n	8000720 <HAL_GPIO_Init+0xa0>
 80006f8:	4980      	ldr	r1, [pc, #512]	; (80008fc <HAL_GPIO_Init+0x27c>)
 80006fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80006fe:	428a      	cmp	r2, r1
 8000700:	d00e      	beq.n	8000720 <HAL_GPIO_Init+0xa0>
 8000702:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8000706:	428b      	cmp	r3, r1
 8000708:	d00a      	beq.n	8000720 <HAL_GPIO_Init+0xa0>
 800070a:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800070e:	428a      	cmp	r2, r1
 8000710:	d006      	beq.n	8000720 <HAL_GPIO_Init+0xa0>
 8000712:	4a7b      	ldr	r2, [pc, #492]	; (8000900 <HAL_GPIO_Init+0x280>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_Init+0xa0>
 8000718:	21c5      	movs	r1, #197	; 0xc5
 800071a:	4877      	ldr	r0, [pc, #476]	; (80008f8 <HAL_GPIO_Init+0x278>)
 800071c:	f002 f882 	bl	8002824 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000720:	68ab      	ldr	r3, [r5, #8]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d903      	bls.n	800072e <HAL_GPIO_Init+0xae>
 8000726:	21c6      	movs	r1, #198	; 0xc6
 8000728:	4873      	ldr	r0, [pc, #460]	; (80008f8 <HAL_GPIO_Init+0x278>)
 800072a:	f002 f87b 	bl	8002824 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8000908 <HAL_GPIO_Init+0x288>
{
 8000732:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 8000734:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8000738:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073c:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000740:	454f      	cmp	r7, r9
 8000742:	f040 80c4 	bne.w	80008ce <HAL_GPIO_Init+0x24e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000746:	686a      	ldr	r2, [r5, #4]
 8000748:	f022 0210 	bic.w	r2, r2, #16
 800074c:	2a02      	cmp	r2, #2
 800074e:	d118      	bne.n	8000782 <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000750:	692a      	ldr	r2, [r5, #16]
 8000752:	2a0d      	cmp	r2, #13
 8000754:	d905      	bls.n	8000762 <HAL_GPIO_Init+0xe2>
 8000756:	2a0f      	cmp	r2, #15
 8000758:	d003      	beq.n	8000762 <HAL_GPIO_Init+0xe2>
 800075a:	21d7      	movs	r1, #215	; 0xd7
 800075c:	4866      	ldr	r0, [pc, #408]	; (80008f8 <HAL_GPIO_Init+0x278>)
 800075e:	f002 f861 	bl	8002824 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8000762:	08f1      	lsrs	r1, r6, #3
 8000764:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000768:	f006 0207 	and.w	r2, r6, #7
 800076c:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 800076e:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000770:	220f      	movs	r2, #15
 8000772:	4082      	lsls	r2, r0
 8000774:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000778:	692a      	ldr	r2, [r5, #16]
 800077a:	4082      	lsls	r2, r0
 800077c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000780:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000782:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8000784:	6820      	ldr	r0, [r4, #0]
 8000786:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800078a:	f04f 0a03 	mov.w	sl, #3
 800078e:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000792:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000796:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800079a:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079e:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a2:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a6:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a8:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 80007ac:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	d817      	bhi.n	80007e0 <HAL_GPIO_Init+0x160>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80007b0:	68ea      	ldr	r2, [r5, #12]
 80007b2:	2a03      	cmp	r2, #3
 80007b4:	d903      	bls.n	80007be <HAL_GPIO_Init+0x13e>
 80007b6:	21ea      	movs	r1, #234	; 0xea
 80007b8:	484f      	ldr	r0, [pc, #316]	; (80008f8 <HAL_GPIO_Init+0x278>)
 80007ba:	f002 f833 	bl	8002824 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 80007be:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c0:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007c2:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007c4:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c8:	fa02 f20b 	lsl.w	r2, r2, fp
 80007cc:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 80007ce:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80007d0:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007da:	40b3      	lsls	r3, r6
 80007dc:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80007de:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80007e0:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e2:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007e4:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e8:	68ab      	ldr	r3, [r5, #8]
 80007ea:	fa03 f30b 	lsl.w	r3, r3, fp
 80007ee:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80007f2:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f4:	00c3      	lsls	r3, r0, #3
 80007f6:	d56a      	bpl.n	80008ce <HAL_GPIO_Init+0x24e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f8:	4a42      	ldr	r2, [pc, #264]	; (8000904 <HAL_GPIO_Init+0x284>)
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000800:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000804:	6451      	str	r1, [r2, #68]	; 0x44
 8000806:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000808:	f026 0103 	bic.w	r1, r6, #3
 800080c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000810:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000814:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000818:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081a:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000820:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000824:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000828:	220f      	movs	r2, #15
 800082a:	fa02 f20e 	lsl.w	r2, r2, lr
 800082e:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	4a30      	ldr	r2, [pc, #192]	; (80008f4 <HAL_GPIO_Init+0x274>)
 8000834:	4294      	cmp	r4, r2
 8000836:	d01f      	beq.n	8000878 <HAL_GPIO_Init+0x1f8>
 8000838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800083c:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000840:	429c      	cmp	r4, r3
 8000842:	d04b      	beq.n	80008dc <HAL_GPIO_Init+0x25c>
 8000844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000848:	429c      	cmp	r4, r3
 800084a:	d049      	beq.n	80008e0 <HAL_GPIO_Init+0x260>
 800084c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000850:	429c      	cmp	r4, r3
 8000852:	d047      	beq.n	80008e4 <HAL_GPIO_Init+0x264>
 8000854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000858:	429c      	cmp	r4, r3
 800085a:	d045      	beq.n	80008e8 <HAL_GPIO_Init+0x268>
 800085c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000860:	429c      	cmp	r4, r3
 8000862:	d043      	beq.n	80008ec <HAL_GPIO_Init+0x26c>
 8000864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000868:	429c      	cmp	r4, r3
 800086a:	d041      	beq.n	80008f0 <HAL_GPIO_Init+0x270>
 800086c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000870:	429c      	cmp	r4, r3
 8000872:	bf14      	ite	ne
 8000874:	2308      	movne	r3, #8
 8000876:	2307      	moveq	r3, #7
 8000878:	fa03 f30e 	lsl.w	r3, r3, lr
 800087c:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000880:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8000882:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 8000886:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088a:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 800088c:	bf54      	ite	pl
 800088e:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000890:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8000894:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8000898:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089c:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 800089e:	bf54      	ite	pl
 80008a0:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80008a2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 80008a6:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ae:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf54      	ite	pl
 80008b2:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80008b4:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80008b8:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 80008bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c0:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 80008c2:	bf54      	ite	pl
 80008c4:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80008c6:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80008ca:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ce:	3601      	adds	r6, #1
 80008d0:	2e10      	cmp	r6, #16
 80008d2:	f47f af2f 	bne.w	8000734 <HAL_GPIO_Init+0xb4>
      }
    }
  }
}
 80008d6:	b003      	add	sp, #12
 80008d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008dc:	2301      	movs	r3, #1
 80008de:	e7cb      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008e0:	2302      	movs	r3, #2
 80008e2:	e7c9      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008e4:	2303      	movs	r3, #3
 80008e6:	e7c7      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008e8:	2304      	movs	r3, #4
 80008ea:	e7c5      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008ec:	2305      	movs	r3, #5
 80008ee:	e7c3      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008f0:	2306      	movs	r3, #6
 80008f2:	e7c1      	b.n	8000878 <HAL_GPIO_Init+0x1f8>
 80008f4:	40020000 	.word	0x40020000
 80008f8:	08002ad3 	.word	0x08002ad3
 80008fc:	10110000 	.word	0x10110000
 8000900:	10220000 	.word	0x10220000
 8000904:	40023800 	.word	0x40023800
 8000908:	40013c00 	.word	0x40013c00

0800090c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4605      	mov	r5, r0
 8000910:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000912:	460c      	mov	r4, r1
 8000914:	b921      	cbnz	r1, 8000920 <HAL_GPIO_WritePin+0x14>
 8000916:	f240 11af 	movw	r1, #431	; 0x1af
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_GPIO_WritePin+0x30>)
 800091c:	f001 ff82 	bl	8002824 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000920:	2e01      	cmp	r6, #1
 8000922:	d906      	bls.n	8000932 <HAL_GPIO_WritePin+0x26>
 8000924:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <HAL_GPIO_WritePin+0x30>)
 800092a:	f001 ff7b 	bl	8002824 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800092e:	61ac      	str	r4, [r5, #24]
 8000930:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8000932:	2e00      	cmp	r6, #0
 8000934:	d1fb      	bne.n	800092e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000936:	0424      	lsls	r4, r4, #16
 8000938:	e7f9      	b.n	800092e <HAL_GPIO_WritePin+0x22>
 800093a:	bf00      	nop
 800093c:	08002ad3 	.word	0x08002ad3

08000940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000944:	4604      	mov	r4, r0
 8000946:	b918      	cbnz	r0, 8000950 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800094a:	b002      	add	sp, #8
 800094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	2b0f      	cmp	r3, #15
 8000954:	d903      	bls.n	800095e <HAL_RCC_OscConfig+0x1e>
 8000956:	21f8      	movs	r1, #248	; 0xf8
 8000958:	48a2      	ldr	r0, [pc, #648]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 800095a:	f001 ff63 	bl	8002824 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	07d8      	lsls	r0, r3, #31
 8000962:	d418      	bmi.n	8000996 <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	0799      	lsls	r1, r3, #30
 8000968:	d46b      	bmi.n	8000a42 <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	0719      	lsls	r1, r3, #28
 800096e:	f100 80be 	bmi.w	8000aee <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	075a      	lsls	r2, r3, #29
 8000976:	f100 80e4 	bmi.w	8000b42 <HAL_RCC_OscConfig+0x202>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800097a:	69a3      	ldr	r3, [r4, #24]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d904      	bls.n	800098a <HAL_RCC_OscConfig+0x4a>
 8000980:	f240 11df 	movw	r1, #479	; 0x1df
 8000984:	4897      	ldr	r0, [pc, #604]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 8000986:	f001 ff4d 	bl	8002824 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800098a:	69a2      	ldr	r2, [r4, #24]
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8151 	bne.w	8000c34 <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 8000992:	2000      	movs	r0, #0
 8000994:	e7d9      	b.n	800094a <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800099c:	d006      	beq.n	80009ac <HAL_RCC_OscConfig+0x6c>
 800099e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a2:	d003      	beq.n	80009ac <HAL_RCC_OscConfig+0x6c>
 80009a4:	21fd      	movs	r1, #253	; 0xfd
 80009a6:	488f      	ldr	r0, [pc, #572]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 80009a8:	f001 ff3c 	bl	8002824 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009ac:	4b8e      	ldr	r3, [pc, #568]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	f002 020c 	and.w	r2, r2, #12
 80009b4:	2a04      	cmp	r2, #4
 80009b6:	d007      	beq.n	80009c8 <HAL_RCC_OscConfig+0x88>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009be:	2a08      	cmp	r2, #8
 80009c0:	d10a      	bne.n	80009d8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	025a      	lsls	r2, r3, #9
 80009c6:	d507      	bpl.n	80009d8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c8:	4b87      	ldr	r3, [pc, #540]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	039b      	lsls	r3, r3, #14
 80009ce:	d5c9      	bpl.n	8000964 <HAL_RCC_OscConfig+0x24>
 80009d0:	6863      	ldr	r3, [r4, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1c6      	bne.n	8000964 <HAL_RCC_OscConfig+0x24>
 80009d6:	e7b7      	b.n	8000948 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	4d83      	ldr	r5, [pc, #524]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 80009dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e0:	d111      	bne.n	8000a06 <HAL_RCC_OscConfig+0xc6>
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fd9f 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ee:	4d7e      	ldr	r5, [pc, #504]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80009f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	039f      	lsls	r7, r3, #14
 80009f6:	d4b5      	bmi.n	8000964 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f8:	f7ff fd98 	bl	800052c <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	2864      	cmp	r0, #100	; 0x64
 8000a00:	d9f7      	bls.n	80009f2 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000a02:	2003      	movs	r0, #3
 8000a04:	e7a1      	b.n	800094a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a0a:	d104      	bne.n	8000a16 <HAL_RCC_OscConfig+0xd6>
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a12:	602b      	str	r3, [r5, #0]
 8000a14:	e7e5      	b.n	80009e2 <HAL_RCC_OscConfig+0xa2>
 8000a16:	682a      	ldr	r2, [r5, #0]
 8000a18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a1c:	602a      	str	r2, [r5, #0]
 8000a1e:	682a      	ldr	r2, [r5, #0]
 8000a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a24:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1df      	bne.n	80009ea <HAL_RCC_OscConfig+0xaa>
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fd7f 	bl	800052c <HAL_GetTick>
 8000a2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	0398      	lsls	r0, r3, #14
 8000a34:	d596      	bpl.n	8000964 <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a36:	f7ff fd79 	bl	800052c <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	2864      	cmp	r0, #100	; 0x64
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0xf0>
 8000a40:	e7df      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000a42:	68e3      	ldr	r3, [r4, #12]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d904      	bls.n	8000a52 <HAL_RCC_OscConfig+0x112>
 8000a48:	f240 112f 	movw	r1, #303	; 0x12f
 8000a4c:	4865      	ldr	r0, [pc, #404]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 8000a4e:	f001 fee9 	bl	8002824 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000a52:	6923      	ldr	r3, [r4, #16]
 8000a54:	2b1f      	cmp	r3, #31
 8000a56:	d904      	bls.n	8000a62 <HAL_RCC_OscConfig+0x122>
 8000a58:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000a5c:	4861      	ldr	r0, [pc, #388]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 8000a5e:	f001 fee1 	bl	8002824 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a62:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	f012 0f0c 	tst.w	r2, #12
 8000a6a:	d007      	beq.n	8000a7c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a72:	2a08      	cmp	r2, #8
 8000a74:	d112      	bne.n	8000a9c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	0259      	lsls	r1, r3, #9
 8000a7a:	d40f      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a7c:	4b5a      	ldr	r3, [pc, #360]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	0792      	lsls	r2, r2, #30
 8000a82:	d503      	bpl.n	8000a8c <HAL_RCC_OscConfig+0x14c>
 8000a84:	68e2      	ldr	r2, [r4, #12]
 8000a86:	2a01      	cmp	r2, #1
 8000a88:	f47f af5e 	bne.w	8000948 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	6921      	ldr	r1, [r4, #16]
 8000a90:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a94:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a9a:	e766      	b.n	800096a <HAL_RCC_OscConfig+0x2a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a9c:	68e2      	ldr	r2, [r4, #12]
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	b1b2      	cbz	r2, 8000ad0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fd41 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aaa:	4d4f      	ldr	r5, [pc, #316]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8000aac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	079f      	lsls	r7, r3, #30
 8000ab2:	d507      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	6922      	ldr	r2, [r4, #16]
 8000ab8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000abc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ac0:	602b      	str	r3, [r5, #0]
 8000ac2:	e752      	b.n	800096a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac4:	f7ff fd32 	bl	800052c <HAL_GetTick>
 8000ac8:	1b80      	subs	r0, r0, r6
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9ef      	bls.n	8000aae <HAL_RCC_OscConfig+0x16e>
 8000ace:	e798      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ad0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fd2b 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ad6:	4d44      	ldr	r5, [pc, #272]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 8000ad8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	0798      	lsls	r0, r3, #30
 8000ade:	f57f af44 	bpl.w	800096a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fd23 	bl	800052c <HAL_GetTick>
 8000ae6:	1b80      	subs	r0, r0, r6
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d9f6      	bls.n	8000ada <HAL_RCC_OscConfig+0x19a>
 8000aec:	e789      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000aee:	6963      	ldr	r3, [r4, #20]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d904      	bls.n	8000afe <HAL_RCC_OscConfig+0x1be>
 8000af4:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000af8:	483a      	ldr	r0, [pc, #232]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 8000afa:	f001 fe93 	bl	8002824 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000afe:	6962      	ldr	r2, [r4, #20]
 8000b00:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <HAL_RCC_OscConfig+0x2b0>)
 8000b02:	b17a      	cbz	r2, 8000b24 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b08:	f7ff fd10 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0c:	4d36      	ldr	r5, [pc, #216]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000b0e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b12:	079b      	lsls	r3, r3, #30
 8000b14:	f53f af2d 	bmi.w	8000972 <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b18:	f7ff fd08 	bl	800052c <HAL_GetTick>
 8000b1c:	1b80      	subs	r0, r0, r6
 8000b1e:	2802      	cmp	r0, #2
 8000b20:	d9f6      	bls.n	8000b10 <HAL_RCC_OscConfig+0x1d0>
 8000b22:	e76e      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000b24:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b26:	f7ff fd01 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2a:	4d2f      	ldr	r5, [pc, #188]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000b2c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b30:	079f      	lsls	r7, r3, #30
 8000b32:	f57f af1e 	bpl.w	8000972 <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b36:	f7ff fcf9 	bl	800052c <HAL_GetTick>
 8000b3a:	1b80      	subs	r0, r0, r6
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d9f6      	bls.n	8000b2e <HAL_RCC_OscConfig+0x1ee>
 8000b40:	e75f      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000b42:	68a3      	ldr	r3, [r4, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d906      	bls.n	8000b56 <HAL_RCC_OscConfig+0x216>
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d004      	beq.n	8000b56 <HAL_RCC_OscConfig+0x216>
 8000b4c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8000b50:	4824      	ldr	r0, [pc, #144]	; (8000be4 <HAL_RCC_OscConfig+0x2a4>)
 8000b52:	f001 fe67 	bl	8002824 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 8000b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5a:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b5e:	d128      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b74:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b76:	4d1f      	ldr	r5, [pc, #124]	; (8000bf4 <HAL_RCC_OscConfig+0x2b4>)
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	05d8      	lsls	r0, r3, #23
 8000b7c:	d51b      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x276>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7e:	68a3      	ldr	r3, [r4, #8]
 8000b80:	4d19      	ldr	r5, [pc, #100]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d127      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x296>
 8000b86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fccd 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b92:	4d15      	ldr	r5, [pc, #84]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8000b94:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b9c:	079a      	lsls	r2, r3, #30
 8000b9e:	d543      	bpl.n	8000c28 <HAL_RCC_OscConfig+0x2e8>
    if(pwrclkchanged == SET)
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	f43f aeea 	beq.w	800097a <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_RCC_OscConfig+0x2a8>)
 8000ba8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	e6e3      	b.n	800097a <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	e7df      	b.n	8000b76 <HAL_RCC_OscConfig+0x236>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000bbe:	f7ff fcb5 	bl	800052c <HAL_GetTick>
 8000bc2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc4:	682b      	ldr	r3, [r5, #0]
 8000bc6:	05d9      	lsls	r1, r3, #23
 8000bc8:	d4d9      	bmi.n	8000b7e <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bca:	f7ff fcaf 	bl	800052c <HAL_GetTick>
 8000bce:	1bc0      	subs	r0, r0, r7
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f7      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x284>
 8000bd4:	e715      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d10e      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2b8>
 8000bda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	672b      	str	r3, [r5, #112]	; 0x70
 8000be2:	e7d0      	b.n	8000b86 <HAL_RCC_OscConfig+0x246>
 8000be4:	08002b0c 	.word	0x08002b0c
 8000be8:	40023800 	.word	0x40023800
 8000bec:	42470000 	.word	0x42470000
 8000bf0:	42470e80 	.word	0x42470e80
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bfa:	f022 0201 	bic.w	r2, r2, #1
 8000bfe:	672a      	str	r2, [r5, #112]	; 0x70
 8000c00:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c02:	f022 0204 	bic.w	r2, r2, #4
 8000c06:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1c0      	bne.n	8000b8e <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fc8e 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c10:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c14:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c18:	079b      	lsls	r3, r3, #30
 8000c1a:	d5c1      	bpl.n	8000ba0 <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fc86 	bl	800052c <HAL_GetTick>
 8000c20:	1bc0      	subs	r0, r0, r7
 8000c22:	4540      	cmp	r0, r8
 8000c24:	d9f7      	bls.n	8000c16 <HAL_RCC_OscConfig+0x2d6>
 8000c26:	e6ec      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c28:	f7ff fc80 	bl	800052c <HAL_GetTick>
 8000c2c:	1bc0      	subs	r0, r0, r7
 8000c2e:	4540      	cmp	r0, r8
 8000c30:	d9b3      	bls.n	8000b9a <HAL_RCC_OscConfig+0x25a>
 8000c32:	e6e6      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c34:	4e3b      	ldr	r6, [pc, #236]	; (8000d24 <HAL_RCC_OscConfig+0x3e4>)
 8000c36:	68b3      	ldr	r3, [r6, #8]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	f43f ae83 	beq.w	8000948 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c42:	2a02      	cmp	r2, #2
 8000c44:	4d38      	ldr	r5, [pc, #224]	; (8000d28 <HAL_RCC_OscConfig+0x3e8>)
 8000c46:	d15e      	bne.n	8000d06 <HAL_RCC_OscConfig+0x3c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000c48:	69e3      	ldr	r3, [r4, #28]
 8000c4a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8000c4e:	d004      	beq.n	8000c5a <HAL_RCC_OscConfig+0x31a>
 8000c50:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8000c54:	4835      	ldr	r0, [pc, #212]	; (8000d2c <HAL_RCC_OscConfig+0x3ec>)
 8000c56:	f001 fde5 	bl	8002824 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000c5a:	6a23      	ldr	r3, [r4, #32]
 8000c5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5e:	d904      	bls.n	8000c6a <HAL_RCC_OscConfig+0x32a>
 8000c60:	f240 11e9 	movw	r1, #489	; 0x1e9
 8000c64:	4831      	ldr	r0, [pc, #196]	; (8000d2c <HAL_RCC_OscConfig+0x3ec>)
 8000c66:	f001 fddd 	bl	8002824 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c6c:	3b32      	subs	r3, #50	; 0x32
 8000c6e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8000c72:	d904      	bls.n	8000c7e <HAL_RCC_OscConfig+0x33e>
 8000c74:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8000c78:	482c      	ldr	r0, [pc, #176]	; (8000d2c <HAL_RCC_OscConfig+0x3ec>)
 8000c7a:	f001 fdd3 	bl	8002824 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000c7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c80:	2a08      	cmp	r2, #8
 8000c82:	d804      	bhi.n	8000c8e <HAL_RCC_OscConfig+0x34e>
 8000c84:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000c88:	40d3      	lsrs	r3, r2
 8000c8a:	07d8      	lsls	r0, r3, #31
 8000c8c:	d404      	bmi.n	8000c98 <HAL_RCC_OscConfig+0x358>
 8000c8e:	f240 11eb 	movw	r1, #491	; 0x1eb
 8000c92:	4826      	ldr	r0, [pc, #152]	; (8000d2c <HAL_RCC_OscConfig+0x3ec>)
 8000c94:	f001 fdc6 	bl	8002824 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	d904      	bls.n	8000caa <HAL_RCC_OscConfig+0x36a>
 8000ca0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000ca4:	4821      	ldr	r0, [pc, #132]	; (8000d2c <HAL_RCC_OscConfig+0x3ec>)
 8000ca6:	f001 fdbd 	bl	8002824 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cae:	f7ff fc3d 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cb2:	4e1c      	ldr	r6, [pc, #112]	; (8000d24 <HAL_RCC_OscConfig+0x3e4>)
        tickstart = HAL_GetTick();
 8000cb4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cb6:	6833      	ldr	r3, [r6, #0]
 8000cb8:	0199      	lsls	r1, r3, #6
 8000cba:	d41e      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x3ba>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cbc:	6a22      	ldr	r2, [r4, #32]
 8000cbe:	69e3      	ldr	r3, [r4, #28]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cc4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd0:	4c14      	ldr	r4, [pc, #80]	; (8000d24 <HAL_RCC_OscConfig+0x3e4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cd2:	0852      	lsrs	r2, r2, #1
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cdc:	2301      	movs	r3, #1
 8000cde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc24 	bl	800052c <HAL_GetTick>
 8000ce4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	019a      	lsls	r2, r3, #6
 8000cea:	f53f ae52 	bmi.w	8000992 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cee:	f7ff fc1d 	bl	800052c <HAL_GetTick>
 8000cf2:	1b40      	subs	r0, r0, r5
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x3a6>
 8000cf8:	e683      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfa:	f7ff fc17 	bl	800052c <HAL_GetTick>
 8000cfe:	1bc0      	subs	r0, r0, r7
 8000d00:	2802      	cmp	r0, #2
 8000d02:	d9d8      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x376>
 8000d04:	e67d      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_DISABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fc0f 	bl	800052c <HAL_GetTick>
 8000d0e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d10:	6833      	ldr	r3, [r6, #0]
 8000d12:	019b      	lsls	r3, r3, #6
 8000d14:	f57f ae3d 	bpl.w	8000992 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d18:	f7ff fc08 	bl	800052c <HAL_GetTick>
 8000d1c:	1b00      	subs	r0, r0, r4
 8000d1e:	2802      	cmp	r0, #2
 8000d20:	d9f6      	bls.n	8000d10 <HAL_RCC_OscConfig+0x3d0>
 8000d22:	e66e      	b.n	8000a02 <HAL_RCC_OscConfig+0xc2>
 8000d24:	40023800 	.word	0x40023800
 8000d28:	42470060 	.word	0x42470060
 8000d2c:	08002b0c 	.word	0x08002b0c

08000d30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d30:	4913      	ldr	r1, [pc, #76]	; (8000d80 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d32:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d34:	688b      	ldr	r3, [r1, #8]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d003      	beq.n	8000d46 <HAL_RCC_GetSysClockFreq+0x16>
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d003      	beq.n	8000d4a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d42:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d48:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d4a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d4c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d4e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d50:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d54:	bf14      	ite	ne
 8000d56:	480c      	ldrne	r0, [pc, #48]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d58:	480a      	ldreq	r0, [pc, #40]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d5a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d5e:	bf18      	it	ne
 8000d60:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d66:	fba1 0100 	umull	r0, r1, r1, r0
 8000d6a:	f7ff fa31 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d76:	3301      	adds	r3, #1
 8000d78:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d7e:	bd08      	pop	{r3, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	00f42400 	.word	0x00f42400
 8000d88:	007a1200 	.word	0x007a1200

08000d8c <HAL_RCC_ClockConfig>:
{
 8000d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d90:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d92:	4604      	mov	r4, r0
 8000d94:	b910      	cbnz	r0, 8000d9c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
 8000d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000d9c:	6803      	ldr	r3, [r0, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	2b0e      	cmp	r3, #14
 8000da2:	d904      	bls.n	8000dae <HAL_RCC_ClockConfig+0x22>
 8000da4:	f44f 7114 	mov.w	r1, #592	; 0x250
 8000da8:	486d      	ldr	r0, [pc, #436]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000daa:	f001 fd3b 	bl	8002824 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000dae:	2d07      	cmp	r5, #7
 8000db0:	d904      	bls.n	8000dbc <HAL_RCC_ClockConfig+0x30>
 8000db2:	f240 2151 	movw	r1, #593	; 0x251
 8000db6:	486a      	ldr	r0, [pc, #424]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000db8:	f001 fd34 	bl	8002824 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <HAL_RCC_ClockConfig+0x1d8>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f002 020f 	and.w	r2, r2, #15
 8000dc4:	4295      	cmp	r5, r2
 8000dc6:	d83d      	bhi.n	8000e44 <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	0796      	lsls	r6, r2, #30
 8000dcc:	d442      	bmi.n	8000e54 <HAL_RCC_ClockConfig+0xc8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	07d9      	lsls	r1, r3, #31
 8000dd2:	d46c      	bmi.n	8000eae <HAL_RCC_ClockConfig+0x122>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd4:	4b63      	ldr	r3, [pc, #396]	; (8000f64 <HAL_RCC_ClockConfig+0x1d8>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	f002 020f 	and.w	r2, r2, #15
 8000ddc:	4295      	cmp	r5, r2
 8000dde:	f0c0 809c 	bcc.w	8000f1a <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	075a      	lsls	r2, r3, #29
 8000de6:	f100 80a1 	bmi.w	8000f2c <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	071b      	lsls	r3, r3, #28
 8000dee:	d518      	bpl.n	8000e22 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000df0:	6923      	ldr	r3, [r4, #16]
 8000df2:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8000df6:	d00c      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x86>
 8000df8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000dfc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8000e00:	d007      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x86>
 8000e02:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000e06:	d004      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x86>
 8000e08:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000e0c:	4854      	ldr	r0, [pc, #336]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000e0e:	f001 fd09 	bl	8002824 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e12:	4a55      	ldr	r2, [pc, #340]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000e14:	6921      	ldr	r1, [r4, #16]
 8000e16:	6893      	ldr	r3, [r2, #8]
 8000e18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e20:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e22:	f7ff ff85 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 8000e26:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000e28:	4a50      	ldr	r2, [pc, #320]	; (8000f6c <HAL_RCC_ClockConfig+0x1e0>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	40d8      	lsrs	r0, r3
 8000e34:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <HAL_RCC_ClockConfig+0x1e4>)
 8000e36:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f001 fd25 	bl	8002888 <HAL_InitTick>
  return HAL_OK;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e44:	b2ea      	uxtb	r2, r5
 8000e46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	429d      	cmp	r5, r3
 8000e50:	d1a1      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xa>
 8000e52:	e7b9      	b.n	8000dc8 <HAL_RCC_ClockConfig+0x3c>
 8000e54:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e56:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e5a:	bf1e      	ittt	ne
 8000e5c:	6899      	ldrne	r1, [r3, #8]
 8000e5e:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000e62:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e64:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e66:	bf42      	ittt	mi
 8000e68:	689a      	ldrmi	r2, [r3, #8]
 8000e6a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e6e:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000e70:	68a3      	ldr	r3, [r4, #8]
 8000e72:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000e76:	d012      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x112>
 8000e78:	f023 0220 	bic.w	r2, r3, #32
 8000e7c:	2a90      	cmp	r2, #144	; 0x90
 8000e7e:	d00e      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x112>
 8000e80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e84:	2aa0      	cmp	r2, #160	; 0xa0
 8000e86:	d00a      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x112>
 8000e88:	f023 0210 	bic.w	r2, r3, #16
 8000e8c:	2ac0      	cmp	r2, #192	; 0xc0
 8000e8e:	d006      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x112>
 8000e90:	2bf0      	cmp	r3, #240	; 0xf0
 8000e92:	d004      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x112>
 8000e94:	f44f 711d 	mov.w	r1, #628	; 0x274
 8000e98:	4831      	ldr	r0, [pc, #196]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000e9a:	f001 fcc3 	bl	8002824 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e9e:	4a32      	ldr	r2, [pc, #200]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000ea0:	68a1      	ldr	r1, [r4, #8]
 8000ea2:	6893      	ldr	r3, [r2, #8]
 8000ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6093      	str	r3, [r2, #8]
 8000eac:	e78f      	b.n	8000dce <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d904      	bls.n	8000ebe <HAL_RCC_ClockConfig+0x132>
 8000eb4:	f240 217b 	movw	r1, #635	; 0x27b
 8000eb8:	4829      	ldr	r0, [pc, #164]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000eba:	f001 fcb3 	bl	8002824 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ebe:	6862      	ldr	r2, [r4, #4]
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000ec2:	2a01      	cmp	r2, #1
 8000ec4:	d11f      	bne.n	8000f06 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	f43f af63 	beq.w	8000d96 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ed0:	4e25      	ldr	r6, [pc, #148]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000ed2:	68b3      	ldr	r3, [r6, #8]
 8000ed4:	f023 0303 	bic.w	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000edc:	f7ff fb26 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ee4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ee6:	68b3      	ldr	r3, [r6, #8]
 8000ee8:	6862      	ldr	r2, [r4, #4]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ef2:	f43f af6f 	beq.w	8000dd4 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef6:	f7ff fb19 	bl	800052c <HAL_GetTick>
 8000efa:	1bc0      	subs	r0, r0, r7
 8000efc:	4540      	cmp	r0, r8
 8000efe:	d9f2      	bls.n	8000ee6 <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8000f00:	2003      	movs	r0, #3
}
 8000f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f06:	1e91      	subs	r1, r2, #2
 8000f08:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f0c:	d802      	bhi.n	8000f14 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f12:	e7db      	b.n	8000ecc <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	f013 0f02 	tst.w	r3, #2
 8000f18:	e7d8      	b.n	8000ecc <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1a:	b2ea      	uxtb	r2, r5
 8000f1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	429d      	cmp	r5, r3
 8000f26:	f47f af36 	bne.w	8000d96 <HAL_RCC_ClockConfig+0xa>
 8000f2a:	e75a      	b.n	8000de2 <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000f2c:	68e3      	ldr	r3, [r4, #12]
 8000f2e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8000f32:	d00c      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x1c2>
 8000f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f38:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8000f3c:	d007      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x1c2>
 8000f3e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000f42:	d004      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x1c2>
 8000f44:	f240 21b9 	movw	r1, #697	; 0x2b9
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_RCC_ClockConfig+0x1d4>)
 8000f4a:	f001 fc6b 	bl	8002824 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f4e:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_RCC_ClockConfig+0x1dc>)
 8000f50:	68e1      	ldr	r1, [r4, #12]
 8000f52:	6893      	ldr	r3, [r2, #8]
 8000f54:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	6093      	str	r3, [r2, #8]
 8000f5c:	e745      	b.n	8000dea <HAL_RCC_ClockConfig+0x5e>
 8000f5e:	bf00      	nop
 8000f60:	08002b0c 	.word	0x08002b0c
 8000f64:	40023c00 	.word	0x40023c00
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	08002ba3 	.word	0x08002ba3
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <HAL_RCC_GetHCLKFreq+0x8>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000000c 	.word	0x2000000c

08000f80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f8e:	6810      	ldr	r0, [r2, #0]
}
 8000f90:	40d8      	lsrs	r0, r3
 8000f92:	4770      	bx	lr
 8000f94:	40023800 	.word	0x40023800
 8000f98:	08002bb3 	.word	0x08002bb3
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_RCC_GetClockConfig+0x34>)
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000fb4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000fbc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000fc6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_RCC_GetClockConfig+0x38>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	600b      	str	r3, [r1, #0]
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_TIM_Base_Start_IT+0x94>)
 8000fe0:	4293      	cmp	r3, r2
{
 8000fe2:	b510      	push	{r4, lr}
 8000fe4:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8000fe6:	d037      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d034      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8000fee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d030      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8000ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02c      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8000ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001002:	4293      	cmp	r3, r2
 8001004:	d028      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8001006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800100a:	4293      	cmp	r3, r2
 800100c:	d024      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 800100e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001012:	4293      	cmp	r3, r2
 8001014:	d020      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8001016:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800101a:	4293      	cmp	r3, r2
 800101c:	d01c      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 800101e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001022:	4293      	cmp	r3, r2
 8001024:	d018      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8001026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800102a:	4293      	cmp	r3, r2
 800102c:	d014      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 800102e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001032:	4293      	cmp	r3, r2
 8001034:	d010      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8001036:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800103a:	4293      	cmp	r3, r2
 800103c:	d00c      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 800103e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001042:	4293      	cmp	r3, r2
 8001044:	d008      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 8001046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800104a:	4293      	cmp	r3, r2
 800104c:	d004      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0x7c>
 800104e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <HAL_TIM_Base_Start_IT+0x98>)
 8001054:	f001 fbe6 	bl	8002824 <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800106a:	2000      	movs	r0, #0
 800106c:	bd10      	pop	{r4, pc}
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000
 8001074:	08002b44 	.word	0x08002b44

08001078 <HAL_TIM_OC_DelayElapsedCallback>:
 8001078:	4770      	bx	lr

0800107a <HAL_TIM_IC_CaptureCallback>:
 800107a:	4770      	bx	lr

0800107c <HAL_TIM_PWM_PulseFinishedCallback>:
 800107c:	4770      	bx	lr

0800107e <HAL_TIM_TriggerCallback>:
 800107e:	4770      	bx	lr

08001080 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001080:	6803      	ldr	r3, [r0, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	0791      	lsls	r1, r2, #30
{
 8001086:	b510      	push	{r4, lr}
 8001088:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800108a:	d50e      	bpl.n	80010aa <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	0792      	lsls	r2, r2, #30
 8001090:	d50b      	bpl.n	80010aa <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001092:	f06f 0202 	mvn.w	r2, #2
 8001096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001098:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800109a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800109c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800109e:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010a0:	d077      	beq.n	8001192 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80010a2:	f7ff ffea 	bl	800107a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010a6:	2300      	movs	r3, #0
 80010a8:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	0750      	lsls	r0, r2, #29
 80010b0:	d510      	bpl.n	80010d4 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	0751      	lsls	r1, r2, #29
 80010b6:	d50d      	bpl.n	80010d4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010b8:	f06f 0204 	mvn.w	r2, #4
 80010bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010be:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010c0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010c2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010c6:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80010c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010ca:	d068      	beq.n	800119e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010cc:	f7ff ffd5 	bl	800107a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d0:	2300      	movs	r3, #0
 80010d2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	0712      	lsls	r2, r2, #28
 80010da:	d50f      	bpl.n	80010fc <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	0710      	lsls	r0, r2, #28
 80010e0:	d50c      	bpl.n	80010fc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010e2:	f06f 0208 	mvn.w	r2, #8
 80010e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010ea:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010ec:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010ee:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80010f0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010f2:	d05a      	beq.n	80011aa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80010f4:	f7ff ffc1 	bl	800107a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010f8:	2300      	movs	r3, #0
 80010fa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	06d2      	lsls	r2, r2, #27
 8001102:	d510      	bpl.n	8001126 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	06d0      	lsls	r0, r2, #27
 8001108:	d50d      	bpl.n	8001126 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800110a:	f06f 0210 	mvn.w	r2, #16
 800110e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001110:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001112:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001114:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001118:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800111a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800111c:	d04b      	beq.n	80011b6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800111e:	f7ff ffac 	bl	800107a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001122:	2300      	movs	r3, #0
 8001124:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	07d1      	lsls	r1, r2, #31
 800112c:	d508      	bpl.n	8001140 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	07d2      	lsls	r2, r2, #31
 8001132:	d505      	bpl.n	8001140 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001134:	f06f 0201 	mvn.w	r2, #1
 8001138:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800113a:	4620      	mov	r0, r4
 800113c:	f001 fb68 	bl	8002810 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	0610      	lsls	r0, r2, #24
 8001146:	d508      	bpl.n	800115a <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	0611      	lsls	r1, r2, #24
 800114c:	d505      	bpl.n	800115a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800114e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001152:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001154:	4620      	mov	r0, r4
 8001156:	f000 f90e 	bl	8001376 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	0652      	lsls	r2, r2, #25
 8001160:	d508      	bpl.n	8001174 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	0650      	lsls	r0, r2, #25
 8001166:	d505      	bpl.n	8001174 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800116c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff85 	bl	800107e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	0691      	lsls	r1, r2, #26
 800117a:	d522      	bpl.n	80011c2 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	0692      	lsls	r2, r2, #26
 8001180:	d51f      	bpl.n	80011c2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001182:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001186:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001188:	611a      	str	r2, [r3, #16]
    }
  }
}
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800118e:	f000 b8f1 	b.w	8001374 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001192:	f7ff ff71 	bl	8001078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001196:	4620      	mov	r0, r4
 8001198:	f7ff ff70 	bl	800107c <HAL_TIM_PWM_PulseFinishedCallback>
 800119c:	e783      	b.n	80010a6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119e:	f7ff ff6b 	bl	8001078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff ff6a 	bl	800107c <HAL_TIM_PWM_PulseFinishedCallback>
 80011a8:	e792      	b.n	80010d0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011aa:	f7ff ff65 	bl	8001078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff ff64 	bl	800107c <HAL_TIM_PWM_PulseFinishedCallback>
 80011b4:	e7a0      	b.n	80010f8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011b6:	f7ff ff5f 	bl	8001078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ff5e 	bl	800107c <HAL_TIM_PWM_PulseFinishedCallback>
 80011c0:	e7af      	b.n	8001122 <HAL_TIM_IRQHandler+0xa2>
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80011c6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d012      	beq.n	80011f2 <TIM_Base_SetConfig+0x2e>
 80011cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011d0:	d00f      	beq.n	80011f2 <TIM_Base_SetConfig+0x2e>
 80011d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011d6:	4290      	cmp	r0, r2
 80011d8:	d00b      	beq.n	80011f2 <TIM_Base_SetConfig+0x2e>
 80011da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011de:	4290      	cmp	r0, r2
 80011e0:	d007      	beq.n	80011f2 <TIM_Base_SetConfig+0x2e>
 80011e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e6:	4290      	cmp	r0, r2
 80011e8:	d003      	beq.n	80011f2 <TIM_Base_SetConfig+0x2e>
 80011ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011ee:	4290      	cmp	r0, r2
 80011f0:	d11d      	bne.n	800122e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80011f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011f8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <TIM_Base_SetConfig+0xbc>)
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d104      	bne.n	800120a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001200:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001206:	4313      	orrs	r3, r2
 8001208:	e028      	b.n	800125c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800120a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800120e:	d0f7      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001210:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <TIM_Base_SetConfig+0xc0>)
 8001212:	4290      	cmp	r0, r2
 8001214:	d0f4      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800121a:	4290      	cmp	r0, r2
 800121c:	d0f0      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 800121e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001222:	4290      	cmp	r0, r2
 8001224:	d0ec      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001226:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800122a:	4290      	cmp	r0, r2
 800122c:	d0e8      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <TIM_Base_SetConfig+0xc4>)
 8001230:	4290      	cmp	r0, r2
 8001232:	d0e5      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001238:	4290      	cmp	r0, r2
 800123a:	d0e1      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 800123c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001240:	4290      	cmp	r0, r2
 8001242:	d0dd      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001244:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001248:	4290      	cmp	r0, r2
 800124a:	d0d9      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 800124c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001250:	4290      	cmp	r0, r2
 8001252:	d0d5      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
 8001254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001258:	4290      	cmp	r0, r2
 800125a:	d0d1      	beq.n	8001200 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 800125c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800125e:	688b      	ldr	r3, [r1, #8]
 8001260:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001262:	680b      	ldr	r3, [r1, #0]
 8001264:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <TIM_Base_SetConfig+0xbc>)
 8001268:	4298      	cmp	r0, r3
 800126a:	d006      	beq.n	800127a <TIM_Base_SetConfig+0xb6>
 800126c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001270:	4298      	cmp	r0, r3
 8001272:	d002      	beq.n	800127a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001274:	2301      	movs	r3, #1
 8001276:	6143      	str	r3, [r0, #20]
}
 8001278:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800127a:	690b      	ldr	r3, [r1, #16]
 800127c:	6303      	str	r3, [r0, #48]	; 0x30
 800127e:	e7f9      	b.n	8001274 <TIM_Base_SetConfig+0xb0>
 8001280:	40010000 	.word	0x40010000
 8001284:	40000400 	.word	0x40000400
 8001288:	40014000 	.word	0x40014000

0800128c <HAL_TIM_Base_Init>:
{ 
 800128c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800128e:	4604      	mov	r4, r0
 8001290:	2800      	cmp	r0, #0
 8001292:	d069      	beq.n	8001368 <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	4a35      	ldr	r2, [pc, #212]	; (800136c <HAL_TIM_Base_Init+0xe0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d036      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a0:	d033      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02f      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d02b      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d027      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012be:	4293      	cmp	r3, r2
 80012c0:	d023      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01f      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012ca:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01b      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012d2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d017      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00f      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012ea:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00b      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 80012fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012fe:	4293      	cmp	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_TIM_Base_Init+0x7e>
 8001302:	21d7      	movs	r1, #215	; 0xd7
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <HAL_TIM_Base_Init+0xe4>)
 8001306:	f001 fa8d 	bl	8002824 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	f033 0210 	bics.w	r2, r3, #16
 8001310:	d009      	beq.n	8001326 <HAL_TIM_Base_Init+0x9a>
 8001312:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001316:	2a20      	cmp	r2, #32
 8001318:	d005      	beq.n	8001326 <HAL_TIM_Base_Init+0x9a>
 800131a:	2b40      	cmp	r3, #64	; 0x40
 800131c:	d003      	beq.n	8001326 <HAL_TIM_Base_Init+0x9a>
 800131e:	21d8      	movs	r1, #216	; 0xd8
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <HAL_TIM_Base_Init+0xe4>)
 8001322:	f001 fa7f 	bl	8002824 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001326:	6923      	ldr	r3, [r4, #16]
 8001328:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800132c:	d006      	beq.n	800133c <HAL_TIM_Base_Init+0xb0>
 800132e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001332:	d003      	beq.n	800133c <HAL_TIM_Base_Init+0xb0>
 8001334:	21d9      	movs	r1, #217	; 0xd9
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <HAL_TIM_Base_Init+0xe4>)
 8001338:	f001 fa74 	bl	8002824 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800133c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001340:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001344:	b923      	cbnz	r3, 8001350 <HAL_TIM_Base_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 8001346:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800134a:	4620      	mov	r0, r4
 800134c:	f001 fb0e 	bl	800296c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001350:	2302      	movs	r3, #2
 8001352:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001356:	6820      	ldr	r0, [r4, #0]
 8001358:	1d21      	adds	r1, r4, #4
 800135a:	f7ff ff33 	bl	80011c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800135e:	2301      	movs	r3, #1
 8001360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
 8001366:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
}
 800136a:	bd10      	pop	{r4, pc}
 800136c:	40010000 	.word	0x40010000
 8001370:	08002b44 	.word	0x08002b44

08001374 <HAL_TIMEx_CommutationCallback>:
 8001374:	4770      	bx	lr

08001376 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001376:	4770      	bx	lr

08001378 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001378:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800137a:	f000 fbe5 	bl	8001b48 <vTaskStartScheduler>
  
  return osOK;
}
 800137e:	2000      	movs	r0, #0
 8001380:	bd08      	pop	{r3, pc}

08001382 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001382:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001384:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001388:	8a02      	ldrh	r2, [r0, #16]
{
 800138a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800138c:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001390:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001392:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001394:	bf14      	ite	ne
 8001396:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001398:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800139a:	a803      	add	r0, sp, #12
 800139c:	9001      	str	r0, [sp, #4]
 800139e:	9400      	str	r4, [sp, #0]
 80013a0:	4628      	mov	r0, r5
 80013a2:	f000 fb01 	bl	80019a8 <xTaskCreate>
 80013a6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80013a8:	bf0c      	ite	eq
 80013aa:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80013ac:	2000      	movne	r0, #0
}
 80013ae:	b005      	add	sp, #20
 80013b0:	bd30      	pop	{r4, r5, pc}

080013b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013b2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013b4:	2800      	cmp	r0, #0
 80013b6:	bf08      	it	eq
 80013b8:	2001      	moveq	r0, #1
 80013ba:	f000 fd13 	bl	8001de4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013be:	2000      	movs	r0, #0
 80013c0:	bd08      	pop	{r3, pc}

080013c2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80013c2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013c4:	f000 fda6 	bl	8001f14 <xTaskGetSchedulerState>
 80013c8:	2801      	cmp	r0, #1
 80013ca:	d003      	beq.n	80013d4 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80013cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80013d0:	f000 b908 	b.w	80015e4 <xPortSysTickHandler>
 80013d4:	bd08      	pop	{r3, pc}

080013d6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013d6:	f100 0308 	add.w	r3, r0, #8
 80013da:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013e4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013e6:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013e8:	6003      	str	r3, [r0, #0]
 80013ea:	4770      	bx	lr

080013ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	6103      	str	r3, [r0, #16]
 80013f0:	4770      	bx	lr

080013f2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013f2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013fe:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001400:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001402:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001404:	3301      	adds	r3, #1
 8001406:	6003      	str	r3, [r0, #0]
 8001408:	4770      	bx	lr

0800140a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800140a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800140c:	1c53      	adds	r3, r2, #1
{
 800140e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001410:	d10a      	bne.n	8001428 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001412:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001418:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800141a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800141c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800141e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001420:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001422:	3301      	adds	r3, #1
 8001424:	6003      	str	r3, [r0, #0]
 8001426:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001428:	f100 0308 	add.w	r3, r0, #8
 800142c:	685c      	ldr	r4, [r3, #4]
 800142e:	6825      	ldr	r5, [r4, #0]
 8001430:	42aa      	cmp	r2, r5
 8001432:	d3ef      	bcc.n	8001414 <vListInsert+0xa>
 8001434:	4623      	mov	r3, r4
 8001436:	e7f9      	b.n	800142c <vListInsert+0x22>

08001438 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001438:	6841      	ldr	r1, [r0, #4]
 800143a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800143c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800143e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001440:	6882      	ldr	r2, [r0, #8]
 8001442:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001444:	6859      	ldr	r1, [r3, #4]
 8001446:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001448:	bf08      	it	eq
 800144a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800144c:	2200      	movs	r2, #0
 800144e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	3801      	subs	r0, #1
 8001454:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001456:	4770      	bx	lr

08001458 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <prvTaskExitError+0x2c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	d008      	beq.n	8001472 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	e7fe      	b.n	8001470 <prvTaskExitError+0x18>
 8001472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001476:	f383 8811 	msr	BASEPRI, r3
 800147a:	f3bf 8f6f 	isb	sy
 800147e:	f3bf 8f4f 	dsb	sy
 8001482:	e7fe      	b.n	8001482 <prvTaskExitError+0x2a>
 8001484:	20000004 	.word	0x20000004

08001488 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <prvPortStartFirstTask+0x1c>)
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	6800      	ldr	r0, [r0, #0]
 800148e:	f380 8808 	msr	MSP, r0
 8001492:	b662      	cpsie	i
 8001494:	b661      	cpsie	f
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	df00      	svc	0
 80014a0:	bf00      	nop
 80014a2:	0000      	.short	0x0000
 80014a4:	e000ed08 	.word	0xe000ed08

080014a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80014a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80014b8 <vPortEnableVFP+0x10>
 80014ac:	6801      	ldr	r1, [r0, #0]
 80014ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014b2:	6001      	str	r1, [r0, #0]
 80014b4:	4770      	bx	lr
 80014b6:	0000      	.short	0x0000
 80014b8:	e000ed88 	.word	0xe000ed88

080014bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <pxPortInitialiseStack+0x28>)
 80014c6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014ca:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014ce:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014d2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014d6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014da:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80014de:	3844      	subs	r0, #68	; 0x44
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	08001459 	.word	0x08001459
	...

080014f0 <SVC_Handler>:
	__asm volatile (
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <pxCurrentTCBConst2>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	6808      	ldr	r0, [r1, #0]
 80014f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	f380 8809 	msr	PSP, r0
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f380 8811 	msr	BASEPRI, r0
 800150a:	4770      	bx	lr
 800150c:	f3af 8000 	nop.w

08001510 <pxCurrentTCBConst2>:
 8001510:	20003c4c 	.word	0x20003c4c

08001514 <vPortEnterCritical>:
 8001514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001518:	f383 8811 	msr	BASEPRI, r3
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <vPortEnterCritical+0x3c>)
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800152a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800152c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800152e:	d10d      	bne.n	800154c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <vPortEnterCritical+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001538:	d008      	beq.n	800154c <vPortEnterCritical+0x38>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	e7fe      	b.n	800154a <vPortEnterCritical+0x36>
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	e000ed04 	.word	0xe000ed04

08001558 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <vPortExitCritical+0x24>)
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	b943      	cbnz	r3, 8001570 <vPortExitCritical+0x18>
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	e7fe      	b.n	800156e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001570:	3b01      	subs	r3, #1
 8001572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001574:	b90b      	cbnz	r3, 800157a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	4770      	bx	lr
 800157c:	20000004 	.word	0x20000004

08001580 <PendSV_Handler>:
	__asm volatile
 8001580:	f3ef 8009 	mrs	r0, PSP
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <pxCurrentTCBConst>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f01e 0f10 	tst.w	lr, #16
 8001590:	bf08      	it	eq
 8001592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800159a:	6010      	str	r0, [r2, #0]
 800159c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80015a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015a4:	f380 8811 	msr	BASEPRI, r0
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f000 fc76 	bl	8001ea0 <vTaskSwitchContext>
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f380 8811 	msr	BASEPRI, r0
 80015bc:	bc08      	pop	{r3}
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	6808      	ldr	r0, [r1, #0]
 80015c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c6:	f01e 0f10 	tst.w	lr, #16
 80015ca:	bf08      	it	eq
 80015cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015d0:	f380 8809 	msr	PSP, r0
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w

080015e0 <pxCurrentTCBConst>:
 80015e0:	20003c4c 	.word	0x20003c4c

080015e4 <xPortSysTickHandler>:
{
 80015e4:	b508      	push	{r3, lr}
	__asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015f6:	f000 faeb 	bl	8001bd0 <xTaskIncrementTick>
 80015fa:	b118      	cbz	r0, 8001604 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <xPortSysTickHandler+0x28>)
 80015fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001602:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001604:	2300      	movs	r3, #0
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	bd08      	pop	{r3, pc}
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <vPortSetupTimerInterrupt+0x1c>)
 8001612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fbb3 f3f2 	udiv	r3, r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <vPortSetupTimerInterrupt+0x20>)
 800161e:	3b01      	subs	r3, #1
 8001620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <vPortSetupTimerInterrupt+0x24>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c
 8001630:	e000e014 	.word	0xe000e014
 8001634:	e000e010 	.word	0xe000e010

08001638 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <xPortStartScheduler+0xc8>)
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <xPortStartScheduler+0xcc>)
{
 800163c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	4291      	cmp	r1, r2
 8001642:	d108      	bne.n	8001656 <xPortStartScheduler+0x1e>
	__asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	e7fe      	b.n	8001654 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <xPortStartScheduler+0xd0>)
 800165a:	429a      	cmp	r2, r3
 800165c:	d108      	bne.n	8001670 <xPortStartScheduler+0x38>
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	e7fe      	b.n	800166e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <xPortStartScheduler+0xd4>)
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001678:	22ff      	movs	r2, #255	; 0xff
 800167a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800167c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001686:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800168a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800168e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <xPortStartScheduler+0xdc>)
 8001692:	2207      	movs	r2, #7
 8001694:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001696:	2100      	movs	r1, #0
 8001698:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800169c:	0600      	lsls	r0, r0, #24
 800169e:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80016a2:	d423      	bmi.n	80016ec <xPortStartScheduler+0xb4>
 80016a4:	b101      	cbz	r1, 80016a8 <xPortStartScheduler+0x70>
 80016a6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80016b0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <xPortStartScheduler+0xd4>)
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <xPortStartScheduler+0xe0>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016ca:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016cc:	f7ff ffa0 	bl	8001610 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <xPortStartScheduler+0xe4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80016d6:	f7ff fee7 	bl	80014a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <xPortStartScheduler+0xe8>)
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016e2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016e4:	f7ff fed0 	bl	8001488 <prvPortStartFirstTask>
	prvTaskExitError();
 80016e8:	f7ff feb6 	bl	8001458 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f88d 2003 	strb.w	r2, [sp, #3]
 80016f8:	2101      	movs	r1, #1
 80016fa:	4622      	mov	r2, r4
 80016fc:	e7cc      	b.n	8001698 <xPortStartScheduler+0x60>
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	410fc271 	.word	0x410fc271
 8001708:	410fc270 	.word	0x410fc270
 800170c:	e000e400 	.word	0xe000e400
 8001710:	2000002c 	.word	0x2000002c
 8001714:	20000030 	.word	0x20000030
 8001718:	e000ed20 	.word	0xe000ed20
 800171c:	20000004 	.word	0x20000004
 8001720:	e000ef34 	.word	0xe000ef34

08001724 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001724:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <prvInsertBlockIntoFreeList+0x40>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4282      	cmp	r2, r0
 800172c:	d318      	bcc.n	8001760 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800172e:	685c      	ldr	r4, [r3, #4]
 8001730:	1919      	adds	r1, r3, r4
 8001732:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001734:	bf01      	itttt	eq
 8001736:	6841      	ldreq	r1, [r0, #4]
 8001738:	4618      	moveq	r0, r3
 800173a:	1909      	addeq	r1, r1, r4
 800173c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800173e:	6844      	ldr	r4, [r0, #4]
 8001740:	1901      	adds	r1, r0, r4
 8001742:	428a      	cmp	r2, r1
 8001744:	d107      	bne.n	8001756 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <prvInsertBlockIntoFreeList+0x44>)
 8001748:	6809      	ldr	r1, [r1, #0]
 800174a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800174c:	bf1f      	itttt	ne
 800174e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001750:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001752:	1909      	addne	r1, r1, r4
 8001754:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001756:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001758:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800175a:	bf18      	it	ne
 800175c:	6018      	strne	r0, [r3, #0]
 800175e:	bd10      	pop	{r4, pc}
 8001760:	4613      	mov	r3, r2
 8001762:	e7e1      	b.n	8001728 <prvInsertBlockIntoFreeList+0x4>
 8001764:	20003c44 	.word	0x20003c44
 8001768:	20000034 	.word	0x20000034

0800176c <pvPortMalloc>:
{
 800176c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001770:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001772:	f000 fa25 	bl	8001bc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001776:	493e      	ldr	r1, [pc, #248]	; (8001870 <pvPortMalloc+0x104>)
 8001778:	4d3e      	ldr	r5, [pc, #248]	; (8001874 <pvPortMalloc+0x108>)
 800177a:	680b      	ldr	r3, [r1, #0]
 800177c:	bb0b      	cbnz	r3, 80017c2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001780:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001782:	bf1f      	itttt	ne
 8001784:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001786:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800178a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800178e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001790:	bf14      	ite	ne
 8001792:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001794:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001798:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800179a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800179c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017a0:	4e36      	ldr	r6, [pc, #216]	; (800187c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80017a2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80017a4:	2000      	movs	r0, #0
 80017a6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017a8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80017aa:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017ac:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017ae:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017b0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017b4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017b6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <pvPortMalloc+0x118>)
 80017ba:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017c0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017c2:	682f      	ldr	r7, [r5, #0]
 80017c4:	4227      	tst	r7, r4
 80017c6:	d116      	bne.n	80017f6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d041      	beq.n	8001850 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80017cc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017d0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017d2:	bf1c      	itt	ne
 80017d4:	f023 0307 	bicne.w	r3, r3, #7
 80017d8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017da:	b163      	cbz	r3, 80017f6 <pvPortMalloc+0x8a>
 80017dc:	4a29      	ldr	r2, [pc, #164]	; (8001884 <pvPortMalloc+0x118>)
 80017de:	6816      	ldr	r6, [r2, #0]
 80017e0:	42b3      	cmp	r3, r6
 80017e2:	4690      	mov	r8, r2
 80017e4:	d807      	bhi.n	80017f6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80017e6:	4a25      	ldr	r2, [pc, #148]	; (800187c <pvPortMalloc+0x110>)
 80017e8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017ea:	6868      	ldr	r0, [r5, #4]
 80017ec:	4283      	cmp	r3, r0
 80017ee:	d804      	bhi.n	80017fa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80017f0:	6809      	ldr	r1, [r1, #0]
 80017f2:	428d      	cmp	r5, r1
 80017f4:	d107      	bne.n	8001806 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80017f6:	2400      	movs	r4, #0
 80017f8:	e02a      	b.n	8001850 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017fa:	682c      	ldr	r4, [r5, #0]
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d0f7      	beq.n	80017f0 <pvPortMalloc+0x84>
 8001800:	462a      	mov	r2, r5
 8001802:	4625      	mov	r5, r4
 8001804:	e7f1      	b.n	80017ea <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001806:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001808:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800180a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800180c:	1ac2      	subs	r2, r0, r3
 800180e:	2a10      	cmp	r2, #16
 8001810:	d90f      	bls.n	8001832 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001812:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001814:	0741      	lsls	r1, r0, #29
 8001816:	d008      	beq.n	800182a <pvPortMalloc+0xbe>
 8001818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	e7fe      	b.n	8001828 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800182a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800182c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800182e:	f7ff ff79 	bl	8001724 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001832:	4913      	ldr	r1, [pc, #76]	; (8001880 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001834:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001836:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001838:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800183a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800183c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800183e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001842:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001846:	bf38      	it	cc
 8001848:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800184a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800184c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800184e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001850:	f000 fa50 	bl	8001cf4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001854:	0763      	lsls	r3, r4, #29
 8001856:	d008      	beq.n	800186a <pvPortMalloc+0xfe>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	e7fe      	b.n	8001868 <pvPortMalloc+0xfc>
}
 800186a:	4620      	mov	r0, r4
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001870:	20000034 	.word	0x20000034
 8001874:	20003c38 	.word	0x20003c38
 8001878:	20000038 	.word	0x20000038
 800187c:	20003c44 	.word	0x20003c44
 8001880:	20003c40 	.word	0x20003c40
 8001884:	20003c3c 	.word	0x20003c3c

08001888 <vPortFree>:
{
 8001888:	b510      	push	{r4, lr}
	if( pv != NULL )
 800188a:	4604      	mov	r4, r0
 800188c:	b370      	cbz	r0, 80018ec <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <vPortFree+0x68>)
 8001890:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4213      	tst	r3, r2
 8001898:	d108      	bne.n	80018ac <vPortFree+0x24>
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	e7fe      	b.n	80018aa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018ac:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80018b0:	b141      	cbz	r1, 80018c4 <vPortFree+0x3c>
 80018b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b6:	f383 8811 	msr	BASEPRI, r3
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	e7fe      	b.n	80018c2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018c4:	ea23 0302 	bic.w	r3, r3, r2
 80018c8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80018cc:	f000 f978 	bl	8001bc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <vPortFree+0x6c>)
 80018d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80018d6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018d8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018dc:	440b      	add	r3, r1
 80018de:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018e0:	f7ff ff20 	bl	8001724 <prvInsertBlockIntoFreeList>
}
 80018e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80018e8:	f000 ba04 	b.w	8001cf4 <xTaskResumeAll>
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	bf00      	nop
 80018f0:	20003c38 	.word	0x20003c38
 80018f4:	20003c3c 	.word	0x20003c3c

080018f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <prvResetNextTaskUnblockTime+0x1c>)
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <prvResetNextTaskUnblockTime+0x20>)
 8001900:	b919      	cbnz	r1, 800190a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800190e:	68d2      	ldr	r2, [r2, #12]
 8001910:	6852      	ldr	r2, [r2, #4]
 8001912:	e7f8      	b.n	8001906 <prvResetNextTaskUnblockTime+0xe>
 8001914:	20003c50 	.word	0x20003c50
 8001918:	20003d28 	.word	0x20003d28

0800191c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001920:	4e1b      	ldr	r6, [pc, #108]	; (8001990 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001922:	681d      	ldr	r5, [r3, #0]
{
 8001924:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001926:	6830      	ldr	r0, [r6, #0]
 8001928:	3004      	adds	r0, #4
{
 800192a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800192c:	f7ff fd84 	bl	8001438 <uxListRemove>
 8001930:	4633      	mov	r3, r6
 8001932:	b940      	cbnz	r0, 8001946 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001934:	6831      	ldr	r1, [r6, #0]
 8001936:	4e17      	ldr	r6, [pc, #92]	; (8001994 <prvAddCurrentTaskToDelayedList+0x78>)
 8001938:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800193a:	6832      	ldr	r2, [r6, #0]
 800193c:	2001      	movs	r0, #1
 800193e:	4088      	lsls	r0, r1
 8001940:	ea22 0200 	bic.w	r2, r2, r0
 8001944:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001946:	1c62      	adds	r2, r4, #1
 8001948:	d107      	bne.n	800195a <prvAddCurrentTaskToDelayedList+0x3e>
 800194a:	b137      	cbz	r7, 800195a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	4812      	ldr	r0, [pc, #72]	; (8001998 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001950:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001956:	f7ff bd4c 	b.w	80013f2 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800195a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800195c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800195e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001960:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001962:	d907      	bls.n	8001974 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <prvAddCurrentTaskToDelayedList+0x80>)
 8001966:	6810      	ldr	r0, [r2, #0]
 8001968:	6819      	ldr	r1, [r3, #0]
}
 800196a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800196e:	3104      	adds	r1, #4
 8001970:	f7ff bd4b 	b.w	800140a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001976:	6810      	ldr	r0, [r2, #0]
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	3104      	adds	r1, #4
 800197c:	f7ff fd45 	bl	800140a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001986:	bf38      	it	cc
 8001988:	601c      	strcc	r4, [r3, #0]
 800198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198c:	20003d70 	.word	0x20003d70
 8001990:	20003c4c 	.word	0x20003c4c
 8001994:	20003cf8 	.word	0x20003cf8
 8001998:	20003d48 	.word	0x20003d48
 800199c:	20003c54 	.word	0x20003c54
 80019a0:	20003c50 	.word	0x20003c50
 80019a4:	20003d28 	.word	0x20003d28

080019a8 <xTaskCreate>:
	{
 80019a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ac:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80019b0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b2:	4650      	mov	r0, sl
	{
 80019b4:	460f      	mov	r7, r1
 80019b6:	4699      	mov	r9, r3
 80019b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ba:	f7ff fed7 	bl	800176c <pvPortMalloc>
			if( pxStack != NULL )
 80019be:	4605      	mov	r5, r0
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f000 8096 	beq.w	8001af2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80019c6:	2054      	movs	r0, #84	; 0x54
 80019c8:	f7ff fed0 	bl	800176c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80019cc:	4604      	mov	r4, r0
 80019ce:	2800      	cmp	r0, #0
 80019d0:	f000 808c 	beq.w	8001aec <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80019d4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80019d8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80019da:	4455      	add	r5, sl
 80019dc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80019de:	f025 0a07 	bic.w	sl, r5, #7
 80019e2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80019e6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019e8:	7859      	ldrb	r1, [r3, #1]
 80019ea:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80019ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80019f2:	b109      	cbz	r1, 80019f8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019f4:	42bb      	cmp	r3, r7
 80019f6:	d1f7      	bne.n	80019e8 <xTaskCreate+0x40>
 80019f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80019fa:	2d06      	cmp	r5, #6
 80019fc:	bf28      	it	cs
 80019fe:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a00:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a04:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001a06:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001a08:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a0a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a0c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001a10:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a14:	f7ff fcea 	bl	80013ec <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a18:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a1c:	f104 0018 	add.w	r0, r4, #24
 8001a20:	f7ff fce4 	bl	80013ec <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001a24:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a2a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a2e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a32:	464a      	mov	r2, r9
 8001a34:	4641      	mov	r1, r8
 8001a36:	4650      	mov	r0, sl
 8001a38:	f7ff fd40 	bl	80014bc <pxPortInitialiseStack>
 8001a3c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001a3e:	b106      	cbz	r6, 8001a42 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a40:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001a42:	f7ff fd67 	bl	8001514 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001a48:	4e32      	ldr	r6, [pc, #200]	; (8001b14 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001b40 <xTaskCreate+0x198>
 8001a50:	3201      	adds	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001a54:	6835      	ldr	r5, [r6, #0]
 8001a56:	2d00      	cmp	r5, #0
 8001a58:	d14e      	bne.n	8001af8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001a5a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11d      	bne.n	8001a9e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a62:	eb08 0005 	add.w	r0, r8, r5
 8001a66:	3514      	adds	r5, #20
 8001a68:	f7ff fcb5 	bl	80013d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a6c:	2d8c      	cmp	r5, #140	; 0x8c
 8001a6e:	d1f8      	bne.n	8001a62 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001a70:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001b44 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001a74:	4d28      	ldr	r5, [pc, #160]	; (8001b18 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001a76:	4648      	mov	r0, r9
 8001a78:	f7ff fcad 	bl	80013d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f7ff fcaa 	bl	80013d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a82:	4826      	ldr	r0, [pc, #152]	; (8001b1c <xTaskCreate+0x174>)
 8001a84:	f7ff fca7 	bl	80013d6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001a88:	4825      	ldr	r0, [pc, #148]	; (8001b20 <xTaskCreate+0x178>)
 8001a8a:	f7ff fca4 	bl	80013d6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001a8e:	4825      	ldr	r0, [pc, #148]	; (8001b24 <xTaskCreate+0x17c>)
 8001a90:	f7ff fca1 	bl	80013d6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <xTaskCreate+0x180>)
 8001a96:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <xTaskCreate+0x184>)
 8001a9c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001aa0:	4924      	ldr	r1, [pc, #144]	; (8001b34 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001aa2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001aa4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aac:	2501      	movs	r5, #1
 8001aae:	fa05 f302 	lsl.w	r3, r5, r2
 8001ab2:	4303      	orrs	r3, r0
 8001ab4:	2014      	movs	r0, #20
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	fb00 8002 	mla	r0, r0, r2, r8
 8001abc:	4639      	mov	r1, r7
 8001abe:	f7ff fc98 	bl	80013f2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ac2:	f7ff fd49 	bl	8001558 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <xTaskCreate+0x190>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b163      	cbz	r3, 8001ae6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d207      	bcs.n	8001ae6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <xTaskCreate+0x194>)
 8001ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	f3bf 8f6f 	isb	sy
	}
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001aec:	4628      	mov	r0, r5
 8001aee:	f7ff fecb 	bl	8001888 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001af2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001af6:	e7f6      	b.n	8001ae6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <xTaskCreate+0x190>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ce      	bne.n	8001a9e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b00:	6833      	ldr	r3, [r6, #0]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b06:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001b08:	bf98      	it	ls
 8001b0a:	6034      	strls	r4, [r6, #0]
 8001b0c:	e7c7      	b.n	8001a9e <xTaskCreate+0xf6>
 8001b0e:	bf00      	nop
 8001b10:	20003ce4 	.word	0x20003ce4
 8001b14:	20003c4c 	.word	0x20003c4c
 8001b18:	20003d10 	.word	0x20003d10
 8001b1c:	20003d30 	.word	0x20003d30
 8001b20:	20003d5c 	.word	0x20003d5c
 8001b24:	20003d48 	.word	0x20003d48
 8001b28:	20003c50 	.word	0x20003c50
 8001b2c:	20003c54 	.word	0x20003c54
 8001b30:	20003cf4 	.word	0x20003cf4
 8001b34:	20003cf8 	.word	0x20003cf8
 8001b38:	20003d44 	.word	0x20003d44
 8001b3c:	e000ed04 	.word	0xe000ed04
 8001b40:	20003c58 	.word	0x20003c58
 8001b44:	20003cfc 	.word	0x20003cfc

08001b48 <vTaskStartScheduler>:
{
 8001b48:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <vTaskStartScheduler+0x60>)
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	2400      	movs	r4, #0
 8001b50:	9400      	str	r4, [sp, #0]
 8001b52:	4623      	mov	r3, r4
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	4915      	ldr	r1, [pc, #84]	; (8001bac <vTaskStartScheduler+0x64>)
 8001b58:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <vTaskStartScheduler+0x68>)
 8001b5a:	f7ff ff25 	bl	80019a8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001b5e:	2801      	cmp	r0, #1
 8001b60:	d114      	bne.n	8001b8c <vTaskStartScheduler+0x44>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <vTaskStartScheduler+0x6c>)
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <vTaskStartScheduler+0x70>)
 8001b7c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <vTaskStartScheduler+0x74>)
 8001b80:	601c      	str	r4, [r3, #0]
}
 8001b82:	b002      	add	sp, #8
 8001b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001b88:	f7ff bd56 	b.w	8001638 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d108      	bne.n	8001ba2 <vTaskStartScheduler+0x5a>
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	e7fe      	b.n	8001ba0 <vTaskStartScheduler+0x58>
}
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20003d24 	.word	0x20003d24
 8001bac:	08002b7c 	.word	0x08002b7c
 8001bb0:	08001e2d 	.word	0x08001e2d
 8001bb4:	20003d28 	.word	0x20003d28
 8001bb8:	20003d44 	.word	0x20003d44
 8001bbc:	20003d70 	.word	0x20003d70

08001bc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001bc0:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <vTaskSuspendAll+0xc>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20003cf0 	.word	0x20003cf0

08001bd0 <xTaskIncrementTick>:
{
 8001bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <xTaskIncrementTick+0xf8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d153      	bne.n	8001c84 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <xTaskIncrementTick+0xfc>)
 8001bde:	681c      	ldr	r4, [r3, #0]
 8001be0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001be2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001be4:	b9bc      	cbnz	r4, 8001c16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <xTaskIncrementTick+0x100>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	b142      	cbz	r2, 8001c00 <xTaskIncrementTick+0x30>
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	e7fe      	b.n	8001bfe <xTaskIncrementTick+0x2e>
 8001c00:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <xTaskIncrementTick+0x104>)
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	6810      	ldr	r0, [r2, #0]
 8001c06:	6018      	str	r0, [r3, #0]
 8001c08:	6011      	str	r1, [r2, #0]
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <xTaskIncrementTick+0x108>)
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	f7ff fe71 	bl	80018f8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c16:	4d31      	ldr	r5, [pc, #196]	; (8001cdc <xTaskIncrementTick+0x10c>)
 8001c18:	4f31      	ldr	r7, [pc, #196]	; (8001ce0 <xTaskIncrementTick+0x110>)
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	429c      	cmp	r4, r3
 8001c1e:	f04f 0b00 	mov.w	fp, #0
 8001c22:	d33e      	bcc.n	8001ca2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c24:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001cd0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001c28:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001cf0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c2c:	f8d8 2000 	ldr.w	r2, [r8]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	bb72      	cbnz	r2, 8001c92 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c38:	602a      	str	r2, [r5, #0]
					break;
 8001c3a:	e032      	b.n	8001ca2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c3c:	f106 0a04 	add.w	sl, r6, #4
 8001c40:	4650      	mov	r0, sl
 8001c42:	f7ff fbf9 	bl	8001438 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c46:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001c48:	b119      	cbz	r1, 8001c52 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c4a:	f106 0018 	add.w	r0, r6, #24
 8001c4e:	f7ff fbf3 	bl	8001438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c52:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c54:	f8d9 3000 	ldr.w	r3, [r9]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	fa02 f100 	lsl.w	r1, r2, r0
 8001c5e:	4319      	orrs	r1, r3
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <xTaskIncrementTick+0x114>)
 8001c62:	f8c9 1000 	str.w	r1, [r9]
 8001c66:	f04f 0e14 	mov.w	lr, #20
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	fb0e 3000 	mla	r0, lr, r0, r3
 8001c70:	f7ff fbbf 	bl	80013f2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c74:	6838      	ldr	r0, [r7, #0]
 8001c76:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001c78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001c7a:	4291      	cmp	r1, r2
 8001c7c:	bf28      	it	cs
 8001c7e:	f04f 0b01 	movcs.w	fp, #1
 8001c82:	e7d3      	b.n	8001c2c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <xTaskIncrementTick+0x118>)
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001c8c:	f04f 0b00 	mov.w	fp, #0
 8001c90:	e011      	b.n	8001cb6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c92:	f8d8 2000 	ldr.w	r2, [r8]
 8001c96:	68d2      	ldr	r2, [r2, #12]
 8001c98:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c9a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001c9c:	428c      	cmp	r4, r1
 8001c9e:	d2cd      	bcs.n	8001c3c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001ca0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <xTaskIncrementTick+0x114>)
 8001ca6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca8:	2214      	movs	r2, #20
 8001caa:	434a      	muls	r2, r1
 8001cac:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001cae:	2a02      	cmp	r2, #2
 8001cb0:	bf28      	it	cs
 8001cb2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <xTaskIncrementTick+0x11c>)
 8001cb8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	bf18      	it	ne
 8001cbe:	f04f 0b01 	movne.w	fp, #1
}
 8001cc2:	4658      	mov	r0, fp
 8001cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc8:	20003cf0 	.word	0x20003cf0
 8001ccc:	20003d70 	.word	0x20003d70
 8001cd0:	20003c50 	.word	0x20003c50
 8001cd4:	20003c54 	.word	0x20003c54
 8001cd8:	20003d2c 	.word	0x20003d2c
 8001cdc:	20003d28 	.word	0x20003d28
 8001ce0:	20003c4c 	.word	0x20003c4c
 8001ce4:	20003c58 	.word	0x20003c58
 8001ce8:	20003cec 	.word	0x20003cec
 8001cec:	20003d74 	.word	0x20003d74
 8001cf0:	20003cf8 	.word	0x20003cf8

08001cf4 <xTaskResumeAll>:
{
 8001cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001cf8:	4c31      	ldr	r4, [pc, #196]	; (8001dc0 <xTaskResumeAll+0xcc>)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	b943      	cbnz	r3, 8001d10 <xTaskResumeAll+0x1c>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	e7fe      	b.n	8001d0e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001d10:	f7ff fc00 	bl	8001514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d1a:	6824      	ldr	r4, [r4, #0]
 8001d1c:	b12c      	cbz	r4, 8001d2a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d20:	f7ff fc1a 	bl	8001558 <vPortExitCritical>
}
 8001d24:	4620      	mov	r0, r4
 8001d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <xTaskResumeAll+0xd0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f5      	beq.n	8001d1e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d32:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001ddc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001d36:	4f24      	ldr	r7, [pc, #144]	; (8001dc8 <xTaskResumeAll+0xd4>)
 8001d38:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001de0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d3c:	f8d9 3000 	ldr.w	r3, [r9]
 8001d40:	b9e3      	cbnz	r3, 8001d7c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001d42:	b10c      	cbz	r4, 8001d48 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001d44:	f7ff fdd8 	bl	80018f8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001d48:	4d20      	ldr	r5, [pc, #128]	; (8001dcc <xTaskResumeAll+0xd8>)
 8001d4a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001d4c:	b144      	cbz	r4, 8001d60 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001d4e:	4e20      	ldr	r6, [pc, #128]	; (8001dd0 <xTaskResumeAll+0xdc>)
 8001d50:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001d52:	f7ff ff3d 	bl	8001bd0 <xTaskIncrementTick>
 8001d56:	b100      	cbz	r0, 8001d5a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001d58:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001d5a:	3c01      	subs	r4, #1
 8001d5c:	d1f9      	bne.n	8001d52 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001d5e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <xTaskResumeAll+0xdc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0da      	beq.n	8001d1e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <xTaskResumeAll+0xe0>)
 8001d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001d78:	2401      	movs	r4, #1
 8001d7a:	e7d1      	b.n	8001d20 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001d80:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d82:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d84:	f104 0018 	add.w	r0, r4, #24
 8001d88:	f7ff fb56 	bl	8001438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f7ff fb53 	bl	8001438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	2501      	movs	r5, #1
 8001d98:	fa05 f302 	lsl.w	r3, r5, r2
 8001d9c:	2014      	movs	r0, #20
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	fb00 8002 	mla	r0, r0, r2, r8
 8001da4:	4631      	mov	r1, r6
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	f7ff fb23 	bl	80013f2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <xTaskResumeAll+0xe4>)
 8001dae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001db6:	bf24      	itt	cs
 8001db8:	4b05      	ldrcs	r3, [pc, #20]	; (8001dd0 <xTaskResumeAll+0xdc>)
 8001dba:	601d      	strcs	r5, [r3, #0]
 8001dbc:	e7be      	b.n	8001d3c <xTaskResumeAll+0x48>
 8001dbe:	bf00      	nop
 8001dc0:	20003cf0 	.word	0x20003cf0
 8001dc4:	20003ce4 	.word	0x20003ce4
 8001dc8:	20003cf8 	.word	0x20003cf8
 8001dcc:	20003cec 	.word	0x20003cec
 8001dd0:	20003d74 	.word	0x20003d74
 8001dd4:	e000ed04 	.word	0xe000ed04
 8001dd8:	20003c4c 	.word	0x20003c4c
 8001ddc:	20003d30 	.word	0x20003d30
 8001de0:	20003c58 	.word	0x20003c58

08001de4 <vTaskDelay>:
	{
 8001de4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001de6:	b940      	cbnz	r0, 8001dfa <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <vTaskDelay+0x40>)
 8001dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <vTaskDelay+0x44>)
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	b141      	cbz	r1, 8001e12 <vTaskDelay+0x2e>
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	e7fe      	b.n	8001e10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001e12:	f7ff fed5 	bl	8001bc0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e16:	f7ff fd81 	bl	800191c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001e1a:	f7ff ff6b 	bl	8001cf4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d0e2      	beq.n	8001de8 <vTaskDelay+0x4>
 8001e22:	bd08      	pop	{r3, pc}
 8001e24:	e000ed04 	.word	0xe000ed04
 8001e28:	20003cf0 	.word	0x20003cf0

08001e2c <prvIdleTask>:
{
 8001e2c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e2e:	4e17      	ldr	r6, [pc, #92]	; (8001e8c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e30:	4c17      	ldr	r4, [pc, #92]	; (8001e90 <prvIdleTask+0x64>)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	b963      	cbnz	r3, 8001e50 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <prvIdleTask+0x68>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d9f8      	bls.n	8001e30 <prvIdleTask+0x4>
				taskYIELD();
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <prvIdleTask+0x6c>)
 8001e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	e7ef      	b.n	8001e30 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001e50:	f7ff feb6 	bl	8001bc0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e54:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001e56:	f7ff ff4d 	bl	8001cf4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001e5a:	2d00      	cmp	r5, #0
 8001e5c:	d0e9      	beq.n	8001e32 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001e5e:	f7ff fb59 	bl	8001514 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e62:	68f3      	ldr	r3, [r6, #12]
 8001e64:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e66:	1d28      	adds	r0, r5, #4
 8001e68:	f7ff fae6 	bl	8001438 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <prvIdleTask+0x70>)
 8001e6e:	6813      	ldr	r3, [r2, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001e7a:	f7ff fb6d 	bl	8001558 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001e7e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e80:	f7ff fd02 	bl	8001888 <vPortFree>
			vPortFree( pxTCB );
 8001e84:	4628      	mov	r0, r5
 8001e86:	f7ff fcff 	bl	8001888 <vPortFree>
 8001e8a:	e7d2      	b.n	8001e32 <prvIdleTask+0x6>
 8001e8c:	20003d5c 	.word	0x20003d5c
 8001e90:	20003ce8 	.word	0x20003ce8
 8001e94:	20003c58 	.word	0x20003c58
 8001e98:	e000ed04 	.word	0xe000ed04
 8001e9c:	20003ce4 	.word	0x20003ce4

08001ea0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <vTaskSwitchContext+0x60>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <vTaskSwitchContext+0x64>)
{
 8001ea6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ea8:	b112      	cbz	r2, 8001eb0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001eaa:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001eb0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <vTaskSwitchContext+0x68>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f1c3 031f 	rsb	r3, r3, #31
 8001ec0:	2214      	movs	r2, #20
 8001ec2:	4912      	ldr	r1, [pc, #72]	; (8001f0c <vTaskSwitchContext+0x6c>)
 8001ec4:	435a      	muls	r2, r3
 8001ec6:	1888      	adds	r0, r1, r2
 8001ec8:	588c      	ldr	r4, [r1, r2]
 8001eca:	b944      	cbnz	r4, 8001ede <vTaskSwitchContext+0x3e>
	__asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	e7fe      	b.n	8001edc <vTaskSwitchContext+0x3c>
 8001ede:	6844      	ldr	r4, [r0, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	6864      	ldr	r4, [r4, #4]
 8001ee4:	6044      	str	r4, [r0, #4]
 8001ee6:	440a      	add	r2, r1
 8001ee8:	4294      	cmp	r4, r2
 8001eea:	bf04      	itt	eq
 8001eec:	6862      	ldreq	r2, [r4, #4]
 8001eee:	6042      	streq	r2, [r0, #4]
 8001ef0:	2214      	movs	r2, #20
 8001ef2:	fb02 1303 	mla	r3, r2, r3, r1
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <vTaskSwitchContext+0x70>)
 8001efc:	e7d6      	b.n	8001eac <vTaskSwitchContext+0xc>
 8001efe:	bf00      	nop
 8001f00:	20003cf0 	.word	0x20003cf0
 8001f04:	20003d74 	.word	0x20003d74
 8001f08:	20003cf8 	.word	0x20003cf8
 8001f0c:	20003c58 	.word	0x20003c58
 8001f10:	20003c4c 	.word	0x20003c4c

08001f14 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <xTaskGetSchedulerState+0x18>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b133      	cbz	r3, 8001f28 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <xTaskGetSchedulerState+0x1c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f20:	bf0c      	ite	eq
 8001f22:	2002      	moveq	r0, #2
 8001f24:	2000      	movne	r0, #0
 8001f26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f28:	2001      	movs	r0, #1
	}
 8001f2a:	4770      	bx	lr
 8001f2c:	20003d44 	.word	0x20003d44
 8001f30:	20003cf0 	.word	0x20003cf0

08001f34 <getDigitFromInt>:
	current_digit = (current_digit + 1) % 6;
	return;
}

unsigned char getDigitFromInt(uint32_t display_val, unsigned char pos)
{
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <getDigitFromInt+0x24>)
 8001f36:	4298      	cmp	r0, r3
 8001f38:	bf28      	it	cs
 8001f3a:	4618      	movcs	r0, r3
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	2300      	movs	r3, #0
	if(display_val > 999999) {
		display_val = 999999;
	}


	for (int i = 0; i < pos; i++) {
 8001f40:	428b      	cmp	r3, r1
 8001f42:	db05      	blt.n	8001f50 <getDigitFromInt+0x1c>
		display_val /= 10;
	}
	digit = display_val % 10;
 8001f44:	fbb0 f3f2 	udiv	r3, r0, r2
 8001f48:	fb02 0013 	mls	r0, r2, r3, r0

	return digit;

}
 8001f4c:	b2c0      	uxtb	r0, r0
 8001f4e:	4770      	bx	lr
		display_val /= 10;
 8001f50:	fbb0 f0f2 	udiv	r0, r0, r2
	for (int i = 0; i < pos; i++) {
 8001f54:	3301      	adds	r3, #1
 8001f56:	e7f3      	b.n	8001f40 <getDigitFromInt+0xc>
 8001f58:	000f423f 	.word	0x000f423f

08001f5c <getDigitMask>:
unsigned char getDigitMask(unsigned char digit)
{
	unsigned char digit_mask = 0;

	if(digit > 9) {
		digit = 8;
 8001f5c:	2809      	cmp	r0, #9
 8001f5e:	bf88      	it	hi
 8001f60:	2008      	movhi	r0, #8
	case 9:
		digit_mask = 0b11100110;
		break;
	}
	return digit_mask;
}
 8001f62:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <getDigitMask+0xc>)
 8001f64:	5c18      	ldrb	r0, [r3, r0]
 8001f66:	4770      	bx	lr
 8001f68:	08002b81 	.word	0x08002b81

08001f6c <updateCharacterDisplay>:
{
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digit = getDigitFromInt(display_val, current_digit);
 8001f6e:	4c41      	ldr	r4, [pc, #260]	; (8002074 <updateCharacterDisplay+0x108>)
 8001f70:	7821      	ldrb	r1, [r4, #0]
 8001f72:	f7ff ffdf 	bl	8001f34 <getDigitFromInt>
	digit_bitmask = getDigitMask(digit);
 8001f76:	f7ff fff1 	bl	8001f5c <getDigitMask>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
	digit_bitmask = getDigitMask(digit);
 8001f7c:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f82:	483d      	ldr	r0, [pc, #244]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001f84:	f7fe fcc2 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8e:	483a      	ldr	r0, [pc, #232]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001f90:	f7fe fcbc 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9a:	4837      	ldr	r0, [pc, #220]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001f9c:	f7fe fcb6 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa6:	4834      	ldr	r0, [pc, #208]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001fa8:	f7fe fcb0 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb2:	4831      	ldr	r0, [pc, #196]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001fb4:	f7fe fcaa 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	482e      	ldr	r0, [pc, #184]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001fc0:	f7fe fca4 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fca:	482b      	ldr	r0, [pc, #172]	; (8002078 <updateCharacterDisplay+0x10c>)
 8001fcc:	f7fe fc9e 	bl	800090c <HAL_GPIO_WritePin>
	asm("NOP");
 8001fd0:	bf00      	nop
	asm("NOP");
 8001fd2:	bf00      	nop
	asm("NOP");
 8001fd4:	bf00      	nop
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fdc:	4826      	ldr	r0, [pc, #152]	; (8002078 <updateCharacterDisplay+0x10c>)
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001fde:	4e26      	ldr	r6, [pc, #152]	; (8002078 <updateCharacterDisplay+0x10c>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001fe0:	f7fe fc94 	bl	800090c <HAL_GPIO_WritePin>
 8001fe4:	2500      	movs	r5, #0
		if( (digit_bitmask >> inc & 0x01) == 1) {
 8001fe6:	fa27 f305 	lsr.w	r3, r7, r5
 8001fea:	07db      	lsls	r3, r3, #31
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fec:	bf4c      	ite	mi
 8001fee:	2200      	movmi	r2, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001ff0:	2201      	movpl	r2, #1
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	f7fe fc89 	bl	800090c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002000:	4630      	mov	r0, r6
 8002002:	f7fe fc83 	bl	800090c <HAL_GPIO_WritePin>
		asm("NOP");
 8002006:	bf00      	nop
		asm("NOP");
 8002008:	bf00      	nop
		asm("NOP");
 800200a:	bf00      	nop
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4630      	mov	r0, r6
 8002014:	3501      	adds	r5, #1
 8002016:	f7fe fc79 	bl	800090c <HAL_GPIO_WritePin>
	for(unsigned char inc = 0; inc < 8; inc++) {
 800201a:	2d08      	cmp	r5, #8
 800201c:	d1e3      	bne.n	8001fe6 <updateCharacterDisplay+0x7a>
	switch(current_digit) {
 800201e:	7823      	ldrb	r3, [r4, #0]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d80a      	bhi.n	800203a <updateCharacterDisplay+0xce>
 8002024:	e8df f003 	tbb	[pc, r3]
 8002028:	1a161203 	.word	0x1a161203
 800202c:	221e      	.short	0x221e
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <updateCharacterDisplay+0x10c>)
 8002036:	f7fe fc69 	bl	800090c <HAL_GPIO_WritePin>
	current_digit = (current_digit + 1) % 6;
 800203a:	7823      	ldrb	r3, [r4, #0]
 800203c:	2106      	movs	r1, #6
 800203e:	3301      	adds	r3, #1
 8002040:	fb93 f2f1 	sdiv	r2, r3, r1
 8002044:	fb01 3312 	mls	r3, r1, r2, r3
 8002048:	7023      	strb	r3, [r4, #0]
 800204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002052:	e7ef      	b.n	8002034 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800205a:	e7eb      	b.n	8002034 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002062:	e7e7      	b.n	8002034 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206a:	e7e3      	b.n	8002034 <updateCharacterDisplay+0xc8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002072:	e7df      	b.n	8002034 <updateCharacterDisplay+0xc8>
 8002074:	20003d79 	.word	0x20003d79
 8002078:	40021000 	.word	0x40021000

0800207c <updateRgDisplay>:

void updateRgDisplay(uint32_t red_mask, uint32_t green_mask)
{
 800207c:	b570      	push	{r4, r5, r6, lr}
	static unsigned char bank = 0;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
{
 8002080:	4605      	mov	r5, r0
 8002082:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 8002084:	48a2      	ldr	r0, [pc, #648]	; (8002310 <updateRgDisplay+0x294>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);

	switch(bank) {
 8002086:	4ea3      	ldr	r6, [pc, #652]	; (8002314 <updateRgDisplay+0x298>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET);
 8002088:	2101      	movs	r1, #1
 800208a:	f7fe fc3f 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	2102      	movs	r1, #2
 8002092:	489f      	ldr	r0, [pc, #636]	; (8002310 <updateRgDisplay+0x294>)
 8002094:	f7fe fc3a 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2104      	movs	r1, #4
 800209c:	489c      	ldr	r0, [pc, #624]	; (8002310 <updateRgDisplay+0x294>)
 800209e:	f7fe fc35 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2108      	movs	r1, #8
 80020a6:	489a      	ldr	r0, [pc, #616]	; (8002310 <updateRgDisplay+0x294>)
 80020a8:	f7fe fc30 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2110      	movs	r1, #16
 80020b0:	4897      	ldr	r0, [pc, #604]	; (8002310 <updateRgDisplay+0x294>)
 80020b2:	f7fe fc2b 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2120      	movs	r1, #32
 80020ba:	4895      	ldr	r0, [pc, #596]	; (8002310 <updateRgDisplay+0x294>)
 80020bc:	f7fe fc26 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	4892      	ldr	r0, [pc, #584]	; (8002310 <updateRgDisplay+0x294>)
 80020c6:	f7fe fc21 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	4890      	ldr	r0, [pc, #576]	; (8002310 <updateRgDisplay+0x294>)
 80020d0:	f7fe fc1c 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	488d      	ldr	r0, [pc, #564]	; (8002310 <updateRgDisplay+0x294>)
 80020dc:	f7fe fc16 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e6:	488a      	ldr	r0, [pc, #552]	; (8002310 <updateRgDisplay+0x294>)
 80020e8:	f7fe fc10 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f2:	4887      	ldr	r0, [pc, #540]	; (8002310 <updateRgDisplay+0x294>)
 80020f4:	f7fe fc0a 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fe:	4884      	ldr	r0, [pc, #528]	; (8002310 <updateRgDisplay+0x294>)
 8002100:	f7fe fc04 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210a:	4881      	ldr	r0, [pc, #516]	; (8002310 <updateRgDisplay+0x294>)
 800210c:	f7fe fbfe 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002116:	487e      	ldr	r0, [pc, #504]	; (8002310 <updateRgDisplay+0x294>)
 8002118:	f7fe fbf8 	bl	800090c <HAL_GPIO_WritePin>
	switch(bank) {
 800211c:	7833      	ldrb	r3, [r6, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d857      	bhi.n	80021d2 <updateRgDisplay+0x156>
 8002122:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002126:	0004      	.short	0x0004
 8002128:	00a8005c 	.word	0x00a8005c
 800212c:	00f9      	.short	0x00f9
	case(0):
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	4877      	ldr	r0, [pc, #476]	; (8002310 <updateRgDisplay+0x294>)
 8002132:	4611      	mov	r1, r2
 8002134:	f7fe fbea 	bl	800090c <HAL_GPIO_WritePin>

			if(red_mask >> 3 & 0x01)
 8002138:	0728      	lsls	r0, r5, #28
 800213a:	d505      	bpl.n	8002148 <updateRgDisplay+0xcc>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002142:	4873      	ldr	r0, [pc, #460]	; (8002310 <updateRgDisplay+0x294>)
 8002144:	f7fe fbe2 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 7 & 0x01)
 8002148:	0629      	lsls	r1, r5, #24
 800214a:	d504      	bpl.n	8002156 <updateRgDisplay+0xda>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	486f      	ldr	r0, [pc, #444]	; (8002310 <updateRgDisplay+0x294>)
 8002152:	f7fe fbdb 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 11 & 0x01)
 8002156:	052a      	lsls	r2, r5, #20
 8002158:	d504      	bpl.n	8002164 <updateRgDisplay+0xe8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	486c      	ldr	r0, [pc, #432]	; (8002310 <updateRgDisplay+0x294>)
 8002160:	f7fe fbd4 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 15 & 0x01)
 8002164:	042b      	lsls	r3, r5, #16
 8002166:	d504      	bpl.n	8002172 <updateRgDisplay+0xf6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2120      	movs	r1, #32
 800216c:	4868      	ldr	r0, [pc, #416]	; (8002310 <updateRgDisplay+0x294>)
 800216e:	f7fe fbcd 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 19 & 0x01)
 8002172:	0328      	lsls	r0, r5, #12
 8002174:	d504      	bpl.n	8002180 <updateRgDisplay+0x104>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	2110      	movs	r1, #16
 800217a:	4865      	ldr	r0, [pc, #404]	; (8002310 <updateRgDisplay+0x294>)
 800217c:	f7fe fbc6 	bl	800090c <HAL_GPIO_WritePin>

			if(green_mask >> 3 & 0x01)
 8002180:	0721      	lsls	r1, r4, #28
 8002182:	d505      	bpl.n	8002190 <updateRgDisplay+0x114>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218a:	4861      	ldr	r0, [pc, #388]	; (8002310 <updateRgDisplay+0x294>)
 800218c:	f7fe fbbe 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 7 & 0x01)
 8002190:	0622      	lsls	r2, r4, #24
 8002192:	d505      	bpl.n	80021a0 <updateRgDisplay+0x124>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219a:	485d      	ldr	r0, [pc, #372]	; (8002310 <updateRgDisplay+0x294>)
 800219c:	f7fe fbb6 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 11 & 0x01)
 80021a0:	0523      	lsls	r3, r4, #20
 80021a2:	d505      	bpl.n	80021b0 <updateRgDisplay+0x134>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021aa:	4859      	ldr	r0, [pc, #356]	; (8002310 <updateRgDisplay+0x294>)
 80021ac:	f7fe fbae 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 15 & 0x01)
 80021b0:	0425      	lsls	r5, r4, #16
 80021b2:	d505      	bpl.n	80021c0 <updateRgDisplay+0x144>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ba:	4855      	ldr	r0, [pc, #340]	; (8002310 <updateRgDisplay+0x294>)
 80021bc:	f7fe fba6 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 19 & 0x01)
 80021c0:	f414 2f00 	tst.w	r4, #524288	; 0x80000
 80021c4:	d005      	beq.n	80021d2 <updateRgDisplay+0x156>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021cc:	4850      	ldr	r0, [pc, #320]	; (8002310 <updateRgDisplay+0x294>)
 80021ce:	f7fe fb9d 	bl	800090c <HAL_GPIO_WritePin>

			break;

	}

	bank = (bank + 1) % 4;
 80021d2:	7833      	ldrb	r3, [r6, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	7033      	strb	r3, [r6, #0]
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,GPIO_PIN_SET);
 80021de:	484c      	ldr	r0, [pc, #304]	; (8002310 <updateRgDisplay+0x294>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	2102      	movs	r1, #2
 80021e4:	f7fe fb92 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 2 & 0x01)
 80021e8:	0768      	lsls	r0, r5, #29
 80021ea:	d505      	bpl.n	80021f8 <updateRgDisplay+0x17c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f2:	4847      	ldr	r0, [pc, #284]	; (8002310 <updateRgDisplay+0x294>)
 80021f4:	f7fe fb8a 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 6 & 0x01)
 80021f8:	0669      	lsls	r1, r5, #25
 80021fa:	d504      	bpl.n	8002206 <updateRgDisplay+0x18a>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	4843      	ldr	r0, [pc, #268]	; (8002310 <updateRgDisplay+0x294>)
 8002202:	f7fe fb83 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 10 & 0x01)
 8002206:	056a      	lsls	r2, r5, #21
 8002208:	d504      	bpl.n	8002214 <updateRgDisplay+0x198>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	4840      	ldr	r0, [pc, #256]	; (8002310 <updateRgDisplay+0x294>)
 8002210:	f7fe fb7c 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 14 & 0x01)
 8002214:	046b      	lsls	r3, r5, #17
 8002216:	d504      	bpl.n	8002222 <updateRgDisplay+0x1a6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	2120      	movs	r1, #32
 800221c:	483c      	ldr	r0, [pc, #240]	; (8002310 <updateRgDisplay+0x294>)
 800221e:	f7fe fb75 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 18 & 0x01)
 8002222:	0368      	lsls	r0, r5, #13
 8002224:	d504      	bpl.n	8002230 <updateRgDisplay+0x1b4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2110      	movs	r1, #16
 800222a:	4839      	ldr	r0, [pc, #228]	; (8002310 <updateRgDisplay+0x294>)
 800222c:	f7fe fb6e 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 2 & 0x01)
 8002230:	0761      	lsls	r1, r4, #29
 8002232:	d505      	bpl.n	8002240 <updateRgDisplay+0x1c4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <updateRgDisplay+0x294>)
 800223c:	f7fe fb66 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 6 & 0x01)
 8002240:	0662      	lsls	r2, r4, #25
 8002242:	d505      	bpl.n	8002250 <updateRgDisplay+0x1d4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224a:	4831      	ldr	r0, [pc, #196]	; (8002310 <updateRgDisplay+0x294>)
 800224c:	f7fe fb5e 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 10 & 0x01)
 8002250:	0563      	lsls	r3, r4, #21
 8002252:	d505      	bpl.n	8002260 <updateRgDisplay+0x1e4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225a:	482d      	ldr	r0, [pc, #180]	; (8002310 <updateRgDisplay+0x294>)
 800225c:	f7fe fb56 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 14 & 0x01)
 8002260:	0465      	lsls	r5, r4, #17
 8002262:	d505      	bpl.n	8002270 <updateRgDisplay+0x1f4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800226a:	4829      	ldr	r0, [pc, #164]	; (8002310 <updateRgDisplay+0x294>)
 800226c:	f7fe fb4e 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 18 & 0x01)
 8002270:	f414 2f80 	tst.w	r4, #262144	; 0x40000
 8002274:	e7a6      	b.n	80021c4 <updateRgDisplay+0x148>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 8002276:	4826      	ldr	r0, [pc, #152]	; (8002310 <updateRgDisplay+0x294>)
 8002278:	2201      	movs	r2, #1
 800227a:	2104      	movs	r1, #4
 800227c:	f7fe fb46 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 1 & 0x01)
 8002280:	07a8      	lsls	r0, r5, #30
 8002282:	d505      	bpl.n	8002290 <updateRgDisplay+0x214>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4821      	ldr	r0, [pc, #132]	; (8002310 <updateRgDisplay+0x294>)
 800228c:	f7fe fb3e 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 5 & 0x01)
 8002290:	06a9      	lsls	r1, r5, #26
 8002292:	d504      	bpl.n	800229e <updateRgDisplay+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	481d      	ldr	r0, [pc, #116]	; (8002310 <updateRgDisplay+0x294>)
 800229a:	f7fe fb37 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 9 & 0x01)
 800229e:	05aa      	lsls	r2, r5, #22
 80022a0:	d504      	bpl.n	80022ac <updateRgDisplay+0x230>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 80022a2:	2201      	movs	r2, #1
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	481a      	ldr	r0, [pc, #104]	; (8002310 <updateRgDisplay+0x294>)
 80022a8:	f7fe fb30 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 13 & 0x01)
 80022ac:	04ab      	lsls	r3, r5, #18
 80022ae:	d504      	bpl.n	80022ba <updateRgDisplay+0x23e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2120      	movs	r1, #32
 80022b4:	4816      	ldr	r0, [pc, #88]	; (8002310 <updateRgDisplay+0x294>)
 80022b6:	f7fe fb29 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 17 & 0x01)
 80022ba:	03a8      	lsls	r0, r5, #14
 80022bc:	d504      	bpl.n	80022c8 <updateRgDisplay+0x24c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	2110      	movs	r1, #16
 80022c2:	4813      	ldr	r0, [pc, #76]	; (8002310 <updateRgDisplay+0x294>)
 80022c4:	f7fe fb22 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 1 & 0x01)
 80022c8:	07a1      	lsls	r1, r4, #30
 80022ca:	d505      	bpl.n	80022d8 <updateRgDisplay+0x25c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d2:	480f      	ldr	r0, [pc, #60]	; (8002310 <updateRgDisplay+0x294>)
 80022d4:	f7fe fb1a 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 5 & 0x01)
 80022d8:	06a2      	lsls	r2, r4, #26
 80022da:	d505      	bpl.n	80022e8 <updateRgDisplay+0x26c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <updateRgDisplay+0x294>)
 80022e4:	f7fe fb12 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 9 & 0x01)
 80022e8:	05a3      	lsls	r3, r4, #22
 80022ea:	d505      	bpl.n	80022f8 <updateRgDisplay+0x27c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <updateRgDisplay+0x294>)
 80022f4:	f7fe fb0a 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 13 & 0x01)
 80022f8:	04a5      	lsls	r5, r4, #18
 80022fa:	d505      	bpl.n	8002308 <updateRgDisplay+0x28c>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <updateRgDisplay+0x294>)
 8002304:	f7fe fb02 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 17 & 0x01)
 8002308:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800230c:	e75a      	b.n	80021c4 <updateRgDisplay+0x148>
 800230e:	bf00      	nop
 8002310:	40020c00 	.word	0x40020c00
 8002314:	20003d78 	.word	0x20003d78
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3,GPIO_PIN_SET);
 8002318:	4825      	ldr	r0, [pc, #148]	; (80023b0 <updateRgDisplay+0x334>)
 800231a:	2201      	movs	r2, #1
 800231c:	2108      	movs	r1, #8
 800231e:	f7fe faf5 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 0 & 0x01)
 8002322:	07e8      	lsls	r0, r5, #31
 8002324:	d505      	bpl.n	8002332 <updateRgDisplay+0x2b6>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232c:	4820      	ldr	r0, [pc, #128]	; (80023b0 <updateRgDisplay+0x334>)
 800232e:	f7fe faed 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 4 & 0x01)
 8002332:	06e9      	lsls	r1, r5, #27
 8002334:	d504      	bpl.n	8002340 <updateRgDisplay+0x2c4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	481d      	ldr	r0, [pc, #116]	; (80023b0 <updateRgDisplay+0x334>)
 800233c:	f7fe fae6 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 8 & 0x01)
 8002340:	05ea      	lsls	r2, r5, #23
 8002342:	d504      	bpl.n	800234e <updateRgDisplay+0x2d2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	2140      	movs	r1, #64	; 0x40
 8002348:	4819      	ldr	r0, [pc, #100]	; (80023b0 <updateRgDisplay+0x334>)
 800234a:	f7fe fadf 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 12 & 0x01)
 800234e:	04eb      	lsls	r3, r5, #19
 8002350:	d504      	bpl.n	800235c <updateRgDisplay+0x2e0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5,GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2120      	movs	r1, #32
 8002356:	4816      	ldr	r0, [pc, #88]	; (80023b0 <updateRgDisplay+0x334>)
 8002358:	f7fe fad8 	bl	800090c <HAL_GPIO_WritePin>
			if(red_mask >> 16 & 0x01)
 800235c:	03ed      	lsls	r5, r5, #15
 800235e:	d504      	bpl.n	800236a <updateRgDisplay+0x2ee>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2110      	movs	r1, #16
 8002364:	4812      	ldr	r0, [pc, #72]	; (80023b0 <updateRgDisplay+0x334>)
 8002366:	f7fe fad1 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 0 & 0x01)
 800236a:	07e0      	lsls	r0, r4, #31
 800236c:	d505      	bpl.n	800237a <updateRgDisplay+0x2fe>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002374:	480e      	ldr	r0, [pc, #56]	; (80023b0 <updateRgDisplay+0x334>)
 8002376:	f7fe fac9 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 4 & 0x01)
 800237a:	06e1      	lsls	r1, r4, #27
 800237c:	d505      	bpl.n	800238a <updateRgDisplay+0x30e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002384:	480a      	ldr	r0, [pc, #40]	; (80023b0 <updateRgDisplay+0x334>)
 8002386:	f7fe fac1 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 8 & 0x01)
 800238a:	05e2      	lsls	r2, r4, #23
 800238c:	d505      	bpl.n	800239a <updateRgDisplay+0x31e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET);
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002394:	4806      	ldr	r0, [pc, #24]	; (80023b0 <updateRgDisplay+0x334>)
 8002396:	f7fe fab9 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 12 & 0x01)
 800239a:	04e3      	lsls	r3, r4, #19
 800239c:	d505      	bpl.n	80023aa <updateRgDisplay+0x32e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10,GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <updateRgDisplay+0x334>)
 80023a6:	f7fe fab1 	bl	800090c <HAL_GPIO_WritePin>
			if(green_mask >> 16 & 0x01)
 80023aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80023ae:	e709      	b.n	80021c4 <updateRgDisplay+0x148>
 80023b0:	40020c00 	.word	0x40020c00

080023b4 <updateStatusDisplay>:
}


void updateStatusDisplay(unsigned int status_mask)
{
 80023b4:	b538      	push	{r3, r4, r5, lr}
	unsigned static char led = 0;
	led = (led + 1) % 8;
 80023b6:	4d30      	ldr	r5, [pc, #192]	; (8002478 <updateStatusDisplay+0xc4>)
 80023b8:	782b      	ldrb	r3, [r5, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 0307 	and.w	r3, r3, #7

	//Start with LED 8 (power LED)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
{
 80023c4:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80023c6:	482d      	ldr	r0, [pc, #180]	; (800247c <updateStatusDisplay+0xc8>)
	led = (led + 1) % 8;
 80023c8:	702b      	strb	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80023ca:	f7fe fa9f 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2102      	movs	r1, #2
 80023d2:	482a      	ldr	r0, [pc, #168]	; (800247c <updateStatusDisplay+0xc8>)
 80023d4:	f7fe fa9a 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	2104      	movs	r1, #4
 80023dc:	4827      	ldr	r0, [pc, #156]	; (800247c <updateStatusDisplay+0xc8>)
 80023de:	f7fe fa95 	bl	800090c <HAL_GPIO_WritePin>

	switch(led) {
 80023e2:	782b      	ldrb	r3, [r5, #0]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d845      	bhi.n	8002474 <updateStatusDisplay+0xc0>
 80023e8:	e8df f003 	tbb	[pc, r3]
 80023ec:	2e251204 	.word	0x2e251204
 80023f0:	3c37      	.short	0x3c37
 80023f2:	40          	.byte	0x40
 80023f3:	00          	.byte	0x00
	case(0):
			if(status_mask >> 0 & 0x01) {
 80023f4:	07e3      	lsls	r3, r4, #31
 80023f6:	d53d      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
			}
			break;
	case(5):
			if(status_mask >> 5 & 0x01) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 80023fa:	2101      	movs	r1, #1
 80023fc:	481f      	ldr	r0, [pc, #124]	; (800247c <updateStatusDisplay+0xc8>)
 80023fe:	f7fe fa85 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
			}
			break;
	case(6):
			if(status_mask >> 6 & 0x01) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8002404:	2102      	movs	r1, #2
 8002406:	481d      	ldr	r0, [pc, #116]	; (800247c <updateStatusDisplay+0xc8>)
 8002408:	f7fe fa80 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	e00c      	b.n	800242a <updateStatusDisplay+0x76>
			if(status_mask >> 1 & 0x01) {
 8002410:	07a5      	lsls	r5, r4, #30
 8002412:	d52f      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	4611      	mov	r1, r2
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <updateStatusDisplay+0xc8>)
 800241a:	f7fe fa77 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8002420:	2102      	movs	r1, #2
 8002422:	4816      	ldr	r0, [pc, #88]	; (800247c <updateStatusDisplay+0xc8>)
 8002424:	f7fe fa72 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 800242a:	2104      	movs	r1, #4
 800242c:	4813      	ldr	r0, [pc, #76]	; (800247c <updateStatusDisplay+0xc8>)

	}


	return;
}
 800242e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8002432:	f7fe ba6b 	b.w	800090c <HAL_GPIO_WritePin>
			if(status_mask >> 2 & 0x01) {
 8002436:	0764      	lsls	r4, r4, #29
 8002438:	d51c      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 800243c:	2101      	movs	r1, #1
 800243e:	480f      	ldr	r0, [pc, #60]	; (800247c <updateStatusDisplay+0xc8>)
 8002440:	f7fe fa64 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	e7dd      	b.n	8002404 <updateStatusDisplay+0x50>
			if(status_mask >> 3 & 0x01) {
 8002448:	0720      	lsls	r0, r4, #28
 800244a:	d513      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	2101      	movs	r1, #1
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <updateStatusDisplay+0xc8>)
 8002452:	f7fe fa5b 	bl	800090c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	e7e2      	b.n	8002420 <updateStatusDisplay+0x6c>
			if(status_mask >> 4 & 0x01) {
 800245a:	06e1      	lsls	r1, r4, #27
 800245c:	d50a      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	4611      	mov	r1, r2
 8002462:	e7f5      	b.n	8002450 <updateStatusDisplay+0x9c>
			if(status_mask >> 5 & 0x01) {
 8002464:	06a2      	lsls	r2, r4, #26
 8002466:	d505      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	e7c6      	b.n	80023fa <updateStatusDisplay+0x46>
			if(status_mask >> 6 & 0x01) {
 800246c:	0663      	lsls	r3, r4, #25
 800246e:	d501      	bpl.n	8002474 <updateStatusDisplay+0xc0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	e7e3      	b.n	800243c <updateStatusDisplay+0x88>
 8002474:	bd38      	pop	{r3, r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	20003d7a 	.word	0x20003d7a
 800247c:	40020400 	.word	0x40020400

08002480 <StartDisplayTask>:
{
 8002480:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	4810      	ldr	r0, [pc, #64]	; (80024c8 <StartDisplayTask+0x48>)
	  updateStatusDisplay(STATUS_MASK);
 8002488:	4e10      	ldr	r6, [pc, #64]	; (80024cc <StartDisplayTask+0x4c>)
	  updateRgDisplay(RED_MASK, GREEN_MASK);
 800248a:	4d11      	ldr	r5, [pc, #68]	; (80024d0 <StartDisplayTask+0x50>)
 800248c:	4c11      	ldr	r4, [pc, #68]	; (80024d4 <StartDisplayTask+0x54>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800248e:	f7fe fa3d 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002498:	480b      	ldr	r0, [pc, #44]	; (80024c8 <StartDisplayTask+0x48>)
 800249a:	f7fe fa37 	bl	800090c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a4:	4808      	ldr	r0, [pc, #32]	; (80024c8 <StartDisplayTask+0x48>)
 80024a6:	f7fe fa31 	bl	800090c <HAL_GPIO_WritePin>
	  updateStatusDisplay(STATUS_MASK);
 80024aa:	6830      	ldr	r0, [r6, #0]
 80024ac:	f7ff ff82 	bl	80023b4 <updateStatusDisplay>
	  updateRgDisplay(RED_MASK, GREEN_MASK);
 80024b0:	6829      	ldr	r1, [r5, #0]
 80024b2:	6820      	ldr	r0, [r4, #0]
 80024b4:	f7ff fde2 	bl	800207c <updateRgDisplay>
	  updateCharacterDisplay(SEGMENT_DISP);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <StartDisplayTask+0x58>)
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	f7ff fd56 	bl	8001f6c <updateCharacterDisplay>
	  osDelay(1);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe ff76 	bl	80013b2 <osDelay>
 80024c6:	e7f0      	b.n	80024aa <StartDisplayTask+0x2a>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20003d7c 	.word	0x20003d7c
 80024d4:	20003d80 	.word	0x20003d80
 80024d8:	20003d84 	.word	0x20003d84

080024dc <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80024dc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe ff67 	bl	80013b2 <osDelay>
 80024e4:	e7fb      	b.n	80024de <StartDefaultTask+0x2>
	...

080024e8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80024e8:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80024ea:	4c0e      	ldr	r4, [pc, #56]	; (8002524 <MX_FREERTOS_Init+0x3c>)
 80024ec:	4626      	mov	r6, r4
 80024ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80024f0:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80024f2:	466d      	mov	r5, sp
 80024f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f6:	6833      	ldr	r3, [r6, #0]
 80024f8:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80024fa:	2100      	movs	r1, #0
 80024fc:	4668      	mov	r0, sp
 80024fe:	f7fe ff40 	bl	8001382 <osThreadCreate>
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_FREERTOS_Init+0x40>)
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8002504:	3414      	adds	r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002506:	6018      	str	r0, [r3, #0]
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8002508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250a:	ad05      	add	r5, sp, #20
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	602b      	str	r3, [r5, #0]
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8002512:	2100      	movs	r1, #0
 8002514:	a805      	add	r0, sp, #20
 8002516:	f7fe ff34 	bl	8001382 <osThreadCreate>
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <MX_FREERTOS_Init+0x44>)
 800251c:	6018      	str	r0, [r3, #0]
}
 800251e:	b00a      	add	sp, #40	; 0x28
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	bf00      	nop
 8002524:	08002a70 	.word	0x08002a70
 8002528:	20003d8c 	.word	0x20003d8c
 800252c:	20003d90 	.word	0x20003d90

08002530 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002536:	2400      	movs	r4, #0
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <MX_GPIO_Init+0x1cc>)
 800253a:	9401      	str	r4, [sp, #4]
 800253c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 800253e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002708 <MX_GPIO_Init+0x1d8>
                          |GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|DDS_CLK_Pin|DDS_RESET_Pin, GPIO_PIN_RESET);
 8002542:	4f6f      	ldr	r7, [pc, #444]	; (8002700 <MX_GPIO_Init+0x1d0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8002544:	4e6f      	ldr	r6, [pc, #444]	; (8002704 <MX_GPIO_Init+0x1d4>)
                          |DDS_DATA_Pin|DDS_FQ_UD_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002546:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800270c <MX_GPIO_Init+0x1dc>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800254a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8002710 <MX_GPIO_Init+0x1e0>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800254e:	f042 0210 	orr.w	r2, r2, #16
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002556:	f002 0210 	and.w	r2, r2, #16
 800255a:	9201      	str	r2, [sp, #4]
 800255c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255e:	9402      	str	r4, [sp, #8]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256a:	f002 0204 	and.w	r2, r2, #4
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002572:	9403      	str	r4, [sp, #12]
 8002574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
 800257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002582:	9203      	str	r2, [sp, #12]
 8002584:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	9404      	str	r4, [sp, #16]
 8002588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
 8002590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002592:	f002 0201 	and.w	r2, r2, #1
 8002596:	9204      	str	r2, [sp, #16]
 8002598:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	9405      	str	r4, [sp, #20]
 800259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259e:	f042 0202 	orr.w	r2, r2, #2
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	f002 0202 	and.w	r2, r2, #2
 80025aa:	9205      	str	r2, [sp, #20]
 80025ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ae:	9406      	str	r4, [sp, #24]
 80025b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 80025c0:	4622      	mov	r2, r4
 80025c2:	4640      	mov	r0, r8
 80025c4:	f242 1133 	movw	r1, #8499	; 0x2133
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 80025ca:	f7fe f99f 	bl	800090c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|DDS_CLK_Pin|DDS_RESET_Pin, GPIO_PIN_RESET);
 80025ce:	4622      	mov	r2, r4
 80025d0:	4638      	mov	r0, r7
 80025d2:	f248 1104 	movw	r1, #33028	; 0x8104
 80025d6:	f7fe f999 	bl	800090c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 80025da:	4622      	mov	r2, r4
 80025dc:	4630      	mov	r0, r6
 80025de:	f248 2137 	movw	r1, #33335	; 0x8237
 80025e2:	f7fe f993 	bl	800090c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80025e6:	4622      	mov	r2, r4
 80025e8:	4650      	mov	r0, sl
 80025ea:	f64f 7181 	movw	r1, #65409	; 0xff81
 80025ee:	f7fe f98d 	bl	800090c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80025f2:	4622      	mov	r2, r4
 80025f4:	4648      	mov	r0, r9
 80025f6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80025fa:	f7fe f987 	bl	800090c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80025fe:	237e      	movs	r3, #126	; 0x7e
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002600:	a907      	add	r1, sp, #28
 8002602:	4650      	mov	r0, sl

  /*Configure GPIO pins : PC13 PC0 PC1 PC4 
                           PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002606:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002608:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260c:	f7fe f838 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8002610:	f242 1333 	movw	r3, #8499	; 0x2133
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	a907      	add	r1, sp, #28
 8002616:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
 8002618:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	f7fe f82e 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DDS_RESET_Pin;
 8002624:	f248 0304 	movw	r3, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	a907      	add	r1, sp, #28
 800262a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_2|DDS_RESET_Pin;
 800262c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f7fe f824 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB15 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8002638:	f248 2307 	movw	r3, #33287	; 0x8207
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	a907      	add	r1, sp, #28
 800263e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15 
 8002640:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f7fe f81a 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800264c:	f64f 7381 	movw	r3, #65409	; 0xff81
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002650:	a907      	add	r1, sp, #28
 8002652:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002654:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265c:	f7fe f810 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8002660:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	a907      	add	r1, sp, #28
 8002666:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8;
 8002668:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f7fe f807 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002672:	f643 73ff 	movw	r3, #16383	; 0x3fff
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002676:	a907      	add	r1, sp, #28
 8002678:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800267a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	f7fd fffd 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002686:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268a:	a907      	add	r1, sp, #28
 800268c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800268e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f7fd fff4 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a4:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a8:	930b      	str	r3, [sp, #44]	; 0x2c

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f7fd ffe5 	bl	8000680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
 80026b6:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(DDS_CLK_GPIO_Port, &GPIO_InitStruct);
 80026ba:	a907      	add	r1, sp, #28
 80026bc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = DDS_CLK_Pin;
 80026be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(DDS_CLK_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f7fd ffda 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	a907      	add	r1, sp, #28
 80026d2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f7fd ffd0 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DDS_DATA_Pin|DDS_FQ_UD_Pin;
 80026e0:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	a907      	add	r1, sp, #28
 80026e4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DDS_DATA_Pin|DDS_FQ_UD_Pin;
 80026e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f7fd ffc6 	bl	8000680 <HAL_GPIO_Init>

}
 80026f4:	b00c      	add	sp, #48	; 0x30
 80026f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40021000 	.word	0x40021000
 8002710:	40020c00 	.word	0x40020c00

08002714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <SystemClock_Config+0xa8>)
 800271a:	2100      	movs	r1, #0
 800271c:	9101      	str	r1, [sp, #4]
 800271e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <SystemClock_Config+0xac>)
 8002732:	9102      	str	r1, [sp, #8]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	9302      	str	r3, [sp, #8]
 8002744:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002746:	2301      	movs	r3, #1
 8002748:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002754:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002756:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002758:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800275a:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 800275c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002760:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002762:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002764:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002766:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002768:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276a:	f7fe f8e9 	bl	8000940 <HAL_RCC_OscConfig>
 800276e:	b100      	cbz	r0, 8002772 <SystemClock_Config+0x5e>
 8002770:	e7fe      	b.n	8002770 <SystemClock_Config+0x5c>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002776:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002778:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277a:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002780:	2105      	movs	r1, #5
 8002782:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002784:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002786:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002788:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800278a:	f7fe faff 	bl	8000d8c <HAL_RCC_ClockConfig>
 800278e:	4604      	mov	r4, r0
 8002790:	b100      	cbz	r0, 8002794 <SystemClock_Config+0x80>
 8002792:	e7fe      	b.n	8002792 <SystemClock_Config+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002794:	f7fe fbee 	bl	8000f74 <HAL_RCC_GetHCLKFreq>
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	fbb0 f0f3 	udiv	r0, r0, r3
 80027a0:	f7fd ff40 	bl	8000624 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027a4:	4630      	mov	r0, r6
 80027a6:	f7fd ff53 	bl	8000650 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80027aa:	4622      	mov	r2, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b2:	f7fd fedf 	bl	8000574 <HAL_NVIC_SetPriority>
}
 80027b6:	b014      	add	sp, #80	; 0x50
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000

080027c4 <main>:
{
 80027c4:	b508      	push	{r3, lr}
  HAL_Init();
 80027c6:	f7fd fe8b 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 80027ca:	f7ff ffa3 	bl	8002714 <SystemClock_Config>
  MX_GPIO_Init();
 80027ce:	f7ff feaf 	bl	8002530 <MX_GPIO_Init>
  RED_MASK = 0x555555;
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <main+0x30>)
 80027d4:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <main+0x34>)
 80027d6:	601a      	str	r2, [r3, #0]
  GREEN_MASK = 0xAAAAAA;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <main+0x38>)
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <main+0x3c>)
 80027dc:	601a      	str	r2, [r3, #0]
  SEGMENT_DISP = 123456;
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <main+0x40>)
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <main+0x44>)
 80027e2:	601a      	str	r2, [r3, #0]
  STATUS_MASK = 0x01 << 7;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <main+0x48>)
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	601a      	str	r2, [r3, #0]
  MX_FREERTOS_Init();
 80027ea:	f7ff fe7d 	bl	80024e8 <MX_FREERTOS_Init>
  osKernelStart();
 80027ee:	f7fe fdc3 	bl	8001378 <osKernelStart>
 80027f2:	e7fe      	b.n	80027f2 <main+0x2e>
 80027f4:	20003d80 	.word	0x20003d80
 80027f8:	00555555 	.word	0x00555555
 80027fc:	20003d7c 	.word	0x20003d7c
 8002800:	00aaaaaa 	.word	0x00aaaaaa
 8002804:	20003d84 	.word	0x20003d84
 8002808:	0001e240 	.word	0x0001e240
 800280c:	20000008 	.word	0x20000008

08002810 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d101      	bne.n	800281c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002818:	f7fd be7c 	b.w	8000514 <HAL_IncTick>
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40000400 	.word	0x40000400

08002824 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8002824:	4770      	bx	lr

08002826 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002826:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f7fd fe85 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	4611      	mov	r1, r2
 8002832:	f06f 000b 	mvn.w	r0, #11
 8002836:	f7fd fe9d 	bl	8000574 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	4611      	mov	r1, r2
 800283e:	f06f 000a 	mvn.w	r0, #10
 8002842:	f7fd fe97 	bl	8000574 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	4611      	mov	r1, r2
 800284a:	f06f 0009 	mvn.w	r0, #9
 800284e:	f7fd fe91 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	4611      	mov	r1, r2
 8002856:	f06f 0004 	mvn.w	r0, #4
 800285a:	f7fd fe8b 	bl	8000574 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	4611      	mov	r1, r2
 8002862:	f06f 0003 	mvn.w	r0, #3
 8002866:	f7fd fe85 	bl	8000574 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	210f      	movs	r1, #15
 800286e:	f06f 0001 	mvn.w	r0, #1
 8002872:	f7fd fe7f 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	210f      	movs	r1, #15
 800287a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002882:	f7fd be77 	b.w	8000574 <HAL_NVIC_SetPriority>
	...

08002888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800288a:	4601      	mov	r1, r0
{
 800288c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800288e:	2200      	movs	r2, #0
 8002890:	201d      	movs	r0, #29
 8002892:	f7fd fe6f 	bl	8000574 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8002896:	201d      	movs	r0, #29
 8002898:	f7fd feae 	bl	80005f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800289c:	2500      	movs	r5, #0
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_InitTick+0x6c>)
 80028a0:	9502      	str	r5, [sp, #8]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80028a4:	4c14      	ldr	r4, [pc, #80]	; (80028f8 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80028a6:	f042 0202 	orr.w	r2, r2, #2
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028b4:	a901      	add	r1, sp, #4
 80028b6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 80028b8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028ba:	f7fe fb71 	bl	8000fa0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028be:	f7fe fb5f 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_InitTick+0x74>)
 80028c4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80028c6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80028ca:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028cc:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_InitTick+0x78>)
 80028d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028d4:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 80028d6:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80028d8:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 80028da:	6125      	str	r5, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80028de:	f7fe fcd5 	bl	800128c <HAL_TIM_Base_Init>
 80028e2:	b920      	cbnz	r0, 80028ee <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7fe fb79 	bl	8000fdc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80028ea:	b009      	add	sp, #36	; 0x24
 80028ec:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e7fb      	b.n	80028ea <HAL_InitTick+0x62>
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	20003d94 	.word	0x20003d94
 80028fc:	40000400 	.word	0x40000400
 8002900:	000f4240 	.word	0x000f4240

08002904 <NMI_Handler>:
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002906:	e7fe      	b.n	8002906 <HardFault_Handler>

08002908 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002908:	e7fe      	b.n	8002908 <MemManage_Handler>

0800290a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800290a:	e7fe      	b.n	800290a <BusFault_Handler>

0800290c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler>

0800290e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800290e:	4770      	bx	lr

08002910 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002910:	f7fe bd57 	b.w	80013c2 <osSystickHandler>

08002914 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <TIM3_IRQHandler+0x8>)
 8002916:	f7fe bbb3 	b.w	8001080 <HAL_TIM_IRQHandler>
 800291a:	bf00      	nop
 800291c:	20003d94 	.word	0x20003d94

08002920 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	490f      	ldr	r1, [pc, #60]	; (8002960 <SystemInit+0x40>)
 8002922:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <SystemInit+0x44>)
 8002930:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002932:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800293a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002942:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002946:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <SystemInit+0x48>)
 800294a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002952:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002954:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00
 8002964:	40023800 	.word	0x40023800
 8002968:	24003010 	.word	0x24003010

0800296c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800296c:	6803      	ldr	r3, [r0, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002972:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8002974:	d10d      	bne.n	8002992 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 800297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800298e:	b002      	add	sp, #8
 8002990:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM5)
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d1fa      	bne.n	800298e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	f042 0208 	orr.w	r2, r2, #8
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	9b01      	ldr	r3, [sp, #4]
}
 80029b0:	e7ed      	b.n	800298e <HAL_TIM_Base_MspInit+0x22>
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40000c00 	.word	0x40000c00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c2:	e003      	b.n	80029cc <LoopCopyDataInit>

080029c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ca:	3104      	adds	r1, #4

080029cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d4:	d3f6      	bcc.n	80029c4 <CopyDataInit>
  ldr  r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029d8:	e002      	b.n	80029e0 <LoopFillZerobss>

080029da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029dc:	f842 3b04 	str.w	r3, [r2], #4

080029e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e4:	d3f9      	bcc.n	80029da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029e6:	f7ff ff9b 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f000 f811 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff fee9 	bl	80027c4 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029f8:	08002bcc 	.word	0x08002bcc
  ldr  r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a00:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002a04:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002a08:	20003dd0 	.word	0x20003dd0

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>
	...

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4e0d      	ldr	r6, [pc, #52]	; (8002a48 <__libc_init_array+0x38>)
 8002a14:	4c0d      	ldr	r4, [pc, #52]	; (8002a4c <__libc_init_array+0x3c>)
 8002a16:	1ba4      	subs	r4, r4, r6
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	42a5      	cmp	r5, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	4e0b      	ldr	r6, [pc, #44]	; (8002a50 <__libc_init_array+0x40>)
 8002a22:	4c0c      	ldr	r4, [pc, #48]	; (8002a54 <__libc_init_array+0x44>)
 8002a24:	f000 f818 	bl	8002a58 <_init>
 8002a28:	1ba4      	subs	r4, r4, r6
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	42a5      	cmp	r5, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a38:	4798      	blx	r3
 8002a3a:	3501      	adds	r5, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a42:	4798      	blx	r3
 8002a44:	3501      	adds	r5, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	08002bc4 	.word	0x08002bc4
 8002a4c:	08002bc4 	.word	0x08002bc4
 8002a50:	08002bc4 	.word	0x08002bc4
 8002a54:	08002bc8 	.word	0x08002bc8

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
